from .parameter import BitDescriptor, Parameter, ParameterBinary
from .point_type import PointType
from roc_data_types import ParameterDataTypes as dt


class POWER_CONTROL_PARAMETERS(PointType):
    """Power Control Parameters"""

    point_type_number: int = 100
    """Point Type ID"""

    point_type_desc: str = 'Power Control Parameters'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag Identification',
            parameter_desc='Specifies a name used to identify this radio power control point.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Specifies a name used to identify this radio power control point.
        """

        STATUS = PointTypeParameter(
            parameter_number=1,
            parameter_name='Status',
            parameter_desc='Status of power control on this port. Valid values are 0 (Power Disabled) and 1 (Power Enabled).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0,1'
        )
        """
        Status of power control on this port. Valid values are 0 (Power Disabled) and 1 (Power Enabled).
        """

        ENABLE = PointTypeParameter(
            parameter_number=2,
            parameter_name='Enable',
            parameter_desc='The enabled mode for the power control on this port. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0,1'
        )
        """
        The enabled mode for the power control on this port. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        START_TIME_1 = PointTypeParameter(
            parameter_number=3,
            parameter_name='Start Time #1',
            parameter_desc='Zone 1 start time.',
            data_type=dt.HOURMINUTE,
            access='R/W',
            value_range='See Default Above'
        )
        """
        Zone 1 start time.
        """

        START_TIME_2 = PointTypeParameter(
            parameter_number=4,
            parameter_name='Start Time #2',
            parameter_desc='Zone 2 start time.',
            data_type=dt.HOURMINUTE,
            access='R/W',
            value_range='See Default Above'
        )
        """
        Zone 2 start time.
        """

        START_TIME_3 = PointTypeParameter(
            parameter_number=5,
            parameter_name='Start Time #3',
            parameter_desc='Zone 3 start time.',
            data_type=dt.HOURMINUTE,
            access='R/W',
            value_range='See Default Above'
        )
        """
        Zone 3 start time.
        """

        ON_TIME_1 = PointTypeParameter(
            parameter_number=6,
            parameter_name='On Time #1',
            parameter_desc='On time for Zone 1. The amount of time for this cycle, the DO associated with this power control is in the on state (in milliseconds).',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0, 100 4294967295'
        )
        """
        On time for Zone 1. The amount of time for this cycle, the DO associated with this power control is in the on state (in milliseconds).
        """

        ON_TIME_2 = PointTypeParameter(
            parameter_number=7,
            parameter_name='On Time #2',
            parameter_desc='On time for Zone 2. The amount of time for this cycle, the DO associated with this power control will be in the on state (in milliseconds).',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0, 100 4294967295'
        )
        """
        On time for Zone 2. The amount of time for this cycle, the DO associated with this power control will be in the on state (in milliseconds).
        """

        ON_TIME_3 = PointTypeParameter(
            parameter_number=8,
            parameter_name='On Time #3',
            parameter_desc='On time for Zone 3. The amount of time for this cycle, the DO associated with this power control is in the on state (in milliseconds).',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0, 100 4294967295'
        )
        """
        On time for Zone 3. The amount of time for this cycle, the DO associated with this power control is in the on state (in milliseconds).
        """

        OFF_TIME_1 = PointTypeParameter(
            parameter_number=9,
            parameter_name='Off Time #1',
            parameter_desc='Off time for Zone 1. The amount of time (in milliseconds) for this cycle, the DO associated with this power control is in the off state (following the on state)',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0, 100 4294967295'
        )
        """
        Off time for Zone 1. The amount of time (in milliseconds) for this cycle, the DO associated with this power control is in the off state (following the on state)
        """

        OFF_TIME_2 = PointTypeParameter(
            parameter_number=10,
            parameter_name='Off Time #2',
            parameter_desc='Off time for Zone 2. The amount of time (in milliseconds) for this cycle, the DO associated with this power control is in the off state (following the on state).',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0, 100 4294967295'
        )
        """
        Off time for Zone 2. The amount of time (in milliseconds) for this cycle, the DO associated with this power control is in the off state (following the on
        state).
        """

        OFF_TIME_3 = PointTypeParameter(
            parameter_number=11,
            parameter_name='Off Time #3',
            parameter_desc='On time for Zone 3. The amount of time (in milliseconds) for this cycle, the DO associated with this power control is in the off state (following the on state).',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0, 100 4294967295'
        )
        """
        On time for Zone 3. The amount of time (in milliseconds) for this cycle, the DO associated with this power control is in the off state (following the on state).
        """

        ACTIVE_TIME_ZONE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Active Time Zone',
            parameter_desc='This parameter is the current active power zone.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='1-3'
        )
        """
        This parameter is the current active power zone.
        """

        HOLD_TIME = PointTypeParameter(
            parameter_number=13,
            parameter_name='Hold Time',
            parameter_desc='Time in milliseconds that the output is held on after detection of communications. Not applicable for logical 1 if Ethernet Port.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4294967295'
        )
        """
        Time in milliseconds that the output is held on after detection of communications. Not applicable for logical 1 if Ethernet Port.
        """

        POWER_TIMER = PointTypeParameter(
            parameter_number=14,
            parameter_name='Power Timer',
            parameter_desc='Counts down the amount of time, in milliseconds, (On Time, Off Time, Hold Time) that the power control is currently using.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 4294967295'
        )
        """
        Counts down the amount of time, in milliseconds, (On Time, Off Time, Hold Time) that the power control is currently using.
        """

        DISCRETE_OUTPUT_NUMBER = PointTypeParameter(
            parameter_number=15,
            parameter_name='Discrete Output Number',
            parameter_desc='The logical discrete output number.',
            data_type=dt.TLP,
            access='R/W',
            value_range='[0,0,0] or Type: 102. Parameter: 8 Logical is 0-> (number of DO Points - 1).'
        )
        """
        The logical discrete output number.
        """

        LOW_BATTERY = PointTypeParameter(
            parameter_number=16,
            parameter_name='Low Battery',
            parameter_desc='The radio will not be turned on if the voltage drops below this value. In volts.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any IEEE 754 floating point number.'
        )
        """
        The radio will not be turned on if the voltage drops below this value. In volts.
        """

        CUMULATIVE_ON_TIME = PointTypeParameter(
            parameter_number=17,
            parameter_name='Cumulative On Time',
            parameter_desc='The counter shows how many seconds the radio power control has been on.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4294967295'
        )
        """
        The counter shows how many seconds the radio power control has been on.
        """

        CUMULATIVE_OFF_TIME = PointTypeParameter(
            parameter_number=18,
            parameter_name='Cumulative Off Time',
            parameter_desc='This counter shows how many seconds the radio power control has been off.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4294967295'
        )
        """
        This counter shows how many seconds the radio power control has been off.
        """

        LOW_BATTERY_DEADBAND = PointTypeParameter(
            parameter_number=19,
            parameter_name='Low Battery Deadband',
            parameter_desc='This is a dead-band for the low battery level in power control. This is used to keep from the radio continuously turning on and off.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any IEEE 754 floating point number.'
        )
        """
        This is a dead-band for the low battery level in power control. This is used to keep from the radio continuously turning on and off.
        """





class DISCRETE_INPUTS(PointType):
    """Discrete Inputs"""

    point_type_number: int = 101
    """Point Type ID"""

    point_type_desc: str = 'Discrete Inputs'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Identification name for specific DI. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Identification name for specific DI. Values must be printable ASCII characters.
        """

        SCANNING = PointTypeParameter(
            parameter_number=1,
            parameter_name='Scanning',
            parameter_desc='If disabled, field inputs are ignored and no changes will occur unless manually entered. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If disabled, field inputs are ignored and no changes will occur unless manually entered. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        FILTER = PointTypeParameter(
            parameter_number=2,
            parameter_name='Filter',
            parameter_desc='Number of seconds that a DI must remain in the ON state before it is recognized as valid and the Status (parameter #3) is changed.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.00 43,200.0'
        )
        """
        Number of seconds that a DI must remain in the ON state before it is recognized as valid and the Status (parameter #3) is changed.
        """

        STATUS = PointTypeParameter(
            parameter_number=3,
            parameter_name='Status',
            parameter_desc='Indicates the DIs current state. Valid values are 0 (OFF) and 1 (ON).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates the DIs current state. Valid values are 0 (OFF) and 1 (ON).
        """

        INVERT_MODE = PointTypeParameter(
            parameter_number=4,
            parameter_name='Invert Mode',
            parameter_desc='If enabled, the field input will be inverted in the Status (parameter #3 - ON becomes OFF and vice-versa). Valid values are 0 (Invert Status Disabled) and 1 (Invert Status Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, the field input will be inverted in the Status (parameter #3 - ON becomes OFF and vice-versa). Valid values are 0 (Invert Status Disabled) and 1
        (Invert Status Enabled).
        """

        LATCH_MODE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Latch Mode',
            parameter_desc='If enabled, then, on an active transition of the input, the Status (parameter #3) will change to ON and remain in the ON state until it is cleared manually. Valid values are 0 (Latch Status Disabled) and 1 (Latch Status Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, then, on an active transition of the input, the Status (parameter #3) will change to ON and remain in the ON state until it is cleared manually.
        Valid values are 0 (Latch Status Disabled) and 1 (Latch Status Enabled).
        """

        ACCUMULATED_VALUE = PointTypeParameter(
            parameter_number=6,
            parameter_name='Accumulated Value',
            parameter_desc='Number of times the Status (parameter #3) goes from OFF to ON. Value rolls over once it reaches the maximum range.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0-16,000,000'
        )
        """
        Number of times the Status (parameter #3) goes from OFF to ON. Value rolls over once it reaches the maximum range.
        """

        CUMULATIVE_ON_TIME = PointTypeParameter(
            parameter_number=7,
            parameter_name='Cumulative On Time',
            parameter_desc='Number of seconds the Status (parameter #3) is in the ON state. Value rolls over once it reaches the maximum range.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0- 1,000,000'
        )
        """
        Number of seconds the Status (parameter #3) is in the ON state. Value rolls over once it reaches the maximum range.
        """

        CUMULATIVE_OFF_TIME = PointTypeParameter(
            parameter_number=8,
            parameter_name='Cumulative Off Time',
            parameter_desc='Number of seconds the Status (parameter #3) is in the OFF state. Value rolls over once it reaches the maximum range.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0-> 1,000,000'
        )
        """
        Number of seconds the Status (parameter #3) is in the OFF state. Value rolls over once it reaches the maximum range.
        """

        ALARMING = PointTypeParameter(
            parameter_number=9,
            parameter_name='Alarming',
            parameter_desc='If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=10,
            parameter_name='SRBX on Clear',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).
        """

        SRBX_ON_SET = PointTypeParameter(
            parameter_number=11,
            parameter_name='SRBX on Set',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).
        """

        ALARM_CODE = PointTypeParameterBinary(
            parameter_number=12,
            parameter_name='Alarm Code',
            parameter_desc='Alarm Code',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Status On Alarm',
                    bit_desc='If set, the Status (parameter #3) is ON. If clear, the Status (parameter #3) is OFF.'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Scanning Disabled Alarm',
                    bit_desc='If set, the Scanning (parameter #1) has been disabled. If clear, the Scanning (parameter #1) has been enabled.'
                )
            ]
        )
        """
        Alarm Code
        """

        SCAN_PERIOD = PointTypeParameter(
            parameter_number=13,
            parameter_name='Scan Period',
            parameter_desc='Scan period in seconds',
            data_type=dt.FL,
            access='R/W',
            value_range='0.004->43,200.0'
        )
        """
        Scan period in seconds
        """

        ACTUAL_SCAN_TIME = PointTypeParameter(
            parameter_number=14,
            parameter_name='Actual Scan Time',
            parameter_desc='Actual number of seconds between updates of the DI.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0 43,200.0'
        )
        """
        Actual number of seconds between updates of the DI.
        """

        PHYSICAL_STATUS = PointTypeParameter(
            parameter_number=15,
            parameter_name='Physical Status',
            parameter_desc='Indicates the hardwares current state. Valid values are 0 (OFF) and 1 (ON).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-> 1'
        )
        """
        Indicates the hardwares current state. Valid values are 0 (OFF) and 1 (ON).
        """





class DISCRETE_OUTPUTS(PointType):
    """Discrete Outputs"""

    point_type_number: int = 102
    """Point Type ID"""

    point_type_desc: str = 'Discrete Outputs'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Identification name for specific DO. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Identification name for specific DO. Values must be printable ASCII characters.
        """

        UNITS_TAG = PointTypeParameter(
            parameter_number=1,
            parameter_name='Units Tag',
            parameter_desc='Describes the units used by the DO. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Describes the units used by the DO. Values must be printable ASCII characters.
        """

        SCANNING_MODE = PointTypeParameter(
            parameter_number=2,
            parameter_name='Scanning Mode',
            parameter_desc='If disabled, no changes to the output will occur. If in Manual, only the user can change the values of the DO. If in Automatic, anything can change the values of the DO. Valid values are: 0 = Disabled 1 = Automatic 2 = Manual',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        If disabled, no changes to the output will occur. If in Manual, only the user can change the values of the DO. If in Automatic, anything can change the values
        of the DO. Valid values are: 0 = Disabled 1 = Automatic 2 = Manual
        """

        ALARMING = PointTypeParameter(
            parameter_number=3,
            parameter_name='Alarming',
            parameter_desc='If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=4,
            parameter_name='SRBX on Clear',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).
        """

        SRBX_ON_SET = PointTypeParameter(
            parameter_number=5,
            parameter_name='SRBX on Set',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).
        """

        ALARM_CODE = PointTypeParameterBinary(
            parameter_number=6,
            parameter_name='Alarm Code',
            parameter_desc='Alarm Code',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Scanning Manual Alarm',
                    bit_desc='If set, the Scanning (parameter #2) has been set to Manual. If clear, the Scanning (parameter #2) has been set to either Disable or Automatic'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Scanning Disabled Alarm',
                    bit_desc='If set, the Scanning (parameter #2) has been disabled. If clear, the Scanning (parameter #2) has been set to either Automatic or Manual.'
                )
            ]
        )
        """
        Alarm Code
        """

        FAILSAFE_ON_RESET = PointTypeParameter(
            parameter_number=7,
            parameter_name='Failsafe on Reset',
            parameter_desc='If enabled, the Status (parameter #8) will be set to the status indicated in Failsafe Status Value (Parameter #22) on a restart of any kind. If disabled, the last Status before the restart will be used. Valid values are 0 (Output Last Status on Reset) and 1 (Use Failsafe value on Reset).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, the Status (parameter #8) will be set to the status indicated in Failsafe Status Value (Parameter #22) on a restart of any kind. If disabled, the
        last Status before the restart will be used. Valid values are 0 (Output Last Status on Reset) and 1 (Use Failsafe value on Reset).
        """

        AUTO_OUTPUT = PointTypeParameter(
            parameter_number=8,
            parameter_name='Auto Output',
            parameter_desc='Controls the state of the DO when Scanning (parameter #2) is in auto mode. In other words, the physical output gets this status when the mode (parameter # 2) is set to Automatic.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Controls the state of the DO when Scanning (parameter #2) is in auto mode. In other words, the physical output gets this status when the mode (parameter # 2) is
        set to Automatic.
        """

        ACCUMULATED_VALUE = PointTypeParameter(
            parameter_number=9,
            parameter_name='Accumulated Value',
            parameter_desc='Number of times the Status (parameter #8) goes from OFF to ON.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0-4,294,967,295'
        )
        """
        Number of times the Status (parameter #8) goes from OFF to ON.
        """

        MOMENTARY_MODE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Momentary Mode',
            parameter_desc='If enabled, the Status (parameter #8) will be turned ON for the entered Time On (parameter #14) and then be turned OFF. Valid values are 0 (Momentary Disabled) and 1 (Momentary Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, the Status (parameter #8) will be turned ON for the entered Time On (parameter #14) and then be turned OFF. Valid values are 0 (Momentary Disabled)
        and 1 (Momentary Enabled).
        """

        MOMENTARY_ACTIVE = PointTypeParameter(
            parameter_number=11,
            parameter_name='Momentary Active',
            parameter_desc='Indicates that the DO currently has the Momentary ability active. Valid values are 0 (Momentary Not Active) and 1 ( Momentary Active).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Indicates that the DO currently has the Momentary ability active. Valid values are 0 (Momentary Not Active) and 1 ( Momentary Active).
        """

        TOGGLE_MODE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Toggle Mode',
            parameter_desc='If enabled, the Status (parameter #8) will be turned ON for the entered Time On (parameter #14) and then turned OFF for the same Time On. The Status will continue to cycle between the ON and OFF states. Valid values are 0 (Toggle Disabled) and 1 (Toggle Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, the Status (parameter #8) will be turned ON for the entered Time On (parameter #14) and then turned OFF for the same Time On. The Status will
        continue to cycle between the ON and OFF states. Valid values are 0 (Toggle Disabled) and 1 (Toggle Enabled).
        """

        TIMED_DISCRETE_OUTPUT_TDO_MODE = PointTypeParameter(
            parameter_number=13,
            parameter_name='Timed Discrete Output (TDO) Mode',
            parameter_desc='If enabled, the Status (parameter #8) will be turned ON for a calculated Time On (parameter #14) based upon the entered EU Value (parameter #20). After the Time On has expired, the Status will be turned OFF and remain that way until a new EU Value is entered. Valid values are 0 (TDO Disabled) and 1 (TDO Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, the Status (parameter #8) will be turned ON for a calculated Time On (parameter #14) based upon the entered EU Value (parameter #20). After the Time
        On has expired, the Status will be turned OFF and remain that way until a new EU Value is entered. Valid values are 0 (TDO Disabled) and 1 (TDO Enabled).
        """

        TIME_ON = PointTypeParameter(
            parameter_number=14,
            parameter_name='Time On',
            parameter_desc='Number of seconds the Status (parameter #8) will be turned ON for if in TDO, Toggle, or Momentary Mode.',
            data_type=dt.FL,
            access='R/W',
            value_range='DO: 0.002 43,200.0 DOR: 0.05- 43,200.0'
        )
        """
        Number of seconds the Status (parameter #8) will be turned ON for if in TDO, Toggle, or Momentary Mode.
        """

        CYCLE_TIME = PointTypeParameter(
            parameter_number=15,
            parameter_name='Cycle Time',
            parameter_desc='Number of seconds for when TDO Mode (parameter #13) and Toggle Mode (parameter #12) are selected. The Status (parameter #8) will be ON for the calculated Time On (parameter #14) based upon the entered EU Value (parameter #20). The Status will then be turned OFF based upon the Cycle Time minus the Time On.',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0 43,200.0'
        )
        """
        Number of seconds for when TDO Mode (parameter #13) and Toggle Mode (parameter #12) are selected. The Status (parameter #8) will be ON for the calculated Time
        On (parameter #14) based upon the entered EU Value (parameter #20). The Status will then be turned OFF based upon the Cycle Time minus the Time On.
        """

        LOW_READING_TIME = PointTypeParameter(
            parameter_number=16,
            parameter_name='Low Reading Time',
            parameter_desc='Minimum number of seconds the calculated Time On (parameter #14) will be when the entered EU Value (parameter #20) is less than or equal to the entered Low Reading EU (parameter #18).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 43,200.0'
        )
        """
        Minimum number of seconds the calculated Time On (parameter #14) will be when the entered EU Value (parameter #20) is less than or equal to the entered Low
        Reading EU (parameter #18).
        """

        HIGH_READING_TIME = PointTypeParameter(
            parameter_number=17,
            parameter_name='High Reading Time',
            parameter_desc='Maximum number of seconds the calculated Time On (parameter #14) will be when the entered EU Value (parameter #20) is greater than or equal to the entered High Reading EU (parameter #19).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 43,200.0'
        )
        """
        Maximum number of seconds the calculated Time On (parameter #14) will be when the entered EU Value (parameter #20) is greater than or equal to the entered High
        Reading EU (parameter #19).
        """

        LOW_READING_EU = PointTypeParameter(
            parameter_number=18,
            parameter_name='Low Reading EU',
            parameter_desc='Minimum EU Value (parameter #20) possible.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum EU Value (parameter #20) possible.
        """

        HIGH_READING_EU = PointTypeParameter(
            parameter_number=19,
            parameter_name='High Reading EU',
            parameter_desc='Maximum EU Value (parameter #20) possible.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum EU Value (parameter #20) possible.
        """

        EU_VALUE = PointTypeParameter(
            parameter_number=20,
            parameter_name='EU Value',
            parameter_desc='Value in Engineering Units.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value in Engineering Units.
        """

        MANUAL_OUTPUT = PointTypeParameter(
            parameter_number=21,
            parameter_name='Manual Output',
            parameter_desc='Controls the state of the DO when Scanning (parameter #2) is in manual mode. In other words, the physical output gets this status when the mode (parameter # 2) is set to Manual.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Controls the state of the DO when Scanning (parameter #2) is in manual mode. In other words, the physical output gets this status when the mode (parameter # 2)
        is set to Manual.
        """

        FAILSAFE_OUTPUT = PointTypeParameter(
            parameter_number=22,
            parameter_name='Failsafe Output',
            parameter_desc='The state the output will be placed in when the unit is started and the Failsafe on Reset Parameter (Parameter 7) is set to 1, Use Failsafe value on reset.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        The state the output will be placed in when the unit is started and the Failsafe on Reset Parameter (Parameter 7) is set to 1, Use Failsafe value on reset.
        """

        MAX_SCAN_PERIOD = PointTypeParameter(
            parameter_number=23,
            parameter_name='Max Scan Period',
            parameter_desc='How often (in seconds) the system rewrites to the DOs (in seconds).',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        How often (in seconds) the system rewrites to the DOs (in seconds).
        """

        PHYSICAL_OUTPUT = PointTypeParameter(
            parameter_number=24,
            parameter_name='Physical Output',
            parameter_desc='Indicates the DOs current state. Valid values are 0 (OFF) and 1 (ON).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Indicates the DOs current state. Valid values are 0 (OFF) and 1 (ON).
        """

        DO_TYPER = PointTypeParameter(
            parameter_number=25,
            parameter_name='DO Typer',
            parameter_desc='Indicates the type of DO (relay or solid state). Valid values are: 0 = DO Relay 1 = DO Solid State 3 = DO Relay 6 Point',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Indicates the type of DO (relay or solid state). Valid values are: 0 = DO Relay 1 = DO Solid State 3 = DO Relay 6 Point
        """

        INVERT_OUTPUT_MODE = PointTypeParameter(
            parameter_number=26,
            parameter_name='Invert Output Mode',
            parameter_desc='Inverts the output of the ACIO channel. This allows you to use TDO mode to keep a channel OFF for a set amount of time and then bring this channel back ON. Valid values are 0 (Normal) and 1 (Inverted). Note: This always inverts the output, including the Failsafe Output.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Inverts the output of the ACIO channel. This allows you to use TDO mode to keep a channel OFF for a set amount of time and then bring this channel back ON.
        Valid values are 0 (Normal) and 1 (Inverted). Note: This always inverts the output, including the Failsafe Output.
        """





class ANALOG_INPUTS(PointType):
    """Analog Inputs"""

    point_type_number: int = 103
    """Point Type ID"""

    point_type_desc: str = 'Analog Inputs'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Identification name for specific AI. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Identification name for specific AI. Values must be printable ASCII characters.
        """

        UNITS_TAG = PointTypeParameter(
            parameter_number=1,
            parameter_name='Units Tag',
            parameter_desc='Describes the units used by the Al. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Describes the units used by the Al. Values must be printable ASCII characters.
        """

        SCANNING = PointTypeParameter(
            parameter_number=2,
            parameter_name='Scanning',
            parameter_desc='If disabled, field inputs are ignored and no changes will occur unless manually entered. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If disabled, field inputs are ignored and no changes will occur unless manually entered. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        SCAN_PERIOD = PointTypeParameter(
            parameter_number=3,
            parameter_name='Scan Period',
            parameter_desc='Number of seconds between updates of the Al.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.05 43,200.0'
        )
        """
        Number of seconds between updates of the Al.
        """

        ACTUAL_SCAN_TIME = PointTypeParameter(
            parameter_number=4,
            parameter_name='Actual Scan Time',
            parameter_desc='Actual number of seconds between updates of the AI.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0 43,200.0'
        )
        """
        Actual number of seconds between updates of the AI.
        """

        FILTER = PointTypeParameter(
            parameter_number=5,
            parameter_name='Filter',
            parameter_desc='Percentage of last raw A/D reading to be weighted with the new raw A/D reading.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-99'
        )
        """
        Percentage of last raw A/D reading to be weighted with the new raw A/D reading.
        """

        AVERAGING = PointTypeParameter(
            parameter_number=6,
            parameter_name='Averaging',
            parameter_desc='If enabled, the filtered raw A/D value is averaged over the Scan Period. If disabled, the current filtered raw A/D value is used when the Scan Period is reached. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, the filtered raw A/D value is averaged over the Scan Period. If disabled, the current filtered raw A/D value is used when the Scan Period is
        reached. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        RAW_A_D_INPUT = PointTypeParameter(
            parameter_number=7,
            parameter_name='Raw A/D Input',
            parameter_desc='Raw A/D reading used to calculate the EU Value (parameter #21).',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0-65,535'
        )
        """
        Raw A/D reading used to calculate the EU Value (parameter #21).
        """

        ZERO_RAW = PointTypeParameter(
            parameter_number=8,
            parameter_name='Zero Raw',
            parameter_desc='Lowest calibrated raw A/D input.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 -> 65,535'
        )
        """
        Lowest calibrated raw A/D input.
        """

        MID_POINT_RAW_1 = PointTypeParameter(
            parameter_number=9,
            parameter_name='Mid Point Raw #1',
            parameter_desc='Second lowest calibrated raw A/D input.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-65,535'
        )
        """
        Second lowest calibrated raw A/D input.
        """

        MID_POINT_RAW_2 = PointTypeParameter(
            parameter_number=10,
            parameter_name='Mid Point Raw #2',
            parameter_desc='Third lowest or highest calibrated raw A/D input.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-65,535'
        )
        """
        Third lowest or highest calibrated raw A/D input.
        """

        MID_POINT_RAW_3 = PointTypeParameter(
            parameter_number=11,
            parameter_name='Mid Point Raw #3',
            parameter_desc='Second highest calibrated raw A/D input.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 -> 65,535'
        )
        """
        Second highest calibrated raw A/D input.
        """

        SPAN_RAW = PointTypeParameter(
            parameter_number=12,
            parameter_name='Span Raw',
            parameter_desc='Highest calibrated raw A/D input.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-65,535'
        )
        """
        Highest calibrated raw A/D input.
        """

        ZERO_EU = PointTypeParameter(
            parameter_number=13,
            parameter_name='Zero EU',
            parameter_desc='Lowest calibrated EU value.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Lowest calibrated EU value.
        """

        MID_POINT_EU_1 = PointTypeParameter(
            parameter_number=14,
            parameter_name='Mid Point EU #1',
            parameter_desc='Second lowest calibrated EU value.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Second lowest calibrated EU value.
        """

        MID_POINT_EU_2 = PointTypeParameter(
            parameter_number=15,
            parameter_name='Mid Point EU #2',
            parameter_desc='Third lowest or highest calibrated EU value.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Third lowest or highest calibrated EU value.
        """

        MID_POINT_EU_3 = PointTypeParameter(
            parameter_number=16,
            parameter_name='Mid Point EU #3',
            parameter_desc='Second highest calibrated EU value.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Second highest calibrated EU value.
        """

        SPAN_EU = PointTypeParameter(
            parameter_number=17,
            parameter_name='Span EU',
            parameter_desc='Highest calibrated EU value. When this parameter changes, parameters 14, 15, and 16 are set equal to this value.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Highest calibrated EU value. When this parameter changes, parameters 14, 15, and 16 are set equal to this value.
        """

        OFFSET_ZERO_SHIFT_ = PointTypeParameter(
            parameter_number=18,
            parameter_name='Offset (Zero Shift)',
            parameter_desc='Value to be added to all calculated EU values.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value to be added to all calculated EU values.
        """

        SET_VALUE = PointTypeParameter(
            parameter_number=19,
            parameter_name='Set Value',
            parameter_desc='Desired EU value for a calibration point. Note: No event is logged for this parameter. and should possibly labeled as R/O in any external ROC Plus Protocol Specification',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Desired EU value for a calibration point. Note: No event is logged for this parameter. and should possibly labeled as R/O in any external ROC Plus Protocol
        Specification
        """

        MANUAL_VALUE = PointTypeParameter(
            parameter_number=20,
            parameter_name='Manual Value',
            parameter_desc='Current EU value of AI while performing calibration.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current EU value of AI while performing calibration.
        """

        EU_VALUE = PointTypeParameter(
            parameter_number=21,
            parameter_name='EU Value',
            parameter_desc='Value in Engineering Units.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value in Engineering Units.
        """

        CLIPPING = PointTypeParameter(
            parameter_number=22,
            parameter_name='Clipping',
            parameter_desc='If enabled, then the EU Value (parameter #21) cannot be less than the Low Low Alarm EU (parameter #23) or greater than the High High Alarm EU (parameter #26). Valid values are 0 (Disabled, no limiting of the EU value, Parameter 21, occurs) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, then the EU Value (parameter #21) cannot be less than the Low Low Alarm EU (parameter #23) or greater than the High High Alarm EU (parameter #26).
        Valid values are 0 (Disabled, no limiting of the EU value, Parameter 21, occurs) and 1 (Enabled).
        """

        LOW_LOW_ALARM_EU = PointTypeParameter(
            parameter_number=23,
            parameter_name='Low Low Alarm EU',
            parameter_desc='Alarm value for Low Low Alarm and minimum EU Value (parameter #21) if clipping (parameter #22) is enabled.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Low Low Alarm and minimum EU Value (parameter #21) if clipping (parameter #22) is enabled.
        """

        LOW_ALARM_EU = PointTypeParameter(
            parameter_number=24,
            parameter_name='Low Alarm EU',
            parameter_desc='Alarm value for Low Alarm.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Low Alarm.
        """

        HIGH_ALARM_EU = PointTypeParameter(
            parameter_number=25,
            parameter_name='High Alarm EU',
            parameter_desc='Alarm value for High Alarm.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for High Alarm.
        """

        HIGH_HIGH_ALARM_EU = PointTypeParameter(
            parameter_number=26,
            parameter_name='High High Alarm EU',
            parameter_desc='Alarm value for High High Alarm and maximum EU Value (parameter #21) if clipping (parameter #22) is enabled.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for High High Alarm and maximum EU Value (parameter #21) if clipping (parameter #22) is enabled.
        """

        RATE_ALARM_EU = PointTypeParameter(
            parameter_number=27,
            parameter_name='Rate Alarm EU',
            parameter_desc='Alarm value for maximum change of EU Value (parameter #21) between Scan Periods.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for maximum change of EU Value (parameter #21) between Scan Periods.
        """

        ALARM_DEADBAND = PointTypeParameter(
            parameter_number=28,
            parameter_name='Alarm Deadband',
            parameter_desc='Provides a range (+) that the EU Value (parameter #21) may move between without causing another alarm.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Provides a range (+) that the EU Value (parameter #21) may move between without causing another alarm.
        """

        ALARMING = PointTypeParameter(
            parameter_number=29,
            parameter_name='Alarming',
            parameter_desc='If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=30,
            parameter_name='SRBX on Clear',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).
        """

        SRBX_ON_SET = PointTypeParameter(
            parameter_number=31,
            parameter_name='SRBX on Set',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).
        """

        ALARM_CODE = PointTypeParameterBinary(
            parameter_number=32,
            parameter_name='Alarm Code',
            parameter_desc='Alarm Code',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Low Alarm',
                    bit_desc='If set, the EU Value (parameter #21) is less than or equal to the Low Alarm EU (parameter #24). If clear, the EU Value (parameter #21) is greater than the Low Alarm EU (parameter #24).'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Low Low Alarm',
                    bit_desc='If set, the EU Value (parameter #21) is less than or equal to the Low Low Alarm EU (parameter #23). If clear, the EU Value (parameter #21) is greater than the Low Low Alarm EU (parameter #23).'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='High Alarm',
                    bit_desc='If set, the EU Value (parameter #21) is greater than or equal to the High Alarm EU (parameter #25). If clear, the EU Value (parameter #21) is less than the High Alarm EU (parameter #25).'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='High High Alarm',
                    bit_desc='If set, the EU Value (parameter #21) is greater than or equal to the High High Alarm EU (parameter #26). If clear, the EU Value (parameter #21) is less than the High High Alarm EU (parameter #26).'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Rate Alarm',
                    bit_desc='If set, the EU Value (parameter #21) change from last Scan Period to the new Scan Period is greater than or equal to the Rate Alarm EU (parameter #27). If clear, the EU Value (parameter #21) change from last Scan Period to the new Scan Period is less than the Rate Alarm EU (parameter #27).'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Not Used',
                    bit_desc='Not used'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Point Fail Alarm',
                    bit_desc='If set, the Als hardware is reporting a malfunction. If clear, the Als hardware is operating properly.'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Scanning Disabled Alarm',
                    bit_desc='If set, the Scanning (parameter #2) has been disabled. If clear, the Scanning (parameter #2) has been enabled.'
                )
            ]
        )
        """
        Alarm Code
        """

        CALIBRATION_TIMER = PointTypeParameter(
            parameter_number=33,
            parameter_name='Calibration Timer',
            parameter_desc='Number of seconds until a calibration timeout occurs.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0 -> 3,600.0'
        )
        """
        Number of seconds until a calibration timeout occurs.
        """

        CALIBRATION_MODE = PointTypeParameter(
            parameter_number=34,
            parameter_name='Calibration Mode',
            parameter_desc='Indicates what the calibration for the AI is doing. Valid values are: 0 = Use Current Calibration 1 = Start Calibration 2 = Calibrate 3 = Restore Previous Calibration 4 = Stop Calibration. Note: No event is logged for this parameter. and should possibly labeled as R/O in any external ROC Plus Protocol Specification',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 -> 4'
        )
        """
        Indicates what the calibration for the AI is doing. Valid values are: 0 = Use Current Calibration 1 = Start Calibration 2 = Calibrate 3 = Restore Previous
        Calibration 4 = Stop Calibration. Note: No event is logged for this parameter. and should possibly labeled as R/O in any external ROC Plus Protocol
        Specification
        """

        CALIBRATION_TYPE = PointTypeParameter(
            parameter_number=35,
            parameter_name='Calibration Type',
            parameter_desc='During calibration, determines what value the Set Value (parameter #19) replaces. Valid values are: 0 = Nothing 1 = Set Zero 2 = Set Span 3 = Set Mid Point #1 4 = Set Mid Point #2 5 = Set Mid Point #3 6 = Set Offset (Zero Shift). Note: No event is logged for this parameter. and should possibly labeled as R/O in any external ROC Plus Protocol Specification',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-6'
        )
        """
        During calibration, determines what value the Set Value (parameter #19) replaces. Valid values are: 0 = Nothing 1 = Set Zero 2 = Set Span 3 = Set Mid Point #1 4
        = Set Mid Point #2 5 = Set Mid Point #3 6 = Set Offset (Zero Shift). Note: No event is logged for this parameter. and should possibly labeled as R/O in any
        external ROC Plus Protocol Specification
        """

        FAILSAFE_MODE = PointTypeParameter(
            parameter_number=36,
            parameter_name='Failsafe Mode',
            parameter_desc='Valid values are 0 (Disabled) and 1 (Enabled, the EU Value is set to the Failsafe value in the event of a point fail).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Valid values are 0 (Disabled) and 1 (Enabled, the EU Value is set to the Failsafe value in the event of a point fail).
        """

        FAILSAFE_VALUE = PointTypeParameter(
            parameter_number=37,
            parameter_name='Failsafe Value',
            parameter_desc='The Als EU Value is set to the Failsafe Value if Failsafe Mode is Enabled and the AI is in Point Fail.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        The Als EU Value is set to the Failsafe Value if Failsafe Mode is Enabled and the AI is in Point Fail.
        """

        AI_TYPE = PointTypeParameter(
            parameter_number=38,
            parameter_name='AI Type',
            parameter_desc='Indicates the type of AI module (12 or 16 bit). Valid values are 0 (AI 12 Bit) and 1 (AI 16 Bit).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Indicates the type of AI module (12 or 16 bit). Valid values are 0 (AI 12 Bit) and 1 (AI 16 Bit).
        """

        EQUIVALENT_MILLIAMP_VALUE = PointTypeParameter(
            parameter_number=39,
            parameter_name='Equivalent Milliamp Value',
            parameter_desc='Output of module scaled to a 4 to 20 value to be equivalent to milliamps.',
            data_type=dt.FL,
            access='R/O',
            value_range='4-20'
        )
        """
        Output of module scaled to a 4 to 20 value to be equivalent to milliamps.
        """





class ANALOG_OUTPUTS(PointType):
    """Analog Outputs"""

    point_type_number: int = 104
    """Point Type ID"""

    point_type_desc: str = 'Analog Outputs'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Identification name for specific AO. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Identification name for specific AO. Values must be printable ASCII characters.
        """

        UNITS_TAG = PointTypeParameter(
            parameter_number=1,
            parameter_name='Units Tag',
            parameter_desc='Describes the units used by the AO. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Describes the units used by the AO. Values must be printable ASCII characters.
        """

        SCANNING_MODE = PointTypeParameter(
            parameter_number=2,
            parameter_name='Scanning Mode',
            parameter_desc='If disabled, no changes to the output will occur. If in Manual, only the user can change the values of the AO. If in Automatic, anything can change the values of the AO. Valid values are: 0 = Disabled 1 = Automatic 2 = Manual',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        If disabled, no changes to the output will occur. If in Manual, only the user can change the values of the AO. If in Automatic, anything can change the values
        of the AO. Valid values are: 0 = Disabled 1 = Automatic 2 = Manual
        """

        ALARMING = PointTypeParameter(
            parameter_number=3,
            parameter_name='Alarming',
            parameter_desc='If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=4,
            parameter_name='SRBX on Clear',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).
        """

        SRBX_ON_SET = PointTypeParameter(
            parameter_number=5,
            parameter_name='SRBX on Set',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).
        """

        ALARM_CODE = PointTypeParameterBinary(
            parameter_number=6,
            parameter_name='Alarm Code',
            parameter_desc='Alarm Code',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Scanning Manual Alarm',
                    bit_desc='If set, the Scanning (parameter #2) has been set to Manual. If clear, the Scanning (parameter #2) has been set to either Disable or Automatic'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Point Fail Alarm',
                    bit_desc='If set, the AOs hardware is reporting a malfunction. If clear, the AOs hardware is operating properly.'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Scanning Disabled Alarm',
                    bit_desc='If set, the Scanning (parameter #2) has been disabled. If clear, the Scanning (parameter #2) has been set to Manual or Automatic.'
                )
            ]
        )
        """
        Alarm Code
        """

        FAILSAFE_ON_RESET = PointTypeParameter(
            parameter_number=7,
            parameter_name='Failsafe on Reset',
            parameter_desc='If enabled, the Raw D/A Output (parameter #13) will be set to the Failsafe value (parameter #22) on a restart of any kind. If disabled, the last EU Value (parameter #13) or the last saved EU Value will be used to determine the Raw D/A Output (parameter #13) after a restart. Valid values are 0 (Use last EU Value on reset) and 1 (Use Failsafe value on reset).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, the Raw D/A Output (parameter #13) will be set to the Failsafe value (parameter #22) on a restart of any kind. If disabled, the last EU Value
        (parameter #13) or the last saved EU Value will be used to determine the Raw D/A Output (parameter #13) after a restart. Valid values are 0 (Use last EU Value
        on reset) and 1 (Use Failsafe value on reset).
        """

        ZERO_RAW = PointTypeParameter(
            parameter_number=8,
            parameter_name='Zero Raw',
            parameter_desc='Minimum D/A count the calculated Raw D/A Output (parameter #13) will be when the entered EU Value (parameter #12) is less than or equal to the entered Zero EU (parameter #10).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-65,535'
        )
        """
        Minimum D/A count the calculated Raw D/A Output (parameter #13) will be when the entered EU Value (parameter #12) is less than or equal to the entered Zero EU
        (parameter #10).
        """

        SPAN_RAW = PointTypeParameter(
            parameter_number=9,
            parameter_name='Span Raw',
            parameter_desc='Maximum D/A count the calculated Raw D/A Output (parameter #13) will be when the entered EU Value (parameter #12) is greater than or equal to the entered Span EU (parameter #11).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-65,535'
        )
        """
        Maximum D/A count the calculated Raw D/A Output (parameter #13) will be when the entered EU Value (parameter #12) is greater than or equal to the entered Span
        EU (parameter #11).
        """

        ZERO_EU = PointTypeParameter(
            parameter_number=10,
            parameter_name='Zero EU',
            parameter_desc='Minimum EU Value (parameter #12) possible.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum EU Value (parameter #12) possible.
        """

        SPAN_EU = PointTypeParameter(
            parameter_number=11,
            parameter_name='Span EU',
            parameter_desc='Maximum EU Value (parameter #12) possible.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum EU Value (parameter #12) possible.
        """

        AUTO_VALUE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Auto Value',
            parameter_desc='Controls the output when Scanning (parameter #2) is in auto mode.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Controls the output when Scanning (parameter #2) is in auto mode.
        """

        RAW_D_A_OUTPUT = PointTypeParameter(
            parameter_number=13,
            parameter_name='Raw D/A Output',
            parameter_desc='Calculated Digital-to-Analog value based upon EU Value (parameter #12).',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0-65,535'
        )
        """
        Calculated Digital-to-Analog value based upon EU Value (parameter #12).
        """

        MANUAL_VALUE = PointTypeParameter(
            parameter_number=14,
            parameter_name='Manual Value',
            parameter_desc='Controls the output when Scanning (parameter #2) is in manual mode.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Controls the output when Scanning (parameter #2) is in manual mode.
        """

        FAILSAFE_VALUE = PointTypeParameter(
            parameter_number=15,
            parameter_name='Failsafe Value',
            parameter_desc='This is the value that will be outputted when the unit is started and the Failsafe on Reset Parameter (Parameter 7) is set to 1, Use Failsafe value on reset.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        This is the value that will be outputted when the unit is started and the Failsafe on Reset Parameter (Parameter 7) is set to 1, Use Failsafe value on reset.
        """

        PHYSICAL_VALUE = PointTypeParameter(
            parameter_number=16,
            parameter_name='Physical Value',
            parameter_desc='Indicates the current value of the output in Engineering Units.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Indicates the current value of the output in Engineering Units.
        """





class PULSE_INPUTS(PointType):
    """Pulse Inputs"""

    point_type_number: int = 105
    """Point Type ID"""

    point_type_desc: str = 'Pulse Inputs'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Identification name for specific PI. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Identification name for specific PI. Values must be printable ASCII characters.
        """

        UNITS_TAG = PointTypeParameter(
            parameter_number=1,
            parameter_name='Units Tag',
            parameter_desc='Describes the units used by the PI. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Describes the units used by the PI. Values must be printable ASCII characters.
        """

        SCANNING = PointTypeParameter(
            parameter_number=2,
            parameter_name='Scanning',
            parameter_desc='If disabled, field inputs are ignored and no changes will occur unless manually entered. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If disabled, field inputs are ignored and no changes will occur unless manually entered. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        SCAN_PERIOD = PointTypeParameter(
            parameter_number=3,
            parameter_name='Scan Period',
            parameter_desc='Number of seconds between updates of the PI.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.05 43,200.0'
        )
        """
        Number of seconds between updates of the PI.
        """

        ACCUMULATED_VALUE = PointTypeParameter(
            parameter_number=4,
            parameter_name='Accumulated Value',
            parameter_desc='Total number of pulses that the PI has received.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='>16,000,000'
        )
        """
        Total number of pulses that the PI has received.
        """

        CONTRACT_HOUR = PointTypeParameter(
            parameter_number=5,
            parameter_name='Contract Hour',
            parameter_desc='Hour, in military time, that represents the end of the day for the PI.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-23'
        )
        """
        Hour, in military time, that represents the end of the day for the PI.
        """

        PULSES_FOR_DAY = PointTypeParameter(
            parameter_number=6,
            parameter_name='Pulses for Day',
            parameter_desc='Total number of pulses that the PI has received for the contract day.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-4,294,967,295'
        )
        """
        Total number of pulses that the PI has received for the contract day.
        """

        CURRENT_RATE_PERIOD = PointTypeParameter(
            parameter_number=7,
            parameter_name='Current Rate Period',
            parameter_desc='Used to determine the calculation of the Current Rate (parameter #10): Valid values are: 0 = EU/second 1 = EU/minute 2 = EU/hour 3 = EU/day.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-3'
        )
        """
        Used to determine the calculation of the Current Rate (parameter #10): Valid values are: 0 = EU/second 1 = EU/minute 2 = EU/hour 3 = EU/day.
        """

        CONVERSION = PointTypeParameter(
            parameter_number=8,
            parameter_name='Conversion',
            parameter_desc='Determines if Conversion Value (parameter #9) will be multiplied or divided by the accumulated pulses to determine the units for the Current Rate (parameter #10). Valid values are 0 (EUs/pulse) and 1 (pulses/EU).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Determines if Conversion Value (parameter #9) will be multiplied or divided by the accumulated pulses to determine the units for the Current Rate (parameter
        #10). Valid values are 0 (EUs/pulse) and 1 (pulses/EU).
        """

        CONVERSION_VALUE = PointTypeParameter(
            parameter_number=9,
            parameter_name='Conversion Value',
            parameter_desc='Used to calculate the units of the Current Rate (parameter #10).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float, except 0.0'
        )
        """
        Used to calculate the units of the Current Rate (parameter #10).
        """

        CURRENT_RATE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Current Rate',
            parameter_desc='Calculated rate of the pulses.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Calculated rate of the pulses.
        """

        EU_VALUE_MODE = PointTypeParameter(
            parameter_number=11,
            parameter_name='EU Value Mode',
            parameter_desc='Used to determine what the EU Value (parameter #13) represents. Valid values are: 0 = Rate 1 = Accumulator with Maximum Rollover 2 = Accumulator with Entered Rollover.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        Used to determine what the EU Value (parameter #13) represents. Valid values are: 0 = Rate 1 = Accumulator with Maximum Rollover 2 = Accumulator with Entered
        Rollover.
        """

        ROLLOVER_MAXIMUM = PointTypeParameter(
            parameter_number=12,
            parameter_name='Rollover Maximum',
            parameter_desc='This is the Entered Rollover Maximum for the EU Value Mode (parameter #11) when it is setup for Accumulator with Entered Rollover.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        This is the Entered Rollover Maximum for the EU Value Mode (parameter #11) when it is setup for Accumulator with Entered Rollover.
        """

        EU_VALUE = PointTypeParameter(
            parameter_number=13,
            parameter_name='EU Value',
            parameter_desc='Value in Engineering Units.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value in Engineering Units.
        """

        LOW_LOW_ALARM_EU = PointTypeParameter(
            parameter_number=14,
            parameter_name='Low Low Alarm EU',
            parameter_desc='Alarm value for Low Low Alarm when the EU Value Mode (parameter #11) is setup for Rate.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Low Low Alarm when the EU Value Mode (parameter #11) is setup for Rate.
        """

        LOW_ALARM_EU = PointTypeParameter(
            parameter_number=15,
            parameter_name='Low Alarm EU',
            parameter_desc='Alarm value for Low Alarm when the EU Value Mode (parameter #11) is setup for Rate.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Low Alarm when the EU Value Mode (parameter #11) is setup for Rate.
        """

        HIGH_ALARM_EU = PointTypeParameter(
            parameter_number=16,
            parameter_name='High Alarm EU',
            parameter_desc='Alarm value for High Alarm when the EU Value Mode (parameter #11) is setup for Rate.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for High Alarm when the EU Value Mode (parameter #11) is setup for Rate.
        """

        HIGH_HIGH_ALARM_EU = PointTypeParameter(
            parameter_number=17,
            parameter_name='High High Alarm EU',
            parameter_desc='Alarm value for High High Alarm when the EU Value Mode (parameter #11) is setup for Rate.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for High High Alarm when the EU Value Mode (parameter #11) is setup for Rate.
        """

        RATE_ALARM_EU = PointTypeParameter(
            parameter_number=18,
            parameter_name='Rate Alarm EU',
            parameter_desc='Alarm value for maximum change of EU Value (parameter #13) between Scan Periods when the EU Value Mode (parameter #11) is setup for Rate.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for maximum change of EU Value (parameter #13) between Scan Periods when the EU Value Mode (parameter #11) is setup for Rate.
        """

        ALARM_DEADBAND = PointTypeParameter(
            parameter_number=19,
            parameter_name='Alarm Deadband',
            parameter_desc='Provides a range (+) that the EU Value (parameter #13) may move between without causing another alarm when the EU Value Mode (parameter #11) is setup for Rate.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Provides a range (+) that the EU Value (parameter #13) may move between without causing another alarm when the EU Value Mode (parameter #11) is setup for Rate.
        """

        ALARMING = PointTypeParameter(
            parameter_number=20,
            parameter_name='Alarming',
            parameter_desc='If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=21,
            parameter_name='SRBX on Clear',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled,) and 1 (SRBX on Clear Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled,) and 1 (SRBX on Clear Enabled).
        """

        SRBX_ON_SET = PointTypeParameter(
            parameter_number=22,
            parameter_name='SRBX on Set',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).
        """

        ALARM_CODE = PointTypeParameterBinary(
            parameter_number=23,
            parameter_name='Alarm Code',
            parameter_desc='Alarm Code',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Low Alarm',
                    bit_desc='If set, the EU Value (parameter #13) is less than or equal to the Low Alarm EU (parameter #15). If clear, the EU Value (parameter #13) is greater than the Low Alarm EU (parameter #15).'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Low Low Alarm',
                    bit_desc='If set, the EU Value (parameter #13) is less than or equal to the Low Low Alarm EU (parameter #14). If clear, the EU Value (parameter #13) is greater than the Low Low Alarm EU (parameter #14).'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='High Alarm',
                    bit_desc='If set, the EU Value (parameter #13) is greater than or equal to the High Alarm EU (parameter #16). If clear, the EU Value (parameter #13) is less than the High Alarm EU (parameter #16).'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='High High Alarm',
                    bit_desc='If set, the EU Value (parameter #13) is greater than or equal to the High High Alarm EU (parameter #17). If clear, the EU Value (parameter #13) is less than the High High Alarm EU (parameter #17).'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Rate Alarm',
                    bit_desc='If set, the EU Value (parameter #13) change from last Scan Period to the new Scan Period is greater than or equal to the Rate Alarm EU (parameter #18). If clear, the EU Value (parameter #13) change from last Scan Period to the new Scan Period is less than the Rate Alarm EU (parameter #18).'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Point Fail Alarm',
                    bit_desc='If set, the Pls hardware is reporting a malfunction. If clear, the Pls hardware is operating properly.'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Scanning Disabled Alarm',
                    bit_desc='If set, the Scanning (parameter #2) has been disabled. If clear, the Scanning (parameter #2) has been enabled.'
                )
            ]
        )
        """
        Alarm Code
        """

        TODAYS_TOTAL = PointTypeParameter(
            parameter_number=24,
            parameter_name='Todays Total',
            parameter_desc='Calculated value of the accumulated pulses for the contract day multiplied by the Conversion Value (parameter #9).',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Calculated value of the accumulated pulses for the contract day multiplied by the Conversion Value (parameter #9).
        """

        YESTERDAYS_TOTAL = PointTypeParameter(
            parameter_number=25,
            parameter_name='Yesterdays Total',
            parameter_desc='Previous contract days total.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Previous contract days total.
        """

        CORRECTED_PULSE_ACCUMULATION = PointTypeParameter(
            parameter_number=26,
            parameter_name='Corrected Pulse Accumulation',
            parameter_desc='Running accumulation of pulses multiplied by X, where X is either the Conversion Value (when Parameter 8 is set to EU/Pulse) or is set to 1/Conversion Value if Pulses/EU. Rolls over at 1,000,000.0',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Running accumulation of pulses multiplied by X, where X is either the Conversion Value (when Parameter 8 is set to EU/Pulse) or is set to 1/Conversion Value if
        Pulses/EU. Rolls over at 1,000,000.0
        """

        FREQUENCY = PointTypeParameter(
            parameter_number=27,
            parameter_name='Frequency',
            parameter_desc='Frequency of incoming pulses in pulses/second.',
            data_type=dt.FL,
            access='R/O',
            value_range='0 positive valid IEEE 754 float'
        )
        """
        Frequency of incoming pulses in pulses/second.
        """





class RTD(PointType):
    """RTD"""

    point_type_number: int = 106
    """Point Type ID"""

    point_type_desc: str = 'RTD'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Identification name for specific RTD. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Identification name for specific RTD. Values must be printable ASCII characters.
        """

        UNITS_TAG = PointTypeParameter(
            parameter_number=1,
            parameter_name='Units Tag',
            parameter_desc='Describes the units used by the RTD. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Describes the units used by the RTD. Values must be printable ASCII characters.
        """

        SCANNING = PointTypeParameter(
            parameter_number=2,
            parameter_name='Scanning',
            parameter_desc='If disabled, field inputs are ignored and no changes will occur unless manually entered. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If disabled, field inputs are ignored and no changes will occur unless manually entered. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        SCAN_PERIOD = PointTypeParameter(
            parameter_number=3,
            parameter_name='Scan Period',
            parameter_desc='Number of seconds between updates of the RTD.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.066 43,200.0'
        )
        """
        Number of seconds between updates of the RTD.
        """

        ACTUAL_SCAN_TIME = PointTypeParameter(
            parameter_number=4,
            parameter_name='Actual Scan Time',
            parameter_desc='Actual number of seconds between updates of the RTD.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.05 43,200.0'
        )
        """
        Actual number of seconds between updates of the RTD.
        """

        FILTER = PointTypeParameter(
            parameter_number=5,
            parameter_name='Filter',
            parameter_desc='Percentage of last raw A/D reading to be weighted with the new raw A/D reading.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-99'
        )
        """
        Percentage of last raw A/D reading to be weighted with the new raw A/D reading.
        """

        AVERAGING = PointTypeParameter(
            parameter_number=6,
            parameter_name='Averaging',
            parameter_desc='If enabled, the filtered raw A/D value is averaged over the Scan Period. If disabled, the current filtered raw A/D value is used when the Scan Period is reached. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, the filtered raw A/D value is averaged over the Scan Period. If disabled, the current filtered raw A/D value is used when the Scan Period is
        reached. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        ALPHA_OF_RTD = PointTypeParameter(
            parameter_number=7,
            parameter_name='Alpha of RTD',
            parameter_desc='Indicates what the alpha (a) of the RTD. Valid values are 0 (Alpha of 0.00385) and 1 (Alpha of 0.00392).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates what the alpha (a) of the RTD. Valid values are 0 (Alpha of 0.00385) and 1 (Alpha of 0.00392).
        """

        RAW_A_D_INPUT = PointTypeParameter(
            parameter_number=8,
            parameter_name='Raw A/D Input',
            parameter_desc='Raw A/D reading used to calculate the EU Value (parameter #22).',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 -> 65,535'
        )
        """
        Raw A/D reading used to calculate the EU Value (parameter #22).
        """

        ZERO_RAW = PointTypeParameter(
            parameter_number=9,
            parameter_name='Zero Raw',
            parameter_desc='Lowest calibrated raw A/D input.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0-65,535'
        )
        """
        Lowest calibrated raw A/D input.
        """

        MID_POINT_RAW_1 = PointTypeParameter(
            parameter_number=10,
            parameter_name='Mid Point Raw #1',
            parameter_desc='Second lowest calibrated raw A/D input.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0-65,535'
        )
        """
        Second lowest calibrated raw A/D input.
        """

        MID_POINT_RAW_2 = PointTypeParameter(
            parameter_number=11,
            parameter_name='Mid Point Raw #2',
            parameter_desc='Third lowest or highest calibrated raw A/D input.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 -> 65,535'
        )
        """
        Third lowest or highest calibrated raw A/D input.
        """

        MID_POINT_RAW_3 = PointTypeParameter(
            parameter_number=12,
            parameter_name='Mid Point Raw #3',
            parameter_desc='Second highest calibrated raw A/D input.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0-65,535'
        )
        """
        Second highest calibrated raw A/D input.
        """

        SPAN_RAW = PointTypeParameter(
            parameter_number=13,
            parameter_name='Span Raw',
            parameter_desc='Highest calibrated raw A/D input.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 -> 65,535'
        )
        """
        Highest calibrated raw A/D input.
        """

        ZERO_EU = PointTypeParameter(
            parameter_number=14,
            parameter_name='Zero EU',
            parameter_desc='Lowest calibrated EU value.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Lowest calibrated EU value.
        """

        MID_POINT_EU_1 = PointTypeParameter(
            parameter_number=15,
            parameter_name='Mid Point EU #1',
            parameter_desc='Second lowest calibrated EU value.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Second lowest calibrated EU value.
        """

        MID_POINT_EU_2 = PointTypeParameter(
            parameter_number=16,
            parameter_name='Mid Point EU #2',
            parameter_desc='Third lowest or highest calibrated EU value.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Third lowest or highest calibrated EU value.
        """

        MID_POINT_EU_3 = PointTypeParameter(
            parameter_number=17,
            parameter_name='Mid Point EU #3',
            parameter_desc='Second highest calibrated EU value.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Second highest calibrated EU value.
        """

        SPAN_EU = PointTypeParameter(
            parameter_number=18,
            parameter_name='Span EU',
            parameter_desc='Highest calibrated EU value.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Highest calibrated EU value.
        """

        OFFSET_ZERO_SHIFT_ = PointTypeParameter(
            parameter_number=19,
            parameter_name='Offset (Zero Shift)',
            parameter_desc='Value to be added to all calculated EU values.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value to be added to all calculated EU values.
        """

        SET_VALUE = PointTypeParameter(
            parameter_number=20,
            parameter_name='Set Value',
            parameter_desc='Desired EU value for a calibration point. Note: No event is logged for this parameter and should possibly labeled as R/O in any external ROC Plus Protocol Specification. The range is based upon the unit selected.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Desired EU value for a calibration point. Note: No event is logged for this parameter and should possibly labeled as R/O in any external ROC Plus Protocol
        Specification. The range is based upon the unit selected.
        """

        MANUAL_VALUE = PointTypeParameter(
            parameter_number=21,
            parameter_name='Manual Value',
            parameter_desc='Current EU Value of RTD while performing calibration.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current EU Value of RTD while performing calibration.
        """

        EU_VALUE = PointTypeParameter(
            parameter_number=22,
            parameter_name='EU Value',
            parameter_desc='Value in Engineering Units.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value in Engineering Units.
        """

        CLIPPING = PointTypeParameter(
            parameter_number=23,
            parameter_name='Clipping',
            parameter_desc='If enabled, then the EU Value (parameter #22) cannot be less than the Low Low Alarm EU (parameter #24) or greater than the High High Alarm EU (parameter #27). If disabled, no limiting of the EU Value (parameter #22) takes place. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, then the EU Value (parameter #22) cannot be less than the Low Low Alarm EU (parameter #24) or greater than the High High Alarm EU (parameter #27).
        If disabled, no limiting of the EU Value (parameter #22) takes place. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        LOW_LOW_ALARM_EU = PointTypeParameter(
            parameter_number=24,
            parameter_name='Low Low Alarm EU',
            parameter_desc='Alarm value for Low Low Alarm and minimum EU Value (parameter #22) if clipping (parameter #23) is enabled.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Low Low Alarm and minimum EU Value (parameter #22) if clipping (parameter #23) is enabled.
        """

        LOW_ALARM_EU = PointTypeParameter(
            parameter_number=25,
            parameter_name='Low Alarm EU',
            parameter_desc='Alarm value for Low Alarm.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Low Alarm.
        """

        HIGH_ALARM_EU = PointTypeParameter(
            parameter_number=26,
            parameter_name='High Alarm EU',
            parameter_desc='Alarm value for High Alarm.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for High Alarm.
        """

        HIGH_HIGH_ALARM_EU = PointTypeParameter(
            parameter_number=27,
            parameter_name='High High Alarm EU',
            parameter_desc='Alarm value for High High Alarm and maximum EU Value (parameter #22) if clipping (parameter #23) is enabled.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for High High Alarm and maximum EU Value (parameter #22) if clipping (parameter #23) is enabled.
        """

        RATE_ALARM_EU = PointTypeParameter(
            parameter_number=28,
            parameter_name='Rate Alarm EU',
            parameter_desc='Alarm value for maximum change of EU Value (parameter #22) between Scan Periods.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for maximum change of EU Value (parameter #22) between Scan Periods.
        """

        ALARM_DEADBAND = PointTypeParameter(
            parameter_number=29,
            parameter_name='Alarm Deadband',
            parameter_desc='Provides a range (+) that the EU Value (parameter #22) may move between without causing another alarm.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Provides a range (+) that the EU Value (parameter #22) may move between without causing another alarm.
        """

        ALARMING = PointTypeParameter(
            parameter_number=30,
            parameter_name='Alarming',
            parameter_desc='If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=31,
            parameter_name='SRBX on Clear',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).
        """

        SRBX_ON_SET = PointTypeParameter(
            parameter_number=32,
            parameter_name='SRBX on Set',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).
        """

        ALARM_CODE = PointTypeParameterBinary(
            parameter_number=33,
            parameter_name='Alarm Code',
            parameter_desc='Alarm Code',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Low Alarm',
                    bit_desc='If set, the EU Value (parameter #22) is less than or equal to the Low Alarm EU (parameter #25). If clear, the EU Value (parameter #22) is greater than the Low Alarm EU (parameter #25).'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Low Low Alarm',
                    bit_desc='If set, the EU Value (parameter #22) is less than or equal to the Low Low Alarm EU (parameter #24). If clear, the EU Value (parameter #22) is greater than the Low Low Alarm EU (parameter #24).'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='High Alarm',
                    bit_desc='If set, the EU Value (parameter #22) is greater than or equal to the High Alarm EU (parameter #26). If clear, the EU Value (parameter #22) is less than the High Alarm EU (parameter #26).'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='High High Alarm',
                    bit_desc='If set, the EU Value (parameter #22) is greater than or equal to the High High Alarm EU (parameter #27). If clear, the EU Value (parameter #22) is less than the High High Alarm EU (parameter #27).'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Rate Alarm',
                    bit_desc='If set, the EU Value (parameter #22) change from last Scan Period to the new Scan Period is greater than or equal to the Rate Alarm EU (parameter #28). If clear, the EU Value (parameter #22) change from last Scan Period to the new Scan Period is less than the Rate Alarm EU (parameter #28).'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Point Fail Alarm',
                    bit_desc='If set, the RTDs hardware is reporting a malfunction. If clear, the RTDs hardware is operating properly.'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Scanning Disabled Alarm',
                    bit_desc='If set, the Scanning (parameter #2) has been disabled. If clear, the Scanning (parameter #2) has been disabled.'
                )
            ]
        )
        """
        Alarm Code
        """

        CALIBRATION_TIMER = PointTypeParameter(
            parameter_number=34,
            parameter_name='Calibration Timer',
            parameter_desc='Number of seconds until a calibration timeout occurs.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0 > 3,600.0'
        )
        """
        Number of seconds until a calibration timeout occurs.
        """

        CALIBRATION_MODE = PointTypeParameter(
            parameter_number=35,
            parameter_name='Calibration Mode',
            parameter_desc='Describes what the calibration for the RTD is doing. Valid values are: 0 = Use Current Calibration 1 = Start Calibration 2 = Calibrate 3 = Restore Previous Calibration 4 = Stop Calibration. Note: No event is logged for this parameter.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-4'
        )
        """
        Describes what the calibration for the RTD is doing. Valid values are: 0 = Use Current Calibration 1 = Start Calibration 2 = Calibrate 3 = Restore Previous
        Calibration 4 = Stop Calibration. Note: No event is logged for this parameter.
        """

        CALIBRATION_TYPE = PointTypeParameter(
            parameter_number=36,
            parameter_name='Calibration Type',
            parameter_desc='During calibration, determines what the Set Value (parameter #20) is replacing. Valid values are : 0 = Nothing 1 = Set Zero 2 = Set Span 3 = Set Mid Point #1 4 = Set Mid Point #2 5 = Set Mid Point #3 6 = Unused. Note: No event is logged for this parameter and should possibly labeled as R/O in any external ROC Plus Protocol Specification',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-6'
        )
        """
        During calibration, determines what the Set Value (parameter #20) is replacing. Valid values are : 0 = Nothing 1 = Set Zero 2 = Set Span 3 = Set Mid Point #1 4
        = Set Mid Point #2 5 = Set Mid Point #3 6 = Unused. Note: No event is logged for this parameter and should possibly labeled as R/O in any external ROC Plus
        Protocol Specification
        """

        UNITS = PointTypeParameter(
            parameter_number=37,
            parameter_name='Units',
            parameter_desc='Indicates units for the point. Valid values are: 0 °F 1 °C 2 °K 3 °R 4 = Ohms Note: Version 3.40 changed default from 1 (C) to 0 (F).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-4'
        )
        """
        Indicates units for the point. Valid values are: 0 °F 1 °C 2 °K 3 °R 4 = Ohms Note: Version 3.40 changed default from 1 (C) to 0 (F).
        """





class THERMOCOUPLE(PointType):
    """Thermocouple"""

    point_type_number: int = 107
    """Point Type ID"""

    point_type_desc: str = 'Thermocouple'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Identification name for specific TC. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Identification name for specific TC. Values must be printable ASCII characters.
        """

        UNITS_TAG = PointTypeParameter(
            parameter_number=1,
            parameter_name='Units Tag',
            parameter_desc='Describes the units used by the TC. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Describes the units used by the TC. Values must be printable ASCII characters.
        """

        SCANNING = PointTypeParameter(
            parameter_number=2,
            parameter_name='Scanning',
            parameter_desc='If disabled, field inputs are ignored and no changes will occur unless manually entered. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If disabled, field inputs are ignored and no changes will occur unless manually entered. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        UNITS = PointTypeParameter(
            parameter_number=3,
            parameter_name='Units',
            parameter_desc='Indicates the TC units. Valid values are: 0 = °F 1 °C 2 °K 3 °R Note: Version 3.40 changed default from 1 (C) to 0 (°F).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-3'
        )
        """
        Indicates the TC units. Valid values are: 0 = °F 1 °C 2 °K 3 °R Note: Version 3.40 changed default from 1 (C) to 0 (°F).
        """

        TYPE_OF_THERMOCOUPLE = PointTypeParameter(
            parameter_number=4,
            parameter_name='Type of Thermocouple',
            parameter_desc='Indicates which type of thermocouple is attached. Valid values are: 0 = Type J 1 Type K 2 = Type B 3 = Type E 4 Type R 5 = Type S 6 = Type T 8 = Type 10 9 = Type C. 10 = Type N Note: Only types J and K are available on the original 5-point TC module.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6; 8 10'
        )
        """
        Indicates which type of thermocouple is attached. Valid values are: 0 = Type J 1 Type K 2 = Type B 3 = Type E 4 Type R 5 = Type S 6 = Type T 8 = Type 10 9 =
        Type C. 10 = Type N Note: Only types J and K are available on the original 5-point TC module.
        """

        SCAN_PERIOD = PointTypeParameter(
            parameter_number=5,
            parameter_name='Scan Period',
            parameter_desc='Number of seconds between updates of the TC.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.1 43,200.0'
        )
        """
        Number of seconds between updates of the TC.
        """

        ACTUAL_SCAN_TIME = PointTypeParameter(
            parameter_number=6,
            parameter_name='Actual Scan Time',
            parameter_desc='Actual number of seconds between updates of the TC.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.00 43,200.0'
        )
        """
        Actual number of seconds between updates of the TC.
        """

        FILTER = PointTypeParameter(
            parameter_number=7,
            parameter_name='Filter',
            parameter_desc='Percentage of last raw A/D reading to be weighted with the new raw A/D reading.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-99'
        )
        """
        Percentage of last raw A/D reading to be weighted with the new raw A/D reading.
        """

        AVERAGING = PointTypeParameter(
            parameter_number=8,
            parameter_name='Averaging',
            parameter_desc='If enabled, the filtered EU value is averaged over the Scan Period. If disabled, the current filtered EU value is used when the Scan Period is reached. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, the filtered EU value is averaged over the Scan Period. If disabled, the current filtered EU value is used when the Scan Period is reached. Valid
        values are 0 (Disabled) and 1 (Enabled).
        """

        EU_VALUE = PointTypeParameter(
            parameter_number=9,
            parameter_name='EU Value',
            parameter_desc='Value in Engineering Units.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value in Engineering Units.
        """

        LOW_LOW_ALARM_EU = PointTypeParameter(
            parameter_number=10,
            parameter_name='Low Low Alarm EU',
            parameter_desc='Alarm value for Low Low Alarm and minimum EU Value (parameter #22) if Clipping (parameter #23) is enabled.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Low Low Alarm and minimum EU Value (parameter #22) if Clipping (parameter #23) is enabled.
        """

        LOW_ALARM_EU = PointTypeParameter(
            parameter_number=11,
            parameter_name='Low Alarm EU',
            parameter_desc='Alarm value for Low Alarm.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Low Alarm.
        """

        HIGH_ALARM_EU = PointTypeParameter(
            parameter_number=12,
            parameter_name='High Alarm EU',
            parameter_desc='Alarm value for High Alarm.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for High Alarm.
        """

        HIGH_HIGH_ALARM_EU = PointTypeParameter(
            parameter_number=13,
            parameter_name='High High Alarm EU',
            parameter_desc='Alarm value for High High Alarm and maximum EU Value (parameter #22) if Clipping (parameter #23) is enabled.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for High High Alarm and maximum EU Value (parameter #22) if Clipping (parameter #23) is enabled.
        """

        RATE_ALARM_EU = PointTypeParameter(
            parameter_number=14,
            parameter_name='Rate Alarm EU',
            parameter_desc='Alarm value for maximum change of EU Value (parameter #22) between Scan Periods.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for maximum change of EU Value (parameter #22) between Scan Periods.
        """

        ALARM_DEADBAND = PointTypeParameter(
            parameter_number=15,
            parameter_name='Alarm Deadband',
            parameter_desc='Provides a range (+) that the EU Value (parameter #22) may move between without causing another alarm.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Provides a range (+) that the EU Value (parameter #22) may move between without causing another alarm.
        """

        ALARMING = PointTypeParameter(
            parameter_number=16,
            parameter_name='Alarming',
            parameter_desc='If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=17,
            parameter_name='SRBX on Clear',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).
        """

        SRBX_ON_SET = PointTypeParameter(
            parameter_number=18,
            parameter_name='SRBX on Set',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).
        """

        ALARM_CODE = PointTypeParameterBinary(
            parameter_number=19,
            parameter_name='Alarm Code',
            parameter_desc='Alarm Code',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Low Alarm',
                    bit_desc='If set, the EU Value (parameter #22) is less than or equal to the Low Alarm EU (parameter #25). If clear, the EU Value (parameter #22) is greater than the Low Alarm EU (parameter #25).'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Low Low Alarm',
                    bit_desc='If set, the EU Value (parameter #22) is less than or equal to the Low Low Alarm EU (parameter #24). If clear, the EU Value (parameter #22) is greater than the Low Low Alarm EU (parameter #24).'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='High Alarm',
                    bit_desc='If set, the EU Value (parameter #22) is greater than or equal to the High Alarm EU (parameter #26). If clear, the EU Value (parameter #22) is less than the High Alarm EU (parameter #26).'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='High High Alarm',
                    bit_desc='If set, the EU Value (parameter #22) is greater than or equal to the High High Alarm EU (parameter #27). If clear, the EU Value (parameter #22) is less than the High High Alarm EU (parameter #27).'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Rate Alarm',
                    bit_desc='If set, the EU Value (parameter #22) change from last Scan Period to the new Scan Period is greater than or equal to the Rate Alarm EU (parameter #28). If clear, the EU Value (parameter #22) change from last Scan Period to the new Scan Period is less than the Rate Alarm EU (parameter #28).'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Point Fail Alarm',
                    bit_desc='If set, the TCs hardware is reporting a malfunction. If clear, the TCs hardware is operating properly.'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Scanning Disabled Alarm',
                    bit_desc='If set, the Scanning (parameter #2) has been disabled. If clear, the Scanning (parameter #2) has been disabled.'
                )
            ]
        )
        """
        Alarm Code
        """

        EU_OFFSET = PointTypeParameter(
            parameter_number=20,
            parameter_name='EU Offset',
            parameter_desc='Value to be added to EU value (parameter #9).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value to be added to EU value (parameter #9).
        """

        FAILSAFE_MODE = PointTypeParameter(
            parameter_number=21,
            parameter_name='Failsafe Mode',
            parameter_desc='Valid values are 0 (Disabled) and 1 (Enabled, the EU Value is set to the Failsafe value in the event of a point fail)',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Valid values are 0 (Disabled) and 1 (Enabled, the EU Value is set to the Failsafe value in the event of a point fail)
        """

        FAILSAFE_VALUE = PointTypeParameter(
            parameter_number=22,
            parameter_name='Failsafe Value',
            parameter_desc='The TCs EU Value is set to the Failsafe Value if Failsafe Mode is Enabled and the TC is in Point Fail.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        The TCs EU Value is set to the Failsafe Value if Failsafe Mode is Enabled and the TC is in Point Fail.
        """





class MVS(PointType):
    """Multi-Variable Sensor"""

    point_type_number: int = 108
    """Point Type ID"""

    point_type_desc: str = 'Multi-Variable Sensor'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        SENSOR_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Sensor Tag ID',
            parameter_desc='Identification name for specific MVS. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Identification name for specific MVS. Values must be printable ASCII characters.
        """

        SENSOR_ADDRESS = PointTypeParameter(
            parameter_number=1,
            parameter_name='Sensor Address',
            parameter_desc='Unique address of MVS to allow for multi-drop communications.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 -> 255'
        )
        """
        Unique address of MVS to allow for multi-drop communications.
        """

        POLL_MODE = PointTypeParameter(
            parameter_number=2,
            parameter_name='Poll Mode',
            parameter_desc='Sets the operation for the MVS module: Valid values are: 0 = Off Scan Mode 1 = Normal Poll Mode 2 = Input Freeze Mode 4 = Configuration Poll Mode 5 = Set Tag and Address Mode.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 2, 4 5'
        )
        """
        Sets the operation for the MVS module: Valid values are: 0 = Off Scan Mode 1 = Normal Poll Mode 2 = Input Freeze Mode 4 = Configuration Poll Mode 5 = Set Tag
        and Address Mode.
        """

        UNITS = PointTypeParameter(
            parameter_number=3,
            parameter_name='Units',
            parameter_desc='Indicates the engineering units for the process variables. Valid values are 0 (English Units) and 1 (Metric Units).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates the engineering units for the process variables. Valid values are 0 (English Units) and 1 (Metric Units).
        """

        INCHES_H2O = PointTypeParameter(
            parameter_number=4,
            parameter_name='Inches H2O',
            parameter_desc='Indicates the reference temperature for calculating pressure properly. Valid values are 0 (Inches H2O at 60 °F) and 1 (Inches H2O at 68 °F).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates the reference temperature for calculating pressure properly. Valid values are 0 (Inches H2O at 60 °F) and 1 (Inches H2O at 68 °F).
        """

        PRESSURE_TAP_LOCATION = PointTypeParameter(
            parameter_number=5,
            parameter_name='Pressure Tap Location',
            parameter_desc='Indicates if the static pressure is an upstream or downstream reading. Valid values are 0 (Downstream) and 1 (Upstream).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates if the static pressure is an upstream or downstream reading. Valid values are 0 (Downstream) and 1 (Upstream).
        """

        ACTION_ON_FAILURE = PointTypeParameter(
            parameter_number=6,
            parameter_name='Action on Failure',
            parameter_desc='Indicates whether the DP Reading, SP Reading, TMP Reading, and DP Reverse Reading should retain last value or be set to the Fault Value parameters when a 485 or Sensor Communication Failure occurs. Valid values are 0 (Retain Last Value) and 1 (Use Fault Value parameters).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether the DP Reading, SP Reading, TMP Reading, and DP Reverse Reading should retain last value or be set to the Fault Value parameters when a 485 or
        Sensor Communication Failure occurs. Valid values are 0 (Retain Last Value) and 1 (Use Fault Value parameters).
        """

        SOFTWARE_REVISION_MVS_INTERFACE = PointTypeParameter(
            parameter_number=7,
            parameter_name='Software Revision MVS Interface',
            parameter_desc='Current software revision of the MVS Interface software.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Current software revision of the MVS Interface software.
        """

        SENSOR_VOLTAGE = PointTypeParameter(
            parameter_number=8,
            parameter_name='Sensor Voltage',
            parameter_desc='Current voltage of MVS in volts.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current voltage of MVS in volts.
        """

        SENSOR_ALARMING = PointTypeParameter(
            parameter_number=9,
            parameter_name='Sensor Alarming',
            parameter_desc='If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled). Note: If Enabled, this parameter populates Parameter #10.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled). Note: If Enabled, this parameter populates
        Parameter #10.
        """

        SENSOR_ALARM_CODE = PointTypeParameterBinary(
            parameter_number=10,
            parameter_name='Sensor Alarm Code',
            parameter_desc='Populated if parameter #9 is Enabled.',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Input Freeze Mode',
                    bit_desc='Indicates the Poll Mode (parameter #2) is in Input Freeze Mode. Valid values are 0 (Not in Input Freeze Mode) and 1 (Input Freeze Mode).'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Sensor Communication Failure',
                    bit_desc='Indicates the MVS is no longer communicating with the MVS Interface. Valid values are 0 (No Failure) and 1 (Sensor Communication Failure).'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='485 Communication Failure',
                    bit_desc='Indicates the MVS Interface is no longer communicating with the ROC800-Series. Valid values are 0 (No Failure) and 1 (485 Communication Failure).'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Off Scan Mode',
                    bit_desc='Indicates the Poll Mode (parameter #2) is in Off Scan Mode. Valid values are 0 (Not in Off Scan Mode) and 1 (Off Scan Mode).'
                )
            ]
        )
        """
        Populated if parameter #9 is Enabled.
        """

        SENSOR_RANGE_STATUS = PointTypeParameterBinary(
            parameter_number=11,
            parameter_name='Sensor Range Status',
            parameter_desc='Sensor Range Status',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='DP less than DP Zero',
                    bit_desc='Indicates if the DP Reading (parameter #19) is less than the calibrated DP Zero Calibration Point (parameter #13). Valid values are 0 (DP Reading greater than or equal to DP Zero Calibration Point) and 1 (DP Reading less than DP Zero Calibration Point).'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='SP less than SP Zero',
                    bit_desc='Indicates if the SP Reading (parameter #35) is less than the calibrated SP Zero Calibration Point (parameter #29). Valid values are 0 (SP Reading greater than or equal to SP Zero Calibration Point) and 1 (SP Reading less than SP Zero Calibration Point).'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='TMP less than TMP Zero',
                    bit_desc='Indicates if the TMP Reading (parameter #50) is less than the calibrated TMP Zero Calibration Point (parameter #44). Valid values are 0 (TMP Reading greater than or equal to TMP Zero Calibration Point) and 1 (TMP Reading less than TMP Zero Calibration Point).'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='DP greater than DP Span',
                    bit_desc='Indicates if the DP Reading (parameter #19) is greater than the calibrated DP Span Calibration Point (parameter #17). Valid values are 0 (DP Reading less than or equal to DP Span Calibration Point) and 1 (DP Reading greater than DP Span Calibration Point).'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='SP greater than SP Span',
                    bit_desc='Indicates if the SP Reading (parameter #35) is greater than the calibrated SP Span Calibration Point (parameter #33). Valid values are 0 (SP Reading less than or equal to SP Span Calibration Point) and 1 (SP Reading greater than SP Span Calibration Point).'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='TMP greater than TMP Span',
                    bit_desc='Indicates if the TMP Reading (parameter #50) is greater than the calibrated TMP Span Calibration Point (parameter #48). Valid values are 0 (TMP Reading less than or equal to TMP Span Calibration Point) and 1 (TMP Reading greater than TMP Span Calibration Point).'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                )
            ]
        )
        """
        Sensor Range Status
        """

        STATIC_PRESSURE_EFFECT = PointTypeParameter(
            parameter_number=12,
            parameter_name='Static Pressure Effect',
            parameter_desc='Calibrated Zero Shift for DP in inches of H2O or kPa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Calibrated Zero Shift for DP in inches of H2O or kPa.
        """

        DP_ZERO_CALIBRATION_POINT = PointTypeParameter(
            parameter_number=13,
            parameter_name='DP Zero Calibration Point',
            parameter_desc='Lowest calibrated DP Reading value in inches of H2O or kPa.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Lowest calibrated DP Reading value in inches of H2O or kPa.
        """

        DP_CALIBRATION_MID_POINT_1 = PointTypeParameter(
            parameter_number=14,
            parameter_name='DP Calibration Mid Point #1',
            parameter_desc='Second lowest calibrated DP Reading value in inches of H2O or kPa.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Second lowest calibrated DP Reading value in inches of H2O or kPa.
        """

        DP_CALIBRATION_MID_POINT_2 = PointTypeParameter(
            parameter_number=15,
            parameter_name='DP Calibration Mid Point #2',
            parameter_desc='Third lowest or highest calibrated DP Reading value in inches of H2O or kPa.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Third lowest or highest calibrated DP Reading value in inches of H2O or kPa.
        """

        DP_CALIBRATION_MID_POINT_3 = PointTypeParameter(
            parameter_number=16,
            parameter_name='DP Calibration Mid Point #3',
            parameter_desc='Second highest calibrated DP Reading value in inches of HO or kPa.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Second highest calibrated DP Reading value in inches of HO or kPa.
        """

        DP_SPAN_CALIBRATION_POINT = PointTypeParameter(
            parameter_number=17,
            parameter_name='DP Span Calibration Point',
            parameter_desc='Highest calibrated DP Reading value in inches of HO or kPa.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Highest calibrated DP Reading value in inches of HO or kPa.
        """

        MANUAL_DP = PointTypeParameter(
            parameter_number=18,
            parameter_name='Manual DP',
            parameter_desc='Current DP Reading while performing calibration in inches of H2O or kPa.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current DP Reading while performing calibration in inches of H2O or kPa.
        """

        DP_READING = PointTypeParameter(
            parameter_number=19,
            parameter_name='DP Reading',
            parameter_desc='Current Differential Pressure in inches of H2O or kPa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current Differential Pressure in inches of H2O or kPa.
        """

        DP_REVERSE_READING = PointTypeParameter(
            parameter_number=20,
            parameter_name='DP Reverse Reading',
            parameter_desc='Current Differential Pressure Reversed in inches of H2O or kPa.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current Differential Pressure Reversed in inches of H2O or kPa.
        """

        DP_FAULT_VALUE = PointTypeParameter(
            parameter_number=21,
            parameter_name='DP Fault Value',
            parameter_desc='Value that the DP Reading (parameter #19) will be set to if a 485 Communication Failure or Sensor Communication Failure occurs in inches of H2O or kPa. The DP Reverse Reading (parameter #20) will be set to the same value of the opposite sign.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value that the DP Reading (parameter #19) will be set to if a 485 Communication Failure or Sensor Communication Failure occurs in inches of H2O or kPa. The DP
        Reverse Reading (parameter #20) will be set to the same value of the opposite sign.
        """

        DP_LOW_ALARM_EU = PointTypeParameter(
            parameter_number=22,
            parameter_name='DP Low Alarm EU',
            parameter_desc='DP Alarm value for DP Low Alarm in inches of H2O or kPa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        DP Alarm value for DP Low Alarm in inches of H2O or kPa.
        """

        DP_HIGH_ALARM_EU = PointTypeParameter(
            parameter_number=23,
            parameter_name='DP High Alarm EU',
            parameter_desc='DP Alarm value for DP High Alarm in inches of H2O or kPa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        DP Alarm value for DP High Alarm in inches of H2O or kPa.
        """

        DP_ALARM_DEADBAND = PointTypeParameter(
            parameter_number=24,
            parameter_name='DP Alarm Deadband',
            parameter_desc='Provides a range (+) that the DP Reading (parameter #19) may move between without causing another alarm in inches of H2O or kPa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Provides a range (+) that the DP Reading (parameter #19) may move between without causing another alarm in inches of H2O or kPa.
        """

        DP_ALARMING = PointTypeParameter(
            parameter_number=25,
            parameter_name='DP Alarming',
            parameter_desc='If enabled, DP alarms may be generated and sent to the Alarm Log. Valid values are 0 (DP Alarming Disabled) and 1 (DP Alarming Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, DP alarms may be generated and sent to the Alarm Log. Valid values are 0 (DP Alarming Disabled) and 1 (DP Alarming Enabled).
        """

        DP_SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=26,
            parameter_name='DP SRBX on Clear',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).
        """

        DP_SRBX_ON_SET = PointTypeParameter(
            parameter_number=27,
            parameter_name='DP SRBX on Set',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).
        """

        DP_ALARM_CODE = PointTypeParameterBinary(
            parameter_number=28,
            parameter_name='DP Alarm Code',
            parameter_desc='DP Alarm Code',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Low Alarm',
                    bit_desc='If set, the DP Reading (parameter #19) is less than or equal to the DP Low Alarm EU (parameter #22). If clear, the DP Reading (parameter #19) is greater than the DP Low Alarm EU (parameter #22).'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='High Alarm',
                    bit_desc='If set, the DP Reading (parameter #19) is greater than or equal to the DP High Alarm EU (parameter #23). If clear, the DP Reading (parameter #19) is less than the DP High Alarm EU (parameter #23).'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Point Fail Alarm',
                    bit_desc='Indicates a failure in the hardware or software of the MVS for Differential Pressure. Valid values are 0 (No Failure) and 1 (DP Failure).'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                )
            ]
        )
        """
        DP Alarm Code
        """

        SP_ZERO_CALIBRATION_POINT = PointTypeParameter(
            parameter_number=29,
            parameter_name='SP Zero Calibration Point',
            parameter_desc='Lowest calibrated SP Reading value in PSI or kPa.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Lowest calibrated SP Reading value in PSI or kPa.
        """

        SP_CALIBRATION_MID_POINT_1 = PointTypeParameter(
            parameter_number=30,
            parameter_name='SP Calibration Mid Point #1',
            parameter_desc='Second lowest calibrated SP Reading value in PSI or kPa.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Second lowest calibrated SP Reading value in PSI or kPa.
        """

        SP_CALIBRATION_MID_POINT_2 = PointTypeParameter(
            parameter_number=31,
            parameter_name='SP Calibration Mid Point #2',
            parameter_desc='Third lowest or highest calibrated SP Reading value in PSI or kPa.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Third lowest or highest calibrated SP Reading value in PSI or kPa.
        """

        SP_CALIBRATION_MID_POINT_3 = PointTypeParameter(
            parameter_number=32,
            parameter_name='SP Calibration Mid Point #3',
            parameter_desc='Second highest calibrated SP Reading value in PSI or kPa.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Second highest calibrated SP Reading value in PSI or kPa.
        """

        SP_SPAN_CALIBRATION_POINT = PointTypeParameter(
            parameter_number=33,
            parameter_name='SP Span Calibration Point',
            parameter_desc='Highest calibrated SP Reading value in PSI or kPa.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Highest calibrated SP Reading value in PSI or kPa.
        """

        MANUAL_SP = PointTypeParameter(
            parameter_number=34,
            parameter_name='Manual SP',
            parameter_desc='Current SP Reading while performing calibration in PSI or kPa.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current SP Reading while performing calibration in PSI or kPa.
        """

        SP_READING = PointTypeParameter(
            parameter_number=35,
            parameter_name='SP Reading',
            parameter_desc='Current Static Pressure in PSI or kPa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current Static Pressure in PSI or kPa.
        """

        SP_FAULT_VALUE = PointTypeParameter(
            parameter_number=36,
            parameter_name='SP Fault Value',
            parameter_desc='Value that the SP Reading (parameter #35) will be set to if a 485 Communication Failure or Sensor Communication Failure occurs in PSI or kPa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value that the SP Reading (parameter #35) will be set to if a 485 Communication Failure or Sensor Communication Failure occurs in PSI or kPa.
        """

        SP_LOW_ALARM_EU = PointTypeParameter(
            parameter_number=37,
            parameter_name='SP Low Alarm EU',
            parameter_desc='SP Alarm value for SP Low Alarm in PSI or kPa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        SP Alarm value for SP Low Alarm in PSI or kPa.
        """

        SP_HIGH_ALARM_EU = PointTypeParameter(
            parameter_number=38,
            parameter_name='SP High Alarm EU',
            parameter_desc='SP Alarm value for SP High Alarm in PSI or kPa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        SP Alarm value for SP High Alarm in PSI or kPa.
        """

        SP_ALARM_DEADBAND = PointTypeParameter(
            parameter_number=39,
            parameter_name='SP Alarm Deadband',
            parameter_desc='Provides a range (+) that the SP Reading (parameter #35) may move between without causing another alarm in PSI or kPa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Provides a range (+) that the SP Reading (parameter #35) may move between without causing another alarm in PSI or kPa.
        """

        SP_ALARMING = PointTypeParameter(
            parameter_number=40,
            parameter_name='SP Alarming',
            parameter_desc='If enabled, SP alarms may be generated and sent to the Alarm Log. Valid values are 0 (SP Alarming Disabled) and 1 (SP Alarming Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, SP alarms may be generated and sent to the Alarm Log. Valid values are 0 (SP Alarming Disabled) and 1 (SP Alarming Enabled).
        """

        SP_SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=41,
            parameter_name='SP SRBX on Clear',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).
        """

        SP_SRBX_ON_SET = PointTypeParameter(
            parameter_number=42,
            parameter_name='SP SRBX on Set',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).
        """

        SP_ALARM_CODE = PointTypeParameterBinary(
            parameter_number=43,
            parameter_name='SP Alarm Code',
            parameter_desc='SP Alarm Code',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Low Alarm',
                    bit_desc='If set, the SP Reading (parameter #35) is less than or equal to the SP Low Alarm EU (parameter #37). If clear, the SP Reading (parameter #35) is greater than the SP Low Alarm EU (parameter #37).'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='High Alarm',
                    bit_desc='If set, the SP Reading (parameter #35) is greater than or equal to the SP High Alarm EU (parameter #38). If clear, the SP Reading (parameter #35) is less than the SP High Alarm EU (parameter #38).'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Point Fail Alarm',
                    bit_desc='Indicates a failure in the hardware or software of the MVS for Static Pressure. Valid values are 0 (No Failure) and 1 (SP Failure).'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                )
            ]
        )
        """
        SP Alarm Code
        """

        TMP_ZERO_CALIBRATION_POINT = PointTypeParameter(
            parameter_number=44,
            parameter_name='TMP Zero Calibration Point',
            parameter_desc='Lowest calibrated TMP Reading value in °F or °C.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Lowest calibrated TMP Reading value in °F or °C.
        """

        TMP_CALIBRATION_MID_POINT_1 = PointTypeParameter(
            parameter_number=45,
            parameter_name='TMP Calibration Mid Point #1',
            parameter_desc='Second lowest calibrated TMP Reading value in °F or °C.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Second lowest calibrated TMP Reading value in °F or °C.
        """

        TMP_CALIBRATION_MID_POINT_2 = PointTypeParameter(
            parameter_number=46,
            parameter_name='TMP Calibration Mid Point #2',
            parameter_desc='Third lowest (or highest) calibrated TMP Reading value in °F or °C.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Third lowest (or highest) calibrated TMP Reading value in °F or °C.
        """

        TMP_CALIBRATION_MID_POINT_3 = PointTypeParameter(
            parameter_number=47,
            parameter_name='TMP Calibration Mid Point #3',
            parameter_desc='Second highest calibrated TMP Reading value in °F or °C.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Second highest calibrated TMP Reading value in °F or °C.
        """

        TMP_SPAN_CALIBRATION_POINT = PointTypeParameter(
            parameter_number=48,
            parameter_name='TMP Span Calibration Point',
            parameter_desc='Highest calibrated TMP Reading value in °F or °C.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Highest calibrated TMP Reading value in °F or °C.
        """

        MANUAL_TMP = PointTypeParameter(
            parameter_number=49,
            parameter_name='Manual TMP',
            parameter_desc='Current TMP Reading while performing calibration in °F or °C.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current TMP Reading while performing calibration in °F or °C.
        """

        TMP_READING = PointTypeParameter(
            parameter_number=50,
            parameter_name='TMP Reading',
            parameter_desc='Current temperature in °F or °C.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current temperature in °F or °C.
        """

        TMP_FAULT_VALUE = PointTypeParameter(
            parameter_number=51,
            parameter_name='TMP Fault Value',
            parameter_desc='Value that the TMP Reading (parameter #50) will be set to if a 485 Communication Failure or Sensor Communication Failure occurs in °F or °C.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value that the TMP Reading (parameter #50) will be set to if a 485 Communication Failure or Sensor Communication Failure occurs in °F or °C.
        """

        TMP_LOW_ALARM_EU = PointTypeParameter(
            parameter_number=52,
            parameter_name='TMP Low Alarm EU',
            parameter_desc='TMP Alarm value for TMP Low Alarm in °F or °C.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        TMP Alarm value for TMP Low Alarm in °F or °C.
        """

        TMP_HIGH_ALARM_EU = PointTypeParameter(
            parameter_number=53,
            parameter_name='TMP High Alarm EU',
            parameter_desc='TMP Alarm value for TMP High Alarm in °F or °C.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        TMP Alarm value for TMP High Alarm in °F or °C.
        """

        TMP_ALARM_DEADBAND = PointTypeParameter(
            parameter_number=54,
            parameter_name='TMP Alarm Deadband',
            parameter_desc='Provides a range (+) that the TMP Reading (parameter #50) may move between without causing another alarm in °F or °C.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Provides a range (+) that the TMP Reading (parameter #50) may move between without causing another alarm in °F or °C.
        """

        TMP_ALARMING = PointTypeParameter(
            parameter_number=55,
            parameter_name='TMP Alarming',
            parameter_desc='If enabled, TMP alarms may be generated and sent to the Alarm Log. Valid values are 0 (TMP Alarming Disabled) and 1 (TMP Alarming Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, TMP alarms may be generated and sent to the Alarm Log. Valid values are 0 (TMP Alarming Disabled) and 1 (TMP Alarming Enabled).
        """

        TMP_SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=56,
            parameter_name='TMP SRBX on Clear',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).
        """

        TMP_SRBX_ON_SET = PointTypeParameter(
            parameter_number=57,
            parameter_name='TMP SRBX on Set',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).
        """

        TMP_ALARM_CODE = PointTypeParameterBinary(
            parameter_number=58,
            parameter_name='TMP Alarm Code',
            parameter_desc='TMP Alarm Code',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Low Alarm',
                    bit_desc='If set, the TMP Reading (parameter #50) is less than or equal to the TMP Low Alarm EU (parameter #52). If clear, the TMP Reading (parameter #50) is greater than the TMP Low Alarm EU (parameter #52).'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='High Alarm',
                    bit_desc='If set, the TMP Reading (parameter #50) is greater than or equal to the TMP High Alarm EU (parameter #53). If clear, the TMP Reading (parameter #50) is less than the TMP High Alarm EU (parameter #53).'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Point Fail Alarm',
                    bit_desc='Indicates a failure in the hardware or software of the MVS for Temperature. Valid values are 0 (No Failure) and 1 (TMP Failure).'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                )
            ]
        )
        """
        TMP Alarm Code
        """

        CALIBRATE_COMMAND = PointTypeParameter(
            parameter_number=59,
            parameter_name='Calibrate Command',
            parameter_desc='Tells the MVS Interface the process variable being calibrated. Valid values are: 0 = No Action 1 = Calibrate DP 2 = Calibrate SP 3 = Calibrate TMP 6 = Save MVS Calibration 7 = Set Defaults.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-6'
        )
        """
        Tells the MVS Interface the process variable being calibrated. Valid values are: 0 = No Action 1 = Calibrate DP 2 = Calibrate SP 3 = Calibrate TMP 6 = Save MVS
        Calibration 7 = Set Defaults.
        """

        CALIBRATE_TYPE = PointTypeParameter(
            parameter_number=60,
            parameter_name='Calibrate Type',
            parameter_desc='Indicates the MVS Interface point being calibrated. Valid values are: 0 None 1 = Set Zero 2 = Set Span 3 = Set Mid Point #1 4 = Set Mid Point #2 5 = Set Mid Point #3 6 = Sensor Setup 7 = Sensor Restore.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-7'
        )
        """
        Indicates the MVS Interface point being calibrated. Valid values are: 0 None 1 = Set Zero 2 = Set Span 3 = Set Mid Point #1 4 = Set Mid Point #2 5 = Set Mid
        Point #3 6 = Sensor Setup 7 = Sensor Restore.
        """

        CALIBRATE_SET_VALUE = PointTypeParameter(
            parameter_number=61,
            parameter_name='Calibrate Set Value',
            parameter_desc='Desired value for a calibration point.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Desired value for a calibration point.
        """

        SENSOR_SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=62,
            parameter_name='Sensor SRBX on Clear',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled). Note: For 485 and Sensor Communication Failures only.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled). Note: For 485 and
        Sensor Communication Failures only.
        """

        SENSOR_SRBX_ON_SET = PointTypeParameter(
            parameter_number=63,
            parameter_name='Sensor SRBX on Set',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled). Note: For 485 and Sensor Communication Failures only.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled). Note: For 485 and Sensor
        Communication Failures only.
        """

        SP_ZERO_SHIFT = PointTypeParameter(
            parameter_number=64,
            parameter_name='SP Zero Shift',
            parameter_desc='Calibrated Zero Shift for SP in inches of H2O or kPa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Calibrated Zero Shift for SP in inches of H2O or kPa.
        """

        MVS_TYPE = PointTypeParameter(
            parameter_number=65,
            parameter_name='MVS Type',
            parameter_desc='Indicates the module/sensor type. Valid values are: 0 = Standard MVS 1 = Smart MVS 2 3095',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Indicates the module/sensor type. Valid values are: 0 = Standard MVS 1 = Smart MVS 2 3095
        """

        TEMPERATURE_BIAS = PointTypeParameter(
            parameter_number=66,
            parameter_name='Temperature Bias',
            parameter_desc='Indicates the calibrated temperature bias for the MVS temperature reading. Units based on units parameter (#3)',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Indicates the calibrated temperature bias for the MVS temperature reading. Units based on units parameter (#3)
        """

        MVS_CONFIG_CHANGE_COUNT = PointTypeParameter(
            parameter_number=67,
            parameter_name='MVS Config Change Count',
            parameter_desc='Increments when the configuration of a 4088 is changed. The value is stored on the 4088. This parameter is not valid for a 205.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Increments when the configuration of a 4088 is changed. The value is stored on the 4088. This parameter is not valid for a 205.
        """

        MVS_SENSOR_TYPE = PointTypeParameter(
            parameter_number=68,
            parameter_name='MVS Sensor Type',
            parameter_desc='Indicates the module/sensor type. Valid values are: 0 = Undefined 1 = 4088 A 2 = 4088 B 3 = 3095 4 = MVS205',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0->4'
        )
        """
        Indicates the module/sensor type. Valid values are: 0 = Undefined 1 = 4088 A 2 = 4088 B 3 = 3095 4 = MVS205
        """





class SYSTEM_AI(PointType):
    """System Analog Inputs"""

    point_type_number: int = 109
    """Point Type ID"""

    point_type_desc: str = 'System Analog Inputs'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Identification name for specific System Al. Values must be printable ASCII characters. Note: Point Tag ID on logical 1 is Voltage In when a PM-30 power module is installed (Version 3.60).',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Identification name for specific System Al. Values must be printable ASCII characters. Note: Point Tag ID on logical 1 is Voltage In when a PM-30 power module
        is installed (Version 3.60).
        """

        UNITS_TAG = PointTypeParameter(
            parameter_number=1,
            parameter_name='Units Tag',
            parameter_desc='Describes the units used by the System Al. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Describes the units used by the System Al. Values must be printable ASCII characters.
        """

        SCANNING = PointTypeParameter(
            parameter_number=2,
            parameter_name='Scanning',
            parameter_desc='If disabled, field inputs are ignored and no changes will occur unless manually entered. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If disabled, field inputs are ignored and no changes will occur unless manually entered. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        SCAN_PERIOD = PointTypeParameter(
            parameter_number=3,
            parameter_name='Scan Period',
            parameter_desc='Number of seconds between updates of the System Al.',
            data_type=dt.FL,
            access='R/W',
            value_range='1.0 -> 43,200.0'
        )
        """
        Number of seconds between updates of the System Al.
        """

        ACTUAL_SCAN_TIME = PointTypeParameter(
            parameter_number=4,
            parameter_name='Actual Scan Time',
            parameter_desc='Actual number of seconds between updates of the System Al.',
            data_type=dt.FL,
            access='R/O',
            value_range='1.0 -> 43,200.0'
        )
        """
        Actual number of seconds between updates of the System Al.
        """

        FILTER = PointTypeParameter(
            parameter_number=5,
            parameter_name='Filter',
            parameter_desc='Percentage of last raw A/D reading to be weighted with the new raw A/D reading.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-99'
        )
        """
        Percentage of last raw A/D reading to be weighted with the new raw A/D reading.
        """

        AVERAGING = PointTypeParameter(
            parameter_number=6,
            parameter_name='Averaging',
            parameter_desc='If enabled, the filtered raw A/D value is averaged over the Scan Period. If disabled, the current filtered raw A/D value is used when the Scan Period is reached. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, the filtered raw A/D value is averaged over the Scan Period. If disabled, the current filtered raw A/D value is used when the Scan Period is
        reached. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        RAW_A_D_INPUT = PointTypeParameter(
            parameter_number=7,
            parameter_name='Raw A/D Input',
            parameter_desc='Raw A/D reading used to calculate the EU Value (parameter #21).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-65,535'
        )
        """
        Raw A/D reading used to calculate the EU Value (parameter #21).
        """

        ZERO_RAW = PointTypeParameter(
            parameter_number=8,
            parameter_name='Zero Raw',
            parameter_desc='Lowest raw A/D input.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0-65,535'
        )
        """
        Lowest raw A/D input.
        """

        SPAN_RAW = PointTypeParameter(
            parameter_number=9,
            parameter_name='Span Raw',
            parameter_desc='Highest raw A/D input.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0-65,535'
        )
        """
        Highest raw A/D input.
        """

        ZERO_EU = PointTypeParameter(
            parameter_number=10,
            parameter_name='Zero EU',
            parameter_desc='Lowest EU value.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Lowest EU value.
        """

        SPAN_EU = PointTypeParameter(
            parameter_number=11,
            parameter_name='Span EU',
            parameter_desc='Highest EU value.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Highest EU value.
        """

        EU_VALUE = PointTypeParameter(
            parameter_number=12,
            parameter_name='EU Value',
            parameter_desc='Value in Engineering Units.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value in Engineering Units.
        """

        CLIPPING = PointTypeParameter(
            parameter_number=13,
            parameter_name='Clipping',
            parameter_desc='If enabled, then the EU Value (parameter #12) cannot be less than the Low Low Alarm EU (parameter #14) or greater than the High High Alarm EU (parameter #17). If disabled, no limiting of the EU Value (parameter #12) takes place. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 1'
        )
        """
        If enabled, then the EU Value (parameter #12) cannot be less than the Low Low Alarm EU (parameter #14) or greater than the High High Alarm EU (parameter #17).
        If disabled, no limiting of the EU Value (parameter #12) takes place. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        LOW_LOW_ALARM_EU = PointTypeParameter(
            parameter_number=14,
            parameter_name='Low Low Alarm EU',
            parameter_desc='Alarm value for Low Low Alarm and minimum EU Value (parameter #12) if Clipping (parameter #13) is enabled.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float EXCEPT +B, then it is >=9.00Volts'
        )
        """
        Alarm value for Low Low Alarm and minimum EU Value (parameter #12) if Clipping (parameter #13) is enabled.
        """

        LOW_ALARM_EU = PointTypeParameter(
            parameter_number=15,
            parameter_name='Low Alarm EU',
            parameter_desc='Alarm value for Low Alarm.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Low Alarm.
        """

        HIGH_ALARM_EU = PointTypeParameter(
            parameter_number=16,
            parameter_name='High Alarm EU',
            parameter_desc='Alarm value for High Alarm.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for High Alarm.
        """

        HIGH_HIGH_ALARM_EU = PointTypeParameter(
            parameter_number=17,
            parameter_name='High High Alarm EU',
            parameter_desc='Alarm value for High High Alarm and maximum EU Value (parameter #12) if Clipping (parameter #13) is enabled.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for High High Alarm and maximum EU Value (parameter #12) if Clipping (parameter #13) is enabled.
        """

        RATE_ALARM_EU = PointTypeParameter(
            parameter_number=18,
            parameter_name='Rate Alarm EU',
            parameter_desc='Alarm value for maximum change of EU Value (parameter #12) between Scan Periods.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for maximum change of EU Value (parameter #12) between Scan Periods.
        """

        ALARM_DEADBAND = PointTypeParameter(
            parameter_number=19,
            parameter_name='Alarm Deadband',
            parameter_desc='Provides a range (+) that the EU Value (parameter #12) may move between without causing another alarm.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Provides a range (+) that the EU Value (parameter #12) may move between without causing another alarm.
        """

        ALARMING = PointTypeParameter(
            parameter_number=20,
            parameter_name='Alarming',
            parameter_desc='If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=21,
            parameter_name='SRBX on Clear',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).
        """

        SRBX_ON_SET = PointTypeParameter(
            parameter_number=22,
            parameter_name='SRBX on Set',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).
        """

        ALARM_CODE = PointTypeParameterBinary(
            parameter_number=23,
            parameter_name='Alarm Code',
            parameter_desc='Alarm Code',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Low Alarm',
                    bit_desc='If set, the EU Value (parameter #12) is less than or equal to the Low Alarm EU (parameter #15). If clear, the EU Value (parameter #12) is greater than the Low Alarm EU (parameter #15).'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Low Low Alarm',
                    bit_desc='If set, the EU Value (parameter #12) is less than or equal to the Low Low Alarm EU (parameter #14). If clear, the EU Value (parameter #12) is greater than the Low Low Alarm EU (parameter #14).'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='High Alarm',
                    bit_desc='If set, the EU Value (parameter #12) is greater than or equal to the High Alarm EU (parameter #16). If clear, the EU Value (parameter #12) is less than the High Alarm EU (parameter #16).'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='High High Alarm',
                    bit_desc='If set, the EU Value (parameter #12) is greater than or equal to the High High Alarm EU (parameter #17). If clear, the EU Value (parameter #12) is less than the High High Alarm EU (parameter #17).'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Rate Alarm',
                    bit_desc='If set, the EU Value (parameter #12) change from last Scan Period to the new Scan Period is greater than or equal to the Rate Alarm EU (parameter #18). If clear, the EU Value (parameter #12) change from last Scan Period to the new Scan Period is less than the Rate Alarm EU (parameter #18).'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Point Fail Alarm',
                    bit_desc='If set, the System Als hardware is reporting a malfunction. If clear, the System Als hardware is operating properly.'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Scanning Disabled Alarm',
                    bit_desc='If set, the Scanning (parameter #2) has been disabled. If clear, the Scanning (parameter #2) has been enabled.'
                )
            ]
        )
        """
        Alarm Code
        """

        UNITS = PointTypeParameter(
            parameter_number=24,
            parameter_name='Units',
            parameter_desc='Indicates the EUP value units: Valid values are For Logic 0 3,0 (Volts) and 1 (milliVolts) For Logic 4: 0 °F 1 °C 2 °K 3 °R.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='Logic 0 -> 3: 0 -> 1 Logic 4: 0 3'
        )
        """
        Indicates the EUP value units: Valid values are For Logic 0 3,0 (Volts) and 1 (milliVolts) For Logic 4: 0 °F 1 °C 2 °K 3 °R.
        """





class PID(PointType):
    """PID Control Parameters"""

    point_type_number: int = 110
    """Point Type ID"""

    point_type_desc: str = 'PID Control Parameters'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Identification name for specific PID. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Identification name for specific PID. Values must be printable ASCII characters.
        """

        PID_MODE = PointTypeParameter(
            parameter_number=1,
            parameter_name='PID Mode',
            parameter_desc='Indicates whether the PID mode. Valid values are: 0 = PID Disabled 1 = Manual 2 = Automatic 3 = Remote Setpoint',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 -> 3'
        )
        """
        Indicates whether the PID mode. Valid values are: 0 = PID Disabled 1 = Manual 2 = Automatic 3 = Remote Setpoint
        """

        LOOP_PERIOD = PointTypeParameter(
            parameter_number=2,
            parameter_name='Loop Period',
            parameter_desc='Desired frequency of execution of the PID algorithm in seconds.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.05 Any positive valid IEEE 754 float'
        )
        """
        Desired frequency of execution of the PID algorithm in seconds.
        """

        ACTUAL_LOOP_PERIOD = PointTypeParameter(
            parameter_number=3,
            parameter_name='Actual Loop Period',
            parameter_desc='Actual frequency of execution of the PID algorithm in seconds.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.05 Any positive valid IEEE 754 float'
        )
        """
        Actual frequency of execution of the PID algorithm in seconds.
        """

        ACTION_ON_PROCESS_VARIABLE_FAILURE_RESERVED_ = PointTypeParameter(
            parameter_number=4,
            parameter_name='Action on Process Variable Failure (Reserved)',
            parameter_desc='Indicates what action to take if the process variable has questionable data. Valid values are 0 (No action) and 1 (Switch mode to manual).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Indicates what action to take if the process variable has questionable data. Valid values are 0 (No action) and 1 (Switch mode to manual).
        """

        DISCRETE_OUTPUT_TYPE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Discrete Output Type',
            parameter_desc='Indicates what type of outputs is written to the control device. Valid values are: 0 = Analog 1 = Discrete (Open/Close outputs to a motor operated valve) 2 = Digital Valve Note: Option 2 is available only in firmward version 3.02 or greater.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        Indicates what type of outputs is written to the control device. Valid values are: 0 = Analog 1 = Discrete (Open/Close outputs to a motor operated valve) 2 =
        Digital Valve Note: Option 2 is available only in firmward version 3.02 or greater.
        """

        RESET_MODE = PointTypeParameter(
            parameter_number=6,
            parameter_name='Reset Mode',
            parameter_desc='Indicates whether the PID is disabled on a restart of any kind or retain its last mode. Valid values are 0 (Retain last mode) and 1 (Disable after Reset).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether the PID is disabled on a restart of any kind or retain its last mode. Valid values are 0 (Retain last mode) and 1 (Disable after Reset).
        """

        MANUAL_TRACKING = PointTypeParameter(
            parameter_number=7,
            parameter_name='Manual Tracking',
            parameter_desc='If in Manual Mode, the Primary Setpoint is set equal to the current Primary Process Variable. If disabled, nothing occurs. Valid values are 0 (Disable Manual Tracking) and 1 (Enable Manual Tracking).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 1'
        )
        """
        If in Manual Mode, the Primary Setpoint is set equal to the current Primary Process Variable. If disabled, nothing occurs. Valid values are 0 (Disable Manual
        Tracking) and 1 (Enable Manual Tracking).
        """

        PRIMARY_INPUT_POINT = PointTypeParameter(
            parameter_number=8,
            parameter_name='Primary Input Point',
            parameter_desc='The parameter assigned to read the Primary Process Variable (parameter #9) from.',
            data_type=dt.TLP,
            access='R/W',
            value_range='TLP 0,0,0 and TLP 60-77, 0->255, 0-255 (must be float) and TLP 103,5-148,21 and TLP 105,5-148,10 or 13 and TLP 96,0->5,2->11and TLP 98,0->31,1-20 and TLP 108,0-11,19-20 or 35 or 50 and TLP 106,5-148,22 and TLP 107,5-148,9 and TLP 112,0->11,53->44 and TLP 113,0-11,26 or 28 or 30 and 114,0-11,0->3 and TLP 115,0-11,14 or 16 or 18 and TLP 116,0-11,0->3'
        )
        """
        The parameter assigned to read the Primary Process Variable (parameter #9) from.
        """

        PRIMARY_PROCESS_VARIABLE = PointTypeParameter(
            parameter_number=9,
            parameter_name='Primary Process Variable',
            parameter_desc='Input value for the Primary Loop.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Input value for the Primary Loop.
        """

        PRIMARY_SETPOINT_POINT = PointTypeParameter(
            parameter_number=10,
            parameter_name='Primary Setpoint Point',
            parameter_desc='The parameter assigned to read the primary setpoint (parameter #11) from.',
            data_type=dt.TLP,
            access='R/W',
            value_range='TLP 0,0,0 and TLP 60-77, 0->255, 0->255 (must be float) and TLP 103,5-148,21 and TLP 105,5-148,10 or 13 and TLP and TLP 98,0->31,1-20 and TLP 108,0-11,19->20 or 35 or 50 and TLP 106,5-148,22 and TLP 107,5-148,14 and TLP 112,0->11,53->44 and TLP 114,0-11,0->3 and TLP 116,0-11,0->3'
        )
        """
        The parameter assigned to read the primary setpoint (parameter #11) from.
        """

        PRIMARY_SETPOINT = PointTypeParameter(
            parameter_number=11,
            parameter_name='Primary Setpoint',
            parameter_desc='Desired value of the Primary Process Variable (parameter #9).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Desired value of the Primary Process Variable (parameter #9).
        """

        PRIMARY_SETPOINT_LOW_LIMIT = PointTypeParameter(
            parameter_number=12,
            parameter_name='Primary Setpoint Low Limit',
            parameter_desc='Lowest allowed value for the primary setpoint (parameter #11).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Lowest allowed value for the primary setpoint (parameter #11).
        """

        PRIMARY_SETPOINT_HIGH_LIMIT = PointTypeParameter(
            parameter_number=13,
            parameter_name='Primary Setpoint High Limit',
            parameter_desc='Highest allowed value for the primary setpoint (parameter #11).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Highest allowed value for the primary setpoint (parameter #11).
        """

        PRIMARY_SETPOINT_MAXIMUM_CHANGE_RATE = PointTypeParameter(
            parameter_number=14,
            parameter_name='Primary Setpoint Maximum Change Rate',
            parameter_desc='Maximum rate of change allowed for the actual setpoint used by the Primary Loop in engineering units per minute (EU/minute). A value of 0 disables this option.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any positive valid IEEE 754 float'
        )
        """
        Maximum rate of change allowed for the actual setpoint used by the Primary Loop in engineering units per minute (EU/minute). A value of 0 disables this option.
        """

        PRIMARY_PROPORTIONAL_GAIN = PointTypeParameter(
            parameter_number=15,
            parameter_name='Primary Proportional Gain',
            parameter_desc='Proportional gain (Kp) of the Primary Loop.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any positive valid IEEE 754 float'
        )
        """
        Proportional gain (Kp) of the Primary Loop.
        """

        PRIMARY_INTEGRAL_GAIN = PointTypeParameter(
            parameter_number=16,
            parameter_name='Primary Integral Gain',
            parameter_desc='Integral gain (K1) of the Primary Loop.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any positive valid IEEE 754 float'
        )
        """
        Integral gain (K1) of the Primary Loop.
        """

        PRIMARY_DERIVATIVE_GAIN = PointTypeParameter(
            parameter_number=17,
            parameter_name='Primary Derivative Gain',
            parameter_desc='Derivative gain (Kp) of the Primary Loop.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any positive valid IEEE 754 float'
        )
        """
        Derivative gain (Kp) of the Primary Loop.
        """

        PRIMARY_SCALE_FACTOR = PointTypeParameter(
            parameter_number=18,
            parameter_name='Primary Scale Factor',
            parameter_desc='Scale factor (Fs) of the Primary Loop.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Scale factor (Fs) of the Primary Loop.
        """

        PRIMARY_INTEGRAL_DEADBAND = PointTypeParameter(
            parameter_number=19,
            parameter_name='Primary Integral Deadband',
            parameter_desc='Range (+) that the error at time t (et) must be greater than or equal to for the Primary Loop to include the K1 term for the change in output calculation.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Range (+) that the error at time t (et) must be greater than or equal to for the Primary Loop to include the K1 term for the change in output calculation.
        """

        PRIMARY_CHANGE_IN_OUTPUT = PointTypeParameter(
            parameter_number=20,
            parameter_name='Primary Change in Output',
            parameter_desc='Calculated change in output from the Primary Loop.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Calculated change in output from the Primary Loop.
        """

        OVERRIDE_LOOP_MODE = PointTypeParameter(
            parameter_number=21,
            parameter_name='Override Loop Mode',
            parameter_desc='Indicates which loops have been enabled for control. Valid values are: 0 = Primary Loop Only 1 = Primary and Override Loop 2 = Override Loop Only.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        Indicates which loops have been enabled for control. Valid values are: 0 = Primary Loop Only 1 = Primary and Override Loop 2 = Override Loop Only.
        """

        LOOP_SWITCH_SELECT = PointTypeParameter(
            parameter_number=22,
            parameter_name='Loop Switch Select',
            parameter_desc='Indicates when to switch to the Override Loop based upon whether the Primary change in output is less than or greater than the Override change in output. Valid values are 0 (Low Override) and 1 (High Override).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates when to switch to the Override Loop based upon whether the Primary change in output is less than or greater than the Override change in output. Valid
        values are 0 (Low Override) and 1 (High Override).
        """

        OVERRIDE_INPUT_POINT = PointTypeParameter(
            parameter_number=23,
            parameter_name='Override Input Point',
            parameter_desc='The parameter assigned to read the Override Process Variable (parameter #24) from.',
            data_type=dt.TLP,
            access='R/W',
            value_range='TLP 0,0,0 and TLP 60-77, 0-255, 0-255 (must be float) and TLP 103,5-148,21 and TLP 105,5-148,10 or 13 and TLP 96,0->5,2->11a and TLP 98,0-31,1-20 and TLP 108,0->11,19->20 or 35 or 50 and TLP 106,5-148,22 and TLP 107,5-148,9 and TLP 112,0->11,53->54 and TLP 113,0-11,26 or 28 or 30 and 114,0-11,0->3 and TLP 115,0-11,14 or 16 or 18 and TLP 116,0-11,0-'
        )
        """
        The parameter assigned to read the Override Process Variable (parameter #24) from.
        """

        OVERRIDE_PROCESS_VARIABLE = PointTypeParameter(
            parameter_number=24,
            parameter_name='Override Process Variable',
            parameter_desc='Input value for the Override Loop.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Input value for the Override Loop.
        """

        OVERRIDE_SETPOINT_POINT = PointTypeParameter(
            parameter_number=25,
            parameter_name='Override Setpoint Point',
            parameter_desc='The parameter assigned to read the override setpoint (parameter #26) from.',
            data_type=dt.TLP,
            access='R/W',
            value_range='TLP 0,0,0 and TLP 60-77, 0->255, 0-255 (must be float) and TLP 103,5-148,21 and TLP 105,5-148,10 or 13 and TLP 96,0->5,2-11and TLP 98,0->31,1-20 and TLP 108,0-11,19->20 or 35 or 50 and TLP 106,5-148,22 and TLP 107,5-148,14 and TLP 112,0->11,53->44 and TLP 114,0-11,0->3 and TLP 116,0-11,0 0->3'
        )
        """
        The parameter assigned to read the override setpoint (parameter #26) from.
        """

        OVERRIDE_SETPOINT = PointTypeParameter(
            parameter_number=26,
            parameter_name='Override Setpoint',
            parameter_desc='Desired value of the Override Process Variable (parameter #24).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Desired value of the Override Process Variable (parameter #24).
        """

        OVERRIDE_SETPOINT_LOW_LIMIT = PointTypeParameter(
            parameter_number=27,
            parameter_name='Override Setpoint Low Limit',
            parameter_desc='Lowest allowed value for the override setpoint (parameter #26).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Lowest allowed value for the override setpoint (parameter #26).
        """

        OVERRIDE_SETPOINT_HIGH_LIMIT = PointTypeParameter(
            parameter_number=28,
            parameter_name='Override Setpoint High Limit',
            parameter_desc='Highest allowed value for the override setpoint (parameter #26).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Highest allowed value for the override setpoint (parameter #26).
        """

        OVERRIDE_SETPOINT_MAXIMUM_CHANGE_RATE = PointTypeParameter(
            parameter_number=29,
            parameter_name='Override Setpoint Maximum Change Rate',
            parameter_desc='Maximum rate of change allowed for the actual setpoint used by the Override Loop in engineering units per minute (EU/minute).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any positive valid IEEE 754 float'
        )
        """
        Maximum rate of change allowed for the actual setpoint used by the Override Loop in engineering units per minute (EU/minute).
        """

        OVERRIDE_PROPORTIONAL_GAIN = PointTypeParameter(
            parameter_number=30,
            parameter_name='Override Proportional Gain',
            parameter_desc='Proportional gain (Kp) of the Override Loop.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any positive valid IEEE 754 float'
        )
        """
        Proportional gain (Kp) of the Override Loop.
        """

        OVERRIDE_INTEGRAL_GAIN = PointTypeParameter(
            parameter_number=31,
            parameter_name='Override Integral Gain',
            parameter_desc='Integral gain (K1) of the Override Loop.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any positive valid IEEE 754 float'
        )
        """
        Integral gain (K1) of the Override Loop.
        """

        OVERRIDE_DERIVATIVE_GAIN = PointTypeParameter(
            parameter_number=32,
            parameter_name='Override Derivative Gain',
            parameter_desc='Derivative gain (KD) of the Override Loop.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any positive valid IEEE 754 float'
        )
        """
        Derivative gain (KD) of the Override Loop.
        """

        OVERRIDE_SCALE_FACTOR = PointTypeParameter(
            parameter_number=33,
            parameter_name='Override Scale Factor',
            parameter_desc='Scale factor (Fs) of the Override Loop.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Scale factor (Fs) of the Override Loop.
        """

        OVERRIDE_INTEGRAL_DEADBAND = PointTypeParameter(
            parameter_number=34,
            parameter_name='Override Integral Deadband',
            parameter_desc='Range (+) that the error at time t (et) must be greater than or equal to for the Override Loop to include the K term for the change in output calculation.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Range (+) that the error at time t (et) must be greater than or equal to for the Override Loop to include the K term for the change in output calculation.
        """

        OVERRIDE_CHANGE_IN_OUTPUT = PointTypeParameter(
            parameter_number=35,
            parameter_name='Override Change in Output',
            parameter_desc='Calculated change in output from the Override Loop.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Calculated change in output from the Override Loop.
        """

        SWITCH_STATUS = PointTypeParameter(
            parameter_number=36,
            parameter_name='Switch Status',
            parameter_desc='Indicates what loop is currently being used to control the process variable. Valid values are: 0 = Neither 1 = Primary Loop 2 = Override Loop.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-2'
        )
        """
        Indicates what loop is currently being used to control the process variable. Valid values are: 0 = Neither 1 = Primary Loop 2 = Override Loop.
        """

        CURRENT_OUTPUT_OF_PID = PointTypeParameter(
            parameter_number=37,
            parameter_name='Current Output of PID',
            parameter_desc='Value that is sent to current output.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value that is sent to current output.
        """

        OUTPUT_OF_PID_POINT = PointTypeParameter(
            parameter_number=38,
            parameter_name='Output of PID point',
            parameter_desc='The parameter assigned to write the analog control output of the PID loop to. Note: Used only if DO Control (parameter #5) is Off.',
            data_type=dt.TLP,
            access='R/W',
            value_range='TLP 0,0,0 and {if DO Control Off TLP 104,5-148,12 and TLP 96,0->,5-211 and TLP 98,0->31,1-20 and TLP 60-77, 0->255, 0->255 (must be float)}'
        )
        """
        The parameter assigned to write the analog control output of the PID loop to. Note: Used only if DO Control (parameter #5) is Off.
        """

        DISCRETE_OPEN_PID_OUTPUT = PointTypeParameter(
            parameter_number=39,
            parameter_name='Discrete Open PID output',
            parameter_desc='The parameter assigned to write the increase/open output to. Note: Used only if DO Control (parameter #5) is On.',
            data_type=dt.TLP,
            access='R/W',
            value_range='TLP 0,0,0 and {if DO Control On TLP 102,5-148,20 and TLP 96,0->5,2->11 and TLP 98,0->31,1-20 and TLP 60-77, 0-255, 0->255 (must be float) }'
        )
        """
        The parameter assigned to write the increase/open output to. Note: Used only if DO Control (parameter #5) is On.
        """

        DISCRETE_CLOSE_PID_OUTPUT = PointTypeParameter(
            parameter_number=40,
            parameter_name='Discrete Close PID output',
            parameter_desc='The parameter assigned to write the decrease/closed output to. Note: Used only if DO Control (parameter #5) is On.',
            data_type=dt.TLP,
            access='R/W',
            value_range='TLP 0,0,0 and {if DO Control On TLP 102,5-148,20 and TLP 96,0->,5-2-11 and TLP 98,0->31,1-20 and TLP 60-77, 0->255, 0-255 (must be float) }'
        )
        """
        The parameter assigned to write the decrease/closed output to. Note: Used only if DO Control (parameter #5) is On.
        """

        OUTPUT_LOW_LIMIT = PointTypeParameter(
            parameter_number=41,
            parameter_name='Output Low Limit',
            parameter_desc='Minimum allowable PID output. If the change in output calculated by the loop would cause the current value of the output to go below this value, the output is set to this value.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum allowable PID output. If the change in output calculated by the loop would cause the current value of the output to go below this value, the output is
        set to this value.
        """

        OUTPUT_HIGH_LIMIT = PointTypeParameter(
            parameter_number=42,
            parameter_name='Output High Limit',
            parameter_desc='Maximum allowable PID output. If the change in output calculated by the loop would cause the current value of the output to go above this value, the output is set to this value.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum allowable PID output. If the change in output calculated by the loop would cause the current value of the output to go above this value, the output is
        set to this value.
        """

        OUTPUT_LOW_LIMIT_STATUS = PointTypeParameter(
            parameter_number=43,
            parameter_name='Output Low Limit Status',
            parameter_desc='Indication that the output of the PID loop has been clipped by the low output limit. Vaid values are 0 (Not limited) and 1 (Low output limited).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Indication that the output of the PID loop has been clipped by the low output limit. Vaid values are 0 (Not limited) and 1 (Low output limited).
        """

        OUTPUT_HIGH_LIMIT_STATUS = PointTypeParameter(
            parameter_number=44,
            parameter_name='Output High Limit Status',
            parameter_desc='Indication that the output of the PID loop has been clipped by the high output limit. Valid values are 0 (Not limited) and 1 (High output limited).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Indication that the output of the PID loop has been clipped by the high output limit. Valid values are 0 (Not limited) and 1 (High output limited).
        """

        PRIMARY_PROCESS_VARIABLE_STATUS = PointTypeParameter(
            parameter_number=45,
            parameter_name='Primary Process Variable Status',
            parameter_desc='Indication of the status of the primary process variable. Valid values are: 0 = No error 1 = Questionable data 2 = Invalid TLP.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-2'
        )
        """
        Indication of the status of the primary process variable. Valid values are: 0 = No error 1 = Questionable data 2 = Invalid TLP.
        """

        PRIMARY_SETPOINT_LOW_LIMIT_STATUS = PointTypeParameter(
            parameter_number=46,
            parameter_name='Primary Setpoint Low Limit Status',
            parameter_desc='Indication that the primary setpoint has been clipped by the low setpoint limit. Valid values are 0 (Not limited) and 1 (Low setpoint limited).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Indication that the primary setpoint has been clipped by the low setpoint limit. Valid values are 0 (Not limited) and 1 (Low setpoint limited).
        """

        PRIMARY_SETPOINT_HIGH_LIMIT_STATUS = PointTypeParameter(
            parameter_number=47,
            parameter_name='Primary Setpoint High Limit Status',
            parameter_desc='Indication that the primary setpoint has been clipped by the high setpoint limit. Valid values are 0 (Not limited) and 1 (High setpoint limited).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Indication that the primary setpoint has been clipped by the high setpoint limit. Valid values are 0 (Not limited) and 1 (High setpoint limited).
        """

        PRIMARY_SETPOINT_RATE_LIMITED = PointTypeParameter(
            parameter_number=48,
            parameter_name='Primary Setpoint Rate Limited',
            parameter_desc='Indication that the primary setpoint currently being used by the PID calculation is currently being limited by the maximum setpoint change rate (parameter #14).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Indication that the primary setpoint currently being used by the PID calculation is currently being limited by the maximum setpoint change rate (parameter #14).
        """

        OVERRIDE_PROCESS_VARIABLE_STATUS = PointTypeParameter(
            parameter_number=49,
            parameter_name='Override Process Variable Status',
            parameter_desc='Indication of the status of the override process variable. Valid values are: 0 = No error 1 = Questionable data 2 = Invalid TLP.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-2'
        )
        """
        Indication of the status of the override process variable. Valid values are: 0 = No error 1 = Questionable data 2 = Invalid TLP.
        """

        OVERRIDE_SETPOINT_LOW_LIMIT_STATUS = PointTypeParameter(
            parameter_number=50,
            parameter_name='Override Setpoint Low Limit Status',
            parameter_desc='Indication that the override setpoint has been clipped by the low setpoint limit. Valid values are 0 (Not limited) and 1 (Low setpoint limited).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-> 1'
        )
        """
        Indication that the override setpoint has been clipped by the low setpoint limit. Valid values are 0 (Not limited) and 1 (Low setpoint limited).
        """

        OVERRIDE_SETPOINT_HIGH_LIMIT_STATUS = PointTypeParameter(
            parameter_number=51,
            parameter_name='Override Setpoint High Limit Status',
            parameter_desc='Indication that the override setpoint has been clipped by the high setpoint limit. Valid values are 0 (Not limited) and 1 (High setpoint limited).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Indication that the override setpoint has been clipped by the high setpoint limit. Valid values are 0 (Not limited) and 1 (High setpoint limited).
        """

        OVERRIDE_SETPOINT_RATE_LIMITED = PointTypeParameter(
            parameter_number=52,
            parameter_name='Override Setpoint Rate Limited',
            parameter_desc='Indication that the override setpoint currently being used by the PID calculation is currently being limited by the maximum setpoint change rate (parameter #29).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Indication that the override setpoint currently being used by the PID calculation is currently being limited by the maximum setpoint change rate (parameter
        #29).
        """

        OVERRIDE_THRESHOLD_VALUE = PointTypeParameter(
            parameter_number=53,
            parameter_name='Override Threshold Value',
            parameter_desc='The override function takes control only if the override process variable is within the threshold value of the override setpoint.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any positive valid IEEE 754 float'
        )
        """
        The override function takes control only if the override process variable is within the threshold value of the override setpoint.
        """

        ACTION_WAIT_TIME = PointTypeParameter(
            parameter_number=54,
            parameter_name='Action Wait Time',
            parameter_desc='When taking an action, this amount of time, in seconds, is added to make sure the process returns to a steady state before a new action is taken. Note: Used only if Brooks Control (parameter #5) is selected.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any positive valid IEEE 754 float'
        )
        """
        When taking an action, this amount of time, in seconds, is added to make sure the process returns to a steady state before a new action is taken. Note: Used
        only if Brooks Control (parameter #5) is selected.
        """

        UPSTREAM_OUTPUT_POINT = PointTypeParameter(
            parameter_number=55,
            parameter_name='Upstream Output Point',
            parameter_desc='The parameter assigned to the upstream output. Only valid outputs are AC I/O, EU TLP, and DO EU TLP. Note: Used only if Brooks Control (parameter #5) is selected.',
            data_type=dt.TLP,
            access='R/W',
            value_range='TLP 0,0,0 TLP 140, X, 37 TLP 102, X, 20'
        )
        """
        The parameter assigned to the upstream output. Only valid outputs are AC I/O, EU TLP, and DO EU TLP. Note: Used only if Brooks Control (parameter #5) is
        selected.
        """

        DOWNSTREAM_OUTPUT_POINT = PointTypeParameter(
            parameter_number=56,
            parameter_name='Downstream Output Point',
            parameter_desc='The parameter assigned to write the downstream output to. Only valid outputs are AC I/O EU TLP and DO EU TLP. Note: Used only if Brooks Control (parameter #5) is selected.',
            data_type=dt.TLP,
            access='R/W',
            value_range='TLP 0,0,0 TLP 140, X, 37 TLP 102, X, 20'
        )
        """
        The parameter assigned to write the downstream output to. Only valid outputs are AC I/O EU TLP and DO EU TLP. Note: Used only if Brooks Control (parameter #5)
        is selected.
        """

        VALVE_DEAD_TIME = PointTypeParameter(
            parameter_number=57,
            parameter_name='Valve Dead Time',
            parameter_desc='The amount of time, in seconds, added to every TDO EU value passed to the AC I/O to account for extra time to break valve seal. Note: Used only if Brooks Control (parameter #5) is selected.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any positive valid IEEE 754 float'
        )
        """
        The amount of time, in seconds, added to every TDO EU value passed to the AC I/O to account for extra time to break valve seal. Note: Used only if Brooks
        Control (parameter #5) is selected.
        """





class SAMPLER_ODORIZER_PARAMETERS(PointType):
    """Sampler/Odorizer Parameters"""

    point_type_number: int = 111
    """Point Type ID"""

    point_type_desc: str = 'Sampler/Odorizer Parameters'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        MODE = PointTypeParameter(
            parameter_number=0,
            parameter_name='Mode',
            parameter_desc='Indicates whether a sampler or odorizer is being used. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether a sampler or odorizer is being used. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        INPUT_RATE_TLP = PointTypeParameter(
            parameter_number=1,
            parameter_name='Input Rate TLP',
            parameter_desc='Rate input being used for sampler or odorizer.',
            data_type=dt.TLP,
            access='R/W',
            value_range='TLP 0,0,0 and TLP 60-77, 0->255, 0->255 (must be float) and TLP 112,0-11,53->44 and TLP 114,0-11,0->3 and TLP 116,0-11,0->3 and TLP 98,0->1,1->20 and TLP 96,0->,5-211 and TLP 103,5-148,21 and TLP 105,5-148,10 or 13'
        )
        """
        Rate input being used for sampler or odorizer.
        """

        INPUT_RATE_VALUE = PointTypeParameter(
            parameter_number=2,
            parameter_name='Input Rate Value',
            parameter_desc='Rate input value.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Rate input value.
        """

        TIME_BASIS_FOR_RATE = PointTypeParameter(
            parameter_number=3,
            parameter_name='Time Basis for Rate',
            parameter_desc='States the rate for the input value. Valid values are: 0 = Per Second 1 = Per Minute 2 = Per Hour 3 = Per Day.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-3'
        )
        """
        States the rate for the input value. Valid values are: 0 = Per Second 1 = Per Minute 2 = Per Hour 3 = Per Day.
        """

        UNIT_ACCUMULATION = PointTypeParameter(
            parameter_number=4,
            parameter_name='Unit Accumulation',
            parameter_desc='Amount of units allowed past before activating sampler or odorizer.',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0 Any positive valid IEEE 754 float'
        )
        """
        Amount of units allowed past before activating sampler or odorizer.
        """

        DURATION = PointTypeParameter(
            parameter_number=5,
            parameter_name='Duration',
            parameter_desc='Amount of time, in seconds, for sampler to collect gas or odorizer to inject odor.',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0 43,200.0'
        )
        """
        Amount of time, in seconds, for sampler to collect gas or odorizer to inject odor.
        """

        OUTPUT_TLP = PointTypeParameter(
            parameter_number=6,
            parameter_name='Output TLP',
            parameter_desc='Indicates what DO is being used to control a sampler or odorizer.',
            data_type=dt.TLP,
            access='R/W',
            value_range='TLP 0,0,0 and TLP 102,5-148,10'
        )
        """
        Indicates what DO is being used to control a sampler or odorizer.
        """





class STATION_PARAMETERS(PointType):
    """Station Parameters"""

    point_type_number: int = 112
    """Point Type ID"""

    point_type_desc: str = 'Station Parameters'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Identification name for specific station. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Identification name for specific station. Values must be printable ASCII characters.
        """

        CALCULATION_STANDARD = PointTypeParameter(
            parameter_number=1,
            parameter_name='Calculation Standard',
            parameter_desc='Series 1: Indicates what calculation standard is used to calculate the stations meter runs. Valid values are: 0 = AGA3/AGA7 (Gas) 1 = ISO5167/ISO9951 (Gas) 2 = ISO5167/API Chapter 12 (Liquid).; Series 2: Indicates what calculation standard is used to calculate the stations meter runs. Valid values are: 0 = AGA3/AGA7 (Gas) 1 = ISO5167-98/ISO9951(Gas) 2 = ISO5167-98/API Chapter 12 (Liquid) 3 = ISO5167-2003/ISO9951(Gas) 4 = AGA3/AGA7 2012 (Gas) (Ver 3.60)',
            data_type=dt.UINT8,
            access='R/W',
            value_range='Series 1: 0 2; Series 2: 0 3 0-> 4 (Ver 3.60)'
        )
        """
        Series 1: Indicates what calculation standard is used to calculate the stations meter runs. Valid values are: 0 = AGA3/AGA7 (Gas) 1 = ISO5167/ISO9951 (Gas) 2 =
        ISO5167/API Chapter 12 (Liquid).; Series 2: Indicates what calculation standard is used to calculate the stations meter runs. Valid values are: 0 = AGA3/AGA7
        (Gas) 1 = ISO5167-98/ISO9951(Gas) 2 = ISO5167-98/API Chapter 12 (Liquid) 3 = ISO5167-2003/ISO9951(Gas) 4 = AGA3/AGA7 2012 (Gas) (Ver 3.60)
        """

        EDITION_OF_CALCULATIONS = PointTypeParameter(
            parameter_number=2,
            parameter_name='Edition of Calculations',
            parameter_desc='Indicates what edition of the meter run calculations the program uses. Valid values are: 0 = 1992 Edition 1 = 2012 Edition (Ver. 3.60) Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992). 1',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0 1 (Ver 3.60)'
        )
        """
        Indicates what edition of the meter run calculations the program uses. Valid values are: 0 = 1992 Edition 1 = 2012 Edition (Ver. 3.60) Note: Refer to ANSI/API
        2530-92 (AGA Report No. 3 1992). 1
        """

        COMPRESSIBILITY_CALCULATION = PointTypeParameter(
            parameter_number=3,
            parameter_name='Compressibility Calculation',
            parameter_desc='Indicates what method to use to calculate the compressibility of natural gas and other related hydrocarbons. Value values are: 0 = AGA Report #8 Detail Method 1 = AGA Report #8 Gross Method #1, 2 = AGA Report #8 Gross Method #2 3 = User Method (compressibility and density values will be R/W).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0->: 3'
        )
        """
        Indicates what method to use to calculate the compressibility of natural gas and other related hydrocarbons. Value values are: 0 = AGA Report #8 Detail Method 1
        = AGA Report #8 Gross Method #1, 2 = AGA Report #8 Gross Method #2 3 = User Method (compressibility and density values will be R/W).
        """

        UNITS = PointTypeParameter(
            parameter_number=4,
            parameter_name='Units',
            parameter_desc='Indicates the engineering units used for the process variables, inputs, and calculations. Valid values are: 0 = English Units 1 = Metric Units with kPa 2 = Metric Units with DP in mbar and pressure in bar.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        Indicates the engineering units used for the process variables, inputs, and calculations. Valid values are: 0 = English Units 1 = Metric Units with kPa 2 =
        Metric Units with DP in mbar and pressure in bar.
        """

        ALARMING = PointTypeParameter(
            parameter_number=5,
            parameter_name='Alarming',
            parameter_desc='If enabled, alarms may be generated and sent to the Alarm Log. Valid values are: 0 = Disabled, 1 = Alarm on Corrected Volume / Day, 2 = Alarm on Mass / Day. Option 2 was added in firmware version 1.52.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        If enabled, alarms may be generated and sent to the Alarm Log. Valid values are: 0 = Disabled, 1 = Alarm on Corrected Volume / Day, 2 = Alarm on Mass / Day.
        Option 2 was added in firmware version 1.52.
        """

        SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=6,
            parameter_name='SRBX on Clear',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).
        """

        SRBX_ON_SET = PointTypeParameter(
            parameter_number=7,
            parameter_name='SRBX on Set',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).
        """

        ALARM_CODE = PointTypeParameterBinary(
            parameter_number=8,
            parameter_name='Alarm Code',
            parameter_desc='Alarm Code',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Low Alarm',
                    bit_desc='This alarm is set if the Flow Rate per Day (parameter #53) is less than or equal to the Low Alarm Flow (parameter #9). This alarm is cleared if the Flow Rate per Day (parameter #53) is greater than the Low Alarm Flow (parameter #9) plus the alarm deadband (parameter #11).'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='High Alarm',
                    bit_desc='This alarm is set if the Flow Rate per Day (parameter #53) is greater than or equal to the High Alarm Flow (parameter #10). This alarm clears if the Flow Rate per Day (parameter #53) is less than the High Alarm Flow (parameter #10) minus the alarm deadband (parameter #11).'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Zb Calc Alarm',
                    bit_desc='This alarm is set if the base temperature, base pressure, and composition values do not allow a valid base compressibility calculation. If condition occurs, the value of Zb is set to 1.0.'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='No Flow Alarm',
                    bit_desc='If set, then no flow conditions are present and the Flow Rate per Day (parameter #53) is zero. If clear, then flowing conditions exist and the Flow Rate per Day (parameter #53) is not zero.'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                )
            ]
        )
        """
        Alarm Code
        """

        LOW_ALARM_FLOW = PointTypeParameter(
            parameter_number=9,
            parameter_name='Low Alarm Flow',
            parameter_desc='Alarm value for Low Alarm in mft3/day or km3/day.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Low Alarm in mft3/day or km3/day.
        """

        HIGH_ALARM_FLOW = PointTypeParameter(
            parameter_number=10,
            parameter_name='High Alarm Flow',
            parameter_desc='Alarm value for High Alarm in mft3/day or km3/day.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for High Alarm in mft3/day or km3/day.
        """

        ALARM_DEADBAND = PointTypeParameter(
            parameter_number=11,
            parameter_name='Alarm Deadband',
            parameter_desc='The value that the Flow Rate Per Day (parameter #53) must be above the low alarm value (parameter #9) or below the high alarm value (parameter #10) before the associated alarm will clear.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        The value that the Flow Rate Per Day (parameter #53) must be above the low alarm value (parameter #9) or below the high alarm value (parameter #10) before the
        associated alarm will clear.
        """

        HISTORY_SEGMENT = PointTypeParameter(
            parameter_number=12,
            parameter_name='History Segment',
            parameter_desc='The history segment that the station uses for storing history. Valid values are 0 (No history stored) and values 1 10 (Use indicated history segment).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-10'
        )
        """
        The history segment that the station uses for storing history. Valid values are 0 (No history stored) and values 1 10 (Use indicated history segment).
        """

        BASE_OR_CONTRACT_PRESSURE = PointTypeParameter(
            parameter_number=13,
            parameter_name='Base or Contract Pressure',
            parameter_desc='Used to correct the standard volume flow rate to the base volume flow rate. Entered in PSI (lb/in²), kPa, or bar. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='> 0.0 40,000 PSI (275,790.3 kPa)'
        )
        """
        Used to correct the standard volume flow rate to the base volume flow rate. Entered in PSI (lb/in²), kPa, or bar. Note: Refer to ANSI/API 2530-92 (AGA Report
        No. 3 1992).
        """

        BASE_OR_CONTRACT_TEMPERATURE = PointTypeParameter(
            parameter_number=14,
            parameter_name='Base or Contract Temperature',
            parameter_desc='Used to correct the standard volume flow rate to the base volume flow rate. Entered in °F or °C. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='>= -200 Deg F (-128.9 Deg C) 760 Deg F (404.4 Deg C)'
        )
        """
        Used to correct the standard volume flow rate to the base volume flow rate. Entered in °F or °C. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        ATMOSPHERIC_PRESSURE_OPTION = PointTypeParameter(
            parameter_number=15,
            parameter_name='Atmospheric Pressure Option',
            parameter_desc='Indicates whether to calculate the atmospheric pressure or use the entered value. Valid values are 0 (Calculate Atmospheric Pressure) and 1 (Use Entered Atmospheric Pressure).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether to calculate the atmospheric pressure or use the entered value. Valid values are 0 (Calculate Atmospheric Pressure) and 1 (Use Entered
        Atmospheric Pressure).
        """

        ATMOSPHERIC_PRESSURE = PointTypeParameter(
            parameter_number=16,
            parameter_name='Atmospheric Pressure',
            parameter_desc='Amount of pressure in PSI (lb/in²), kPa, or bar that is added to the static pressure to calculate an absolute pressure from a gauge pressure. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='> 0 40,000 PSI (275,790.3 kPa)'
        )
        """
        Amount of pressure in PSI (lb/in²), kPa, or bar that is added to the static pressure to calculate an absolute pressure from a gauge pressure. Note: Refer to
        ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        GRAVITY_OPTION = PointTypeParameter(
            parameter_number=17,
            parameter_name='Gravity Option',
            parameter_desc='Indicates whether to calculate the gravity or use the entered value. Valid values are 0 (Calculate Gravity) and 1 (Use Entered Gravity).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether to calculate the gravity or use the entered value. Valid values are 0 (Calculate Gravity) and 1 (Use Entered Gravity).
        """

        LOCAL_GRAVITATIONAL_ACCELERATION = PointTypeParameter(
            parameter_number=18,
            parameter_name='Local Gravitational Acceleration',
            parameter_desc='Local value of gravity at the station in ft/sec2 or m/sec2. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Local value of gravity at the station in ft/sec2 or m/sec2. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        ELEVATION = PointTypeParameter(
            parameter_number=19,
            parameter_name='Elevation',
            parameter_desc='Distance from sea level in feet or meters for the station. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='>= -2000 ft (-609.6 m) 29200 ft (8,900.2 m)'
        )
        """
        Distance from sea level in feet or meters for the station. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        LATITUDE = PointTypeParameter(
            parameter_number=20,
            parameter_name='Latitude',
            parameter_desc='Latitude of station in degrees. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 90.0'
        )
        """
        Latitude of station in degrees. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        HEATING_VALUE_TYPE = PointTypeParameter(
            parameter_number=21,
            parameter_name='Heating Value Type',
            parameter_desc='Indicates the type of entered heating value. Valid values are: 0 Dry 1 = Wet 2 = As Delivered.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        Indicates the type of entered heating value. Valid values are: 0 Dry 1 = Wet 2 = As Delivered.
        """

        HEATING_VALUE = PointTypeParameter(
            parameter_number=22,
            parameter_name='Heating Value',
            parameter_desc='Gas property indicating how much energy it takes to heat the gas based upon a per-unit volume basis. For English units, Btu/ft³ are used and for Metric units, MJ/m³ are used. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Gas property indicating how much energy it takes to heat the gas based upon a per-unit volume basis. For English units, Btu/ft³ are used and for Metric units,
        MJ/m³ are used. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        SPECIFIC_GRAVITY_GR_ = PointTypeParameter(
            parameter_number=23,
            parameter_name='Specific Gravity (Gr)',
            parameter_desc='Real gas relative density. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0 Any positive valid IEEE 754 float'
        )
        """
        Real gas relative density. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        GAS_QUALITY = PointTypeParameter(
            parameter_number=24,
            parameter_name='Gas Quality',
            parameter_desc='Indicates if the gas quality for the station is live or constant. Valid values are 0 (Constant Gas Quality) and 1 (Live Gas Quality).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates if the gas quality for the station is live or constant. Valid values are 0 (Constant Gas Quality) and 1 (Live Gas Quality).
        """

        NORMALIZATION_TYPE = PointTypeParameter(
            parameter_number=25,
            parameter_name='Normalization Type',
            parameter_desc='Indicates if the gas composition is adjusted to 100% by modifying the methane or using normalization. Valid values are 0 (Methane Adjust) and 1 (Normalize Gas).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates if the gas composition is adjusted to 100% by modifying the methane or using normalization. Valid values are 0 (Methane Adjust) and 1 (Normalize Gas).
        """

        N2_NITROGEN = PointTypeParameter(
            parameter_number=26,
            parameter_name='N2 Nitrogen',
            parameter_desc='Percent of gas present.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas present.
        """

        CO2_CARBON_DIOXIDE = PointTypeParameter(
            parameter_number=27,
            parameter_name='CO2 Carbon Dioxide',
            parameter_desc='Percent of gas present.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas present.
        """

        CH4_METHANE = PointTypeParameter(
            parameter_number=28,
            parameter_name='CH4 Methane',
            parameter_desc='Percent of gas present.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas present.
        """

        C2H6_ETHANE = PointTypeParameter(
            parameter_number=29,
            parameter_name='C2H6 Ethane',
            parameter_desc='Percent of gas present.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas present.
        """

        C3H8_PROPANE = PointTypeParameter(
            parameter_number=30,
            parameter_name='C3H8 Propane',
            parameter_desc='Percent of gas present.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas present.
        """

        C4H10_IN_BUTANE = PointTypeParameter(
            parameter_number=31,
            parameter_name='C4H10 in-Butane',
            parameter_desc='Percent of gas present.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas present.
        """

        C4H10_I_BUTANE = PointTypeParameter(
            parameter_number=32,
            parameter_name='C4H10 i-Butane',
            parameter_desc='Percent of gas present.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas present.
        """

        C5H12_IN_PENTANE = PointTypeParameter(
            parameter_number=33,
            parameter_name='C5H12 in-Pentane',
            parameter_desc='Percent of gas present.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas present.
        """

        C5H12_I_PENTANE = PointTypeParameter(
            parameter_number=34,
            parameter_name='C5H12 i-Pentane',
            parameter_desc='Percent of gas present.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas present.
        """

        C6H14_N_HEXANE = PointTypeParameter(
            parameter_number=35,
            parameter_name='C6H14 n-Hexane',
            parameter_desc='Percent of gas present. When the Heavy Gas Option (parameter #46) is selected, this value will be determined by the ROC based on the Heavy Gas Percent (parameter #47) and the Heavy Gas Percent Hexane (parameter #48).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas present. When the Heavy Gas Option (parameter #46) is selected, this value will be determined by the ROC based on the Heavy Gas Percent
        (parameter #47) and the Heavy Gas Percent Hexane (parameter #48).
        """

        C7H16_IN_HEPTANE = PointTypeParameter(
            parameter_number=36,
            parameter_name='C7H16 in-Heptane',
            parameter_desc='Percent of gas present. When the Heavy Gas Option (parameter #46) is selected, this value will be determined by the ROC based on the Heavy Gas Percent (parameter #47) and the Heavy Gas Percent Heptane (parameter #49).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas present. When the Heavy Gas Option (parameter #46) is selected, this value will be determined by the ROC based on the Heavy Gas Percent
        (parameter #47) and the Heavy Gas Percent Heptane (parameter #49).
        """

        C8H18_IN_OCTANE = PointTypeParameter(
            parameter_number=37,
            parameter_name='C8H18 in-Octane',
            parameter_desc='Percent of gas present. When the Heavy Gas Option (parameter #46) is selected, this value will be determined by the ROC based on the Heavy Gas Percent (parameter #47) and the Heavy Gas Percent Octane (parameter #50).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas present. When the Heavy Gas Option (parameter #46) is selected, this value will be determined by the ROC based on the Heavy Gas Percent
        (parameter #47) and the Heavy Gas Percent Octane (parameter #50).
        """

        C9H20_IN_NONANE = PointTypeParameter(
            parameter_number=38,
            parameter_name='C9H20 in-Nonane',
            parameter_desc='Percent of gas present. When the Heavy Gas Option (parameter #46) is selected, this value will be determined by the ROC based on the Heavy Gas Percent (parameter #47) and the Heavy Gas Percent Nonane (parameter #51).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas present. When the Heavy Gas Option (parameter #46) is selected, this value will be determined by the ROC based on the Heavy Gas Percent
        (parameter #47) and the Heavy Gas Percent Nonane (parameter #51).
        """

        C10H22_IN_DECANE = PointTypeParameter(
            parameter_number=39,
            parameter_name='C10H22 in-Decane',
            parameter_desc='Percent of gas present. When the Heavy Gas Option (parameter #46) is selected, this value will be determined by the ROC based on the Heavy Gas Percent (parameter #47) and the Heavy Gas Percent Decane (parameter #52).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 -> 100.0'
        )
        """
        Percent of gas present. When the Heavy Gas Option (parameter #46) is selected, this value will be determined by the ROC based on the Heavy Gas Percent
        (parameter #47) and the Heavy Gas Percent Decane (parameter #52).
        """

        H2S_HYDROGEN_SULFIDE = PointTypeParameter(
            parameter_number=40,
            parameter_name='H2S Hydrogen Sulfide',
            parameter_desc='Percent of gas present.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas present.
        """

        H2O_WATER = PointTypeParameter(
            parameter_number=41,
            parameter_name='H2O Water',
            parameter_desc='Percent of gas present.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas present.
        """

        HE_HELIUM = PointTypeParameter(
            parameter_number=42,
            parameter_name='He Helium',
            parameter_desc='Percent of gas present.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas present.
        """

        O2_OXYGEN = PointTypeParameter(
            parameter_number=43,
            parameter_name='O2 Oxygen',
            parameter_desc='Percent of gas present.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas present.
        """

        CO_CARBON_MONOXIDE = PointTypeParameter(
            parameter_number=44,
            parameter_name='CO Carbon Monoxide',
            parameter_desc='Percent of gas present.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 -> 100.0'
        )
        """
        Percent of gas present.
        """

        H2_HYDROGEN = PointTypeParameter(
            parameter_number=45,
            parameter_name='H2 Hydrogen',
            parameter_desc='Percent of gas present.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas present.
        """

        HEAVY_GAS_OPTION = PointTypeParameter(
            parameter_number=46,
            parameter_name='Heavy Gas Option',
            parameter_desc='Indicates whether to separate Heavy Gas Percent (C6+) (parameter #47) into individual components in the percentages configured in parameters #48-52 and write to gas components hexane and heavier (parameters #35-39). 0 = C6+ not used, 1 = C6+ used.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether to separate Heavy Gas Percent (C6+) (parameter #47) into individual components in the percentages configured in parameters #48-52 and write to
        gas components hexane and heavier (parameters #35-39). 0 = C6+ not used, 1 = C6+ used.
        """

        HEAVY_GAS_PERCENT_C6_ = PointTypeParameter(
            parameter_number=47,
            parameter_name='Heavy Gas Percent (C6+)',
            parameter_desc='Percent of gas that is a composite of hydrocarbons hexane and heavier. Values for C6+ should be written to this parameter.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas that is a composite of hydrocarbons hexane and heavier. Values for C6+ should be written to this parameter.
        """

        HEAVY_GAS__C6H14_N_HEXANE = PointTypeParameter(
            parameter_number=48,
            parameter_name='Heavy Gas % C6H14 n- Hexane',
            parameter_desc='Percent of hexane believed to be present in the composite heavy gas.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 -> 100.0'
        )
        """
        Percent of hexane believed to be present in the composite heavy gas.
        """

        HEAVY_GAS__C7H16_N_HEPTANE = PointTypeParameter(
            parameter_number=49,
            parameter_name='Heavy Gas % C7H16 n- Heptane',
            parameter_desc='Percent of heptane believed to be present in the composite heavy gas.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of heptane believed to be present in the composite heavy gas.
        """

        HEAVY_GAS__C8H18_N_OCTANE = PointTypeParameter(
            parameter_number=50,
            parameter_name='Heavy Gas % C8H18 n- Octane',
            parameter_desc='Percent of octane believed to be present in the composite heavy gas.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of octane believed to be present in the composite heavy gas.
        """

        HEAVY_GAS__C9H20_N_NONANE = PointTypeParameter(
            parameter_number=51,
            parameter_name='Heavy Gas % C9H20 n- Nonane',
            parameter_desc='Percent of nonane believed to be present in the composite heavy gas.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 -> 100.0'
        )
        """
        Percent of nonane believed to be present in the composite heavy gas.
        """

        HEAVY_GAS__C10H22_N_DECANE = PointTypeParameter(
            parameter_number=52,
            parameter_name='Heavy Gas % C10H22 n- Decane',
            parameter_desc='Percent of decane believed to be present in the composite heavy gas.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 -> 100.0'
        )
        """
        Percent of decane believed to be present in the composite heavy gas.
        """

        FLOW_RATE_PER_DAY = PointTypeParameter(
            parameter_number=53,
            parameter_name='Flow Rate per Day',
            parameter_desc='Volume flow rate at base condition in mft3/day or km3/day.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Volume flow rate at base condition in mft3/day or km3/day.
        """

        ENERGY_RATE_PER_DAY = PointTypeParameter(
            parameter_number=54,
            parameter_name='Energy Rate per Day',
            parameter_desc='Energy rate at base conditions in mmBtu/day or GJ/day.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Energy rate at base conditions in mmBtu/day or GJ/day.
        """

        FLOW_TODAY = PointTypeParameter(
            parameter_number=55,
            parameter_name='Flow Today',
            parameter_desc='Total accumulation of flow for the current contract day in mft3 or km³.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of flow for the current contract day in mft3 or km³.
        """

        FLOW_YESTERDAY = PointTypeParameter(
            parameter_number=56,
            parameter_name='Flow Yesterday',
            parameter_desc='Total accumulation of flow for the previous contract day in mft³ or km³.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of flow for the previous contract day in mft³ or km³.
        """

        ENERGY_TODAY = PointTypeParameter(
            parameter_number=57,
            parameter_name='Energy Today',
            parameter_desc='Total accumulation of energy for the current contract day in mmBtu or GJ.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of energy for the current contract day in mmBtu or GJ.
        """

        ENERGY_YESTERDAY = PointTypeParameter(
            parameter_number=58,
            parameter_name='Energy Yesterday',
            parameter_desc='Total accumulation of energy for the previous contract day in mmBtu or GJ.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of energy for the previous contract day in mmBtu or GJ.
        """

        ZS = PointTypeParameter(
            parameter_number=59,
            parameter_name='Zs',
            parameter_desc='Represents the compressibility at standard conditions. Note: Refer to API Chapter 14.2 (AGA Report No. 8 1992 2nd printing 1994).',
            data_type=dt.FL,
            access='R/W',
            value_range='> 0.0-Any positive valid IEEE 754 float'
        )
        """
        Represents the compressibility at standard conditions. Note: Refer to API Chapter 14.2 (AGA Report No. 8 1992 2nd printing 1994).
        """

        ZB = PointTypeParameter(
            parameter_number=60,
            parameter_name='Zb',
            parameter_desc='Represents the compressibility at base conditions. Note: Refer to API Chapter 14.2 (AGA Report No. 8 1992 2nd printing 1994).',
            data_type=dt.FL,
            access='R/W',
            value_range='> 0.0-Any positive valid IEEE 754 float'
        )
        """
        Represents the compressibility at base conditions. Note: Refer to API Chapter 14.2 (AGA Report No. 8 1992 2nd printing 1994).
        """

        BASE_DENSITY = PointTypeParameter(
            parameter_number=61,
            parameter_name='Base Density',
            parameter_desc='Represents the density of a fluid at base conditions in lbm/ft³ or kg/m³. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='> 0.0-Any positive valid IEEE 754 float'
        )
        """
        Represents the density of a fluid at base conditions in lbm/ft³ or kg/m³. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        AR_ARGON = PointTypeParameter(
            parameter_number=62,
            parameter_name='Ar Argon',
            parameter_desc='Percent of gas present.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        Percent of gas present.
        """

        MASS_RATE_PER_DAY = PointTypeParameter(
            parameter_number=63,
            parameter_name='Mass Rate Per Day',
            parameter_desc='Mass flow rate in mlb/day or tonnes/day.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Mass flow rate in mlb/day or tonnes/day.
        """

        MASS_TODAY = PointTypeParameter(
            parameter_number=64,
            parameter_name='Mass Today',
            parameter_desc='Total accumulation of mass since the last contract hour in mlb or tonnes.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of mass since the last contract hour in mlb or tonnes.
        """

        MASS_YESTERDAY = PointTypeParameter(
            parameter_number=65,
            parameter_name='Mass Yesterday',
            parameter_desc='Total accumulation of mass for the previous contract day in mlb or tonnes.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of mass for the previous contract day in mlb or tonnes.
        """

        MAINTENANCE_LOCK = PointTypeParameter(
            parameter_number=66,
            parameter_name='Maintenance Lock',
            parameter_desc='Allows the stations meter runs to be set to maintenance mode. Valid values are 0 (Locked, do not allow the stations meter runs to be set to maintenance mode) and 1 (Unlocked).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Allows the stations meter runs to be set to maintenance mode. Valid values are 0 (Locked, do not allow the stations meter runs to be set to maintenance mode)
        and 1 (Unlocked).
        """

        BASE_DENSITY_OPTION = PointTypeParameter(
            parameter_number=67,
            parameter_name='Base Density Option',
            parameter_desc='Selection to calculate base density by entering specific gravity (relative density) or molecular weight. Valid values are 0 (Enter Specific Gravity [Relative Density]) and 1 (Enter Molecular Weight).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Selection to calculate base density by entering specific gravity (relative density) or molecular weight. Valid values are 0 (Enter Specific Gravity [Relative
        Density]) and 1 (Enter Molecular Weight).
        """

        MOLECULAR_WEIGHT = PointTypeParameter(
            parameter_number=68,
            parameter_name='Molecular Weight',
            parameter_desc='Molecular weight of the gas',
            data_type=dt.FL,
            access='R/O',
            value_range='>0.0-Any positive valid IEEE 754 float'
        )
        """
        Molecular weight of the gas
        """





class ORIFICE_METER_RUN_CONFIG(PointType):
    """Orifice Meter Run Configuration"""

    point_type_number: int = 113
    """Point Type ID"""

    point_type_desc: str = 'Orifice Meter Run Configuration'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Identification name for specific Orifice Meter Run. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Identification name for specific Orifice Meter Run. Values must be printable ASCII characters.
        """

        POINT_DESCRIPTION = PointTypeParameter(
            parameter_number=1,
            parameter_name='Point Description',
            parameter_desc='Description for specific meter run. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Description for specific meter run. Values must be printable ASCII characters.
        """

        STATIC_PRESSURE_UNITS = PointTypeParameter(
            parameter_number=2,
            parameter_name='Static Pressure Units',
            parameter_desc='Indicates whether the static pressure is in gauge or absolute pressure units. Valid values are 0 (Gauge) and 1 (Absolute).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether the static pressure is in gauge or absolute pressure units. Valid values are 0 (Gauge) and 1 (Absolute).
        """

        STATIC_PRESSURE_TAP = PointTypeParameter(
            parameter_number=3,
            parameter_name='Static Pressure Tap',
            parameter_desc='Indicates if the static pressure is an upstream or downstream reading. Valid valuesare 0 (Downstream) and 1 (Upstream).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates if the static pressure is an upstream or downstream reading. Valid valuesare 0 (Downstream) and 1 (Upstream).
        """

        ALARMING = PointTypeParameter(
            parameter_number=4,
            parameter_name='Alarming',
            parameter_desc='If enabled, alarms may be generated and sent to the Alarm Log. Valid values are: 0 = Disabled 1 = Alarm on Corrected Volume / Day 2 = Alarm on Mass / Day 3 = Alarm on Corrected Volume / Hour 4 = Alarm on Mass / Hour. Note: Options 2, 3, and 4 were added in firmware version 1.52.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-4'
        )
        """
        If enabled, alarms may be generated and sent to the Alarm Log. Valid values are: 0 = Disabled 1 = Alarm on Corrected Volume / Day 2 = Alarm on Mass / Day 3 =
        Alarm on Corrected Volume / Hour 4 = Alarm on Mass / Hour. Note: Options 2, 3, and 4 were added in firmware version 1.52.
        """

        SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=5,
            parameter_name='SRBX on Clear',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).
        """

        SRBX_ON_SET = PointTypeParameter(
            parameter_number=6,
            parameter_name='SRBX on Set',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).
        """

        ALARM_CODE = PointTypeParameterBinary(
            parameter_number=7,
            parameter_name='Alarm Code',
            parameter_desc='Alarm Code',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Low Alarm',
                    bit_desc='This alarm is set if the Flow Rate per Day (point type 114, parameter #0) is less than or equal to the Low Alarm Flow (parameter #8). This alarm clears if the Flow Rate per Day (point type 114, parameter #0) is greater than the Low Alarm Flow (parameter #8) plus the alarm deadband (parameter #10).'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='High Alarm',
                    bit_desc='This alarm is set if the Flow Rate per Day (point type 114, parameter #0) is greater than or equal to the High Alarm Flow (parameter #9). This alarm clears if the Flow Rate per Day (point type 114, parameter #0) is less than the High Alarm Flow (parameter #9) minus the alarm deadband (parameter #10).'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Temp Fail Alarm',
                    bit_desc='This alarm is set if the meter temperature input value falls below -200 Deg F (-128.89 Deg C) or goes above 400 Deg F (204.44 Deg C). If this condition occurs, the flow rates are set to 0.0.'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Zf1 Calc Alarm',
                    bit_desc='This alarm is set if the meter temperature, pressure, and composition values do not allow a valid flowing compressibility calculation. If condition occurs, the value of Zf1 is set to 1.0.'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='No Flow Alarm',
                    bit_desc='If set, then no flow conditions are present and the Flow Rate per Day (point type 114, parameter #0) is zero. If clear, then flowing conditions exist and the Flow Rate per Day (point type 114, parameter #0) is not zero.'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Manual Inputs Alarm',
                    bit_desc='If set, then one of the DP TLP (parameter #25), SP TLP (parameter #27), TMP TLP (parameter #29), or Low DP TLP (parameter #24), if Stacked DP is enabled, is set to Manual (0,0,0). If clear, then the DP TLP (parameter #25), SP TLP (parameter #27), TMP TLP (parameter #29), and Low DP TLP (parameter #24), if Stacked DP is enabled, are not set to Manual.'
                )
            ]
        )
        """
        Alarm Code
        """

        LOW_ALARM_FLOW = PointTypeParameter(
            parameter_number=8,
            parameter_name='Low Alarm Flow',
            parameter_desc='Alarm value for Low Alarm in mft3/day or km3/day.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Low Alarm in mft3/day or km3/day.
        """

        HIGH_ALARM_FLOW = PointTypeParameter(
            parameter_number=9,
            parameter_name='High Alarm Flow',
            parameter_desc='Alarm value for High Alarm in mft3/day or km3/day.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for High Alarm in mft3/day or km3/day.
        """

        ALARM_DEADBAND = PointTypeParameter(
            parameter_number=10,
            parameter_name='Alarm Deadband',
            parameter_desc='The value that the Flow Rate Per Day (Point Type 114, parameter #0) must be above the low alarm value (parameter #8) or below the high alarm value (parameter #9) before the associated alarm will clear.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        The value that the Flow Rate Per Day (Point Type 114, parameter #0) must be above the low alarm value (parameter #8) or below the high alarm value (parameter
        #9) before the associated alarm will clear.
        """

        STATION_NUMBER = PointTypeParameter(
            parameter_number=11,
            parameter_name='Station number',
            parameter_desc='Indicates the station associated with the meter run.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 -> 11'
        )
        """
        Indicates the station associated with the meter run.
        """

        PIPE_DIAMETER = PointTypeParameter(
            parameter_number=12,
            parameter_name='Pipe Diameter',
            parameter_desc='Meter tube internal diameter in inches or millimeters. Must be greater than 0.0. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0 Any positive valid IEEE 754 float'
        )
        """
        Meter tube internal diameter in inches or millimeters. Must be greater than 0.0. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        PIPE_REFERENCE_TEMP = PointTypeParameter(
            parameter_number=13,
            parameter_name='Pipe Reference Temp',
            parameter_desc='Reference temperature of the meter tube inside diameter in °F or °C. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Reference temperature of the meter tube inside diameter in °F or °C. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        PIPE_MATERIAL = PointTypeParameter(
            parameter_number=14,
            parameter_name='Pipe Material',
            parameter_desc='Indicates the material for the meter tube, used in determining the linear coefficient of thermal expansion for the meter tube. Valid values are: 0 = Type 304 or 316 Stainless Steel 1 = Monel 2 = Carbon Steel. 3 = Stainless Steel 304 (added in Ver 3.60) 4 = Stainless Steel 316 (added in Ver. 3.60) 5 = Monel 400 (added in Ver. 3.60) Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 2 0 5 (Ver. 3.60)'
        )
        """
        Indicates the material for the meter tube, used in determining the linear coefficient of thermal expansion for the meter tube. Valid values are: 0 = Type 304 or
        316 Stainless Steel 1 = Monel 2 = Carbon Steel. 3 = Stainless Steel 304 (added in Ver 3.60) 4 = Stainless Steel 316 (added in Ver. 3.60) 5 = Monel 400 (added in
        Ver. 3.60) Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        ORIFICE_DIAMETER = PointTypeParameter(
            parameter_number=15,
            parameter_name='Orifice Diameter',
            parameter_desc='Orifice plate bore diameter in inches or millimeters. Must be greater than 0.0 and less than Pipe Diameter (parameter #12). See note 1.',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0 Any positive valid IEEE 754 float'
        )
        """
        Orifice plate bore diameter in inches or millimeters. Must be greater than 0.0 and less than Pipe Diameter (parameter #12). See note 1.
        """

        ORIFICE_REFERENCE_TEMP = PointTypeParameter(
            parameter_number=16,
            parameter_name='Orifice Reference Temp',
            parameter_desc='Reference temperature of the orifice plate bore diameter in °F or °C. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Reference temperature of the orifice plate bore diameter in °F or °C. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        ORIFICE_MATERIAL = PointTypeParameter(
            parameter_number=17,
            parameter_name='Orifice Material',
            parameter_desc='Indicates the material for the orifice plate, used in determining the linear coefficient of thermal expansion for the orifice plate. See note 1. Valid values are: 0 = Type 304 or 316 Stainless Steel 1 Monel 2 = Carbon Steel 3 = Stainless Steel 304 (added in Ver. 3.60) 4 = Stainless Steel 316 (added in Ver. 3.60) 5 = Monel 400 (added in Ver. 3.60)',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 -> 2 0 5 (Ver. 3.60)'
        )
        """
        Indicates the material for the orifice plate, used in determining the linear coefficient of thermal expansion for the orifice plate. See note 1. Valid values
        are: 0 = Type 304 or 316 Stainless Steel 1 Monel 2 = Carbon Steel 3 = Stainless Steel 304 (added in Ver. 3.60) 4 = Stainless Steel 316 (added in Ver. 3.60) 5 =
        Monel 400 (added in Ver. 3.60)
        """

        VISCOSITY = PointTypeParameter(
            parameter_number=18,
            parameter_name='Viscosity',
            parameter_desc='Absolute viscosity of flowing fluid in Lbm/Ft-Sec or centipoise. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0-Any positive valid IEEE 754 float'
        )
        """
        Absolute viscosity of flowing fluid in Lbm/Ft-Sec or centipoise. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        SPECIFIC_HEAT_RATIO = PointTypeParameter(
            parameter_number=19,
            parameter_name='Specific Heat Ratio',
            parameter_desc='Isentropic exponent for natural gas. Must be greater than 0.0. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0-Any positive valid IEEE 754 float'
        )
        """
        Isentropic exponent for natural gas. Must be greater than 0.0. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        LOW_DP_CUTOFF = PointTypeParameter(
            parameter_number=20,
            parameter_name='Low DP Cutoff',
            parameter_desc='Indicates the cutoff point for the differential pressure, in inches of HO, kPa, or mbar to determine whether the meter run is flowing or not. Note: Refer to API Chapter 21.1 (September 1993).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 Any positive valid IEEE 754 float'
        )
        """
        Indicates the cutoff point for the differential pressure, in inches of HO, kPa, or mbar to determine whether the meter run is flowing or not. Note: Refer to API
        Chapter 21.1 (September 1993).
        """

        STACKED_DP = PointTypeParameter(
            parameter_number=21,
            parameter_name='Stacked DP',
            parameter_desc='Indicates a stacked differential pressure for the meter run is being used. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a stacked differential pressure for the meter run is being used. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        HIGH_DP_SETPOINT = PointTypeParameter(
            parameter_number=22,
            parameter_name='High DP Setpoint',
            parameter_desc='If a stacked differential pressure is enabled, this is the differential pressure value, in inches of H2O or kPa, which indicates to start reading from the DP TLP (parameter #25).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        If a stacked differential pressure is enabled, this is the differential pressure value, in inches of H2O or kPa, which indicates to start reading from the DP
        TLP (parameter #25).
        """

        LOW_DP_SETPOINT = PointTypeParameter(
            parameter_number=23,
            parameter_name='Low DP Setpoint',
            parameter_desc='If a stacked differential pressure is enabled, this is the differential pressure value, in inches of H2O or kPa, which indicates to start reading from the Low DP TLP (parameter #24).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        If a stacked differential pressure is enabled, this is the differential pressure value, in inches of H2O or kPa, which indicates to start reading from the Low
        DP TLP (parameter #24).
        """

        LOW_DP_TLP = PointTypeParameter(
            parameter_number=24,
            parameter_name='Low DP TLP',
            parameter_desc='Indicates what is being used to get the DP (parameter #26) if the stacked differential pressure says to use the lower DP.',
            data_type=dt.TLP,
            access='R/W',
            value_range='TLP 0,0,0 and TLP 60-77, 0-255, 0-255 (must be float) and TLP 103,5-148,21 and TLP 96,0->5,2->11and TLP 98,0->31,1-20 and TLP 108,16->63,19->20'
        )
        """
        Indicates what is being used to get the DP (parameter #26) if the stacked differential pressure says to use the lower DP.
        """

        DP_TLP = PointTypeParameter(
            parameter_number=25,
            parameter_name='DP TLP',
            parameter_desc='Indicates what is being used to get the DP (parameter #26).',
            data_type=dt.TLP,
            access='R/W',
            value_range='TLP 0,0,0 and TLP 60-77, 0->255, 0-255 (must be float) and TLP 103,5->148,21 and TLP 96,0->5,2-11and TLP 98,0->31,1-20 and TLP 108, 16->36,19-20'
        )
        """
        Indicates what is being used to get the DP (parameter #26).
        """

        DP_DIFFERENTIAL_PRESSURE_HW_ = PointTypeParameter(
            parameter_number=26,
            parameter_name='DP (Differential Pressure, hw)',
            parameter_desc='Indicates the differential pressure in inches of H2O or kPa. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992) and API Chapter 21.1 (September 1993)',
            data_type=dt.FL,
            access='R/W',
            value_range='> 0.0 Any positive valid IEEE 754 float'
        )
        """
        Indicates the differential pressure in inches of H2O or kPa. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992) and API Chapter 21.1 (September 1993)
        """

        SP_TLP = PointTypeParameter(
            parameter_number=27,
            parameter_name='SP TLP',
            parameter_desc='Indicates what is being used to get the SP (parameter #28).',
            data_type=dt.TLP,
            access='R/W',
            value_range='TLP 0,0,0 and TLP 60-77, 0->255, 0-255 (must be float) and TLP 103,5-148,21 and TLP 96,0->,5-211a TLP 98,0->1,1-20 and TLP 108, 16->63,35'
        )
        """
        Indicates what is being used to get the SP (parameter #28).
        """

        SP_STATIC_PRESSURE_PF_ = PointTypeParameter(
            parameter_number=28,
            parameter_name='SP (Static Pressure, Pf)',
            parameter_desc='Static pressure in PSI (lb/in²) or kPa. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992) and API Chapter 21.1 (September 1993)',
            data_type=dt.FL,
            access='R/W',
            value_range='> 0.0 -> 40,000 PSI (275,790.3 kPa)'
        )
        """
        Static pressure in PSI (lb/in²) or kPa. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992) and API Chapter 21.1 (September 1993)
        """

        TMP_TLP = PointTypeParameter(
            parameter_number=29,
            parameter_name='TMP TLP',
            parameter_desc='Indicates what is being used to get the TMP (parameter #30).',
            data_type=dt.TLP,
            access='R/W',
            value_range='TLP 0,0,0 and TLP 60-77, 0->255, 0-255 (must be float) and TLP 103,5-148,21 and TLP 96,0->5,2->11and TLP 98,0-31,1-2 and TLP 108, 16->63,50 and TLP 106,5-148,22 and TLP 107,5-148, 9'
        )
        """
        Indicates what is being used to get the TMP (parameter #30).
        """

        TMP_TEMPERATURE_TF_ = PointTypeParameter(
            parameter_number=30,
            parameter_name='TMP (Temperature, Tf)',
            parameter_desc='Temperature in °F or °C. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992) and API Chapter 21.1 (September 1993)',
            data_type=dt.FL,
            access='R/W',
            value_range='-200 Deg F (-128.9 Deg C) 760 Deg F (404.4 Deg C)'
        )
        """
        Temperature in °F or °C. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992) and API Chapter 21.1 (September 1993)
        """

        STATIC_PRESSURE_DEADWEIGHT_CALIBRATOR = PointTypeParameter(
            parameter_number=31,
            parameter_name='Static Pressure Deadweight Calibrator',
            parameter_desc='Expand the volume flow equation to include the local gravitational correction for the deadweight calibrator on Static Pressure (Fpwl(static)). Valid values are 0 (Do Not Use) and 1 (Use). Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992), Appendix 3-A.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Expand the volume flow equation to include the local gravitational correction for the deadweight calibrator on Static Pressure (Fpwl(static)). Valid values are
        0 (Do Not Use) and 1 (Use). Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992), Appendix 3-A.
        """

        DIFFERENTIAL_PRESSURE_DEADWEIGHT_CALIBRATOR = PointTypeParameter(
            parameter_number=32,
            parameter_name='Differential Pressure Deadweight Calibrator',
            parameter_desc='Expand the volume flow equation to include the local gravitational correction for the deadweight calibrator on Differential Pressure (F wl(differential Valid values are 0 (Do Not Use) and 1 (Use). Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992), Appendix 3-A.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Expand the volume flow equation to include the local gravitational correction for the deadweight calibrator on Differential Pressure (F wl(differential Valid
        values are 0 (Do Not Use) and 1 (Use). Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992), Appendix 3-A.
        """

        CALIBRATION_WEIGHTS_GRAVITATIONAL_ACCELERATION = PointTypeParameter(
            parameter_number=33,
            parameter_name='Calibration Weights Gravitational Acceleration',
            parameter_desc='Used to calculate Fpwl. Entered in ft/sec2 or m/sec2. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992), Appendix 3-A.',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0-Any positive valid IEEE 754 float'
        )
        """
        Used to calculate Fpwl. Entered in ft/sec2 or m/sec2. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992), Appendix 3-A.
        """

        USER_CORRECTION_FACTOR = PointTypeParameter(
            parameter_number=34,
            parameter_name='User Correction Factor',
            parameter_desc='Variable multiplied through the volume flow equation to allow the user to modify the flow.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Variable multiplied through the volume flow equation to allow the user to modify the flow.
        """

        DIFFERENTIAL_METER_TYPE = PointTypeParameter(
            parameter_number=35,
            parameter_name='Differential Meter Type',
            parameter_desc='Indicates the type of primary differential metering device. Valid values are 0 (Flange tapped orifice) and 1 (User defined device).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates the type of primary differential metering device. Valid values are 0 (Flange tapped orifice) and 1 (User defined device).
        """

        TEMPERATURE_TAP_LOCATION = PointTypeParameter(
            parameter_number=36,
            parameter_name='Temperature Tap Location',
            parameter_desc='Indicates the location for the temperature measurement. Valid values are 0 (Downstream) and 1 (Upstream).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates the location for the temperature measurement. Valid values are 0 (Downstream) and 1 (Upstream).
        """

        JOULE_THOMSON_OPTION = PointTypeParameter(
            parameter_number=37,
            parameter_name='Joule-Thomson Option',
            parameter_desc='Calculates an upstream temperature using the Joule-Thomson coefficient. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Calculates an upstream temperature using the Joule-Thomson coefficient. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        JOULE_THOMSON_COEFFICIENT_OPTION = PointTypeParameter(
            parameter_number=38,
            parameter_name='Joule-Thomson Coefficient Option',
            parameter_desc='Indicates whether to calculate or enter the Joule- Thomson coefficient. Valid values are 0 (Calculate) and 1 (Enter).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether to calculate or enter the Joule- Thomson coefficient. Valid values are 0 (Calculate) and 1 (Enter).
        """

        PRESSURE_LOSS_OPTION = PointTypeParameter(
            parameter_number=39,
            parameter_name='Pressure Loss Option',
            parameter_desc='Indicates whether to calculate or enter the value for the permanent pressure loss across the differential meter. Valid values are 0 (Calculate) and 1 (Enter).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether to calculate or enter the value for the permanent pressure loss across the differential meter. Valid values are 0 (Calculate) and 1 (Enter).
        """

        FLOW_CALCULATIONS_ALARMING = PointTypeParameter(
            parameter_number=40,
            parameter_name='Flow Calculations Alarming',
            parameter_desc='Enables the system to generate flow calculation alarms (parameter #41) and send them to the alarm log. Valid values are 0 (Disable) and 1 (Enable).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-4'
        )
        """
        Enables the system to generate flow calculation alarms (parameter #41) and send them to the alarm log. Valid values are 0 (Disable) and 1 (Enable).
        """

        FLOW_CALCULATIONS_ALARM_CODE = PointTypeParameterBinary(
            parameter_number=41,
            parameter_name='Flow Calculations Alarm Code',
            parameter_desc='Flow Calculations Alarm Code',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Orifice Diameter Range Alarm',
                    bit_desc='Bit sets if the orifice diameter (parameter #15) is outside the range specified by ISO5167 or AGA 3 based on the calculation standard used for the station (point type #121 parameter #1)'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Pipe Diameter Range Alarm',
                    bit_desc='Bit sets if the pipe diameter (parameter #12) is outside the the range specified by ISO5167 or AGA 3 based on the calculation standard used for the station (point type #121 parameter #1)'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='Beta Range Alarm',
                    bit_desc='Bit sets if the beta value (point type #114 parameter #14) is outside the the range specified by ISO5167 or AGA 3 based on the calculation standard used for the station (point type #121 parameter #1)'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='Reynolds Number Range Alarm',
                    bit_desc='Bit sets if the Reynolds number (point type #114 parameter #16) is outside the the range specified by ISO5167 or AGA 3 based on the calculation standard used for the station (point type #121 parameter #1)'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Coefficient of Discharge Non- convergence Alarm',
                    bit_desc='Bit sets if the coefficient of discharge (point type #114 parameter #5) did not converge to a value within tolerance during calcuation.'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Not used',
                    bit_desc='Not used'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Not used',
                    bit_desc='Not used'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Not used',
                    bit_desc='Not used'
                )
            ]
        )
        """
        Flow Calculations Alarm Code
        """





class ORIFICE_METER_RUN_VALUES(PointType):
    """Orifice Meter Run Values"""

    point_type_number: int = 114
    """Point Type ID"""

    point_type_desc: str = 'Orifice Meter Run Values'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        FLOW_RATE_PER_DAY = PointTypeParameter(
            parameter_number=0,
            parameter_name='Flow Rate per Day',
            parameter_desc='Volume flow rate at base condition in mft3/day or km3/day.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Volume flow rate at base condition in mft3/day or km3/day.
        """

        ENERGY_RATE_PER_DAY = PointTypeParameter(
            parameter_number=1,
            parameter_name='Energy Rate per Day',
            parameter_desc='Energy rate at base conditions in mmBtu/day or GJ/day.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Energy rate at base conditions in mmBtu/day or GJ/day.
        """

        FLOW_RATE_PER_HOUR = PointTypeParameter(
            parameter_number=2,
            parameter_name='Flow Rate per Hour',
            parameter_desc='Volume flow rate at base conditions in ft3/hour or m³/hour. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Volume flow rate at base conditions in ft3/hour or m³/hour. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        ENERGY_RATE_PER_HOUR = PointTypeParameter(
            parameter_number=3,
            parameter_name='Energy Rate per Hour',
            parameter_desc='Energy rate at base conditions in Btu/hour or MJ/hour.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Energy rate at base conditions in Btu/hour or MJ/hour.
        """

        PRESSURE_EXTENSION_HWPF_ = PointTypeParameter(
            parameter_number=4,
            parameter_name='Pressure Extension (hwPf)',
            parameter_desc='Represents the square root of Differential Pressure times Static Pressure V(hw * Pf). Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992) and API Chapter 21.1 (September 1993).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Represents the square root of Differential Pressure times Static Pressure V(hw * Pf). Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992) and API Chapter
        21.1 (September 1993).
        """

        CDFT = PointTypeParameter(
            parameter_number=5,
            parameter_name='CdFT',
            parameter_desc='Represents the Coefficient of discharge at a specified pipe Reynolds number for flange-tapped orifice meter. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0-Any positive valid IEEE 754 float'
        )
        """
        Represents the Coefficient of discharge at a specified pipe Reynolds number for flange-tapped orifice meter. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3
        1992).
        """

        VELOCITY_OF_APPROACH_EV_ = PointTypeParameter(
            parameter_number=6,
            parameter_name='Velocity of Approach (Ev)',
            parameter_desc='Represents the velocity of approach factor. See note 1. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0-Any positive valid IEEE 754 float'
        )
        """
        Represents the velocity of approach factor. See note 1. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        EXPANSION_FACTOR_Y1_ = PointTypeParameter(
            parameter_number=7,
            parameter_name='Expansion Factor (Y1)',
            parameter_desc='Represents the Expansion factor based on upstream absolute static pressure. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992) and API Chapter 21.1 (September 1993).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Represents the Expansion factor based on upstream absolute static pressure. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992) and API Chapter 21.1
        (September 1993).
        """

        ORIFICE_PLATE_BORE_DIAMETER_D_ = PointTypeParameter(
            parameter_number=8,
            parameter_name='Orifice Plate Bore Diameter (d)',
            parameter_desc='Orifice plate bore diameter calculated at the average flowing temperature over the imp in inches. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Orifice plate bore diameter calculated at the average flowing temperature over the imp in inches. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        ZF1 = PointTypeParameter(
            parameter_number=9,
            parameter_name='Zf1',
            parameter_desc='Represents the compressibility at upstream flowing conditions. Note: Refer to API Chapter 14.2 (AGA Report No. 8 1992 2nd printing 1994).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0-Any positive valid IEEE 754 float'
        )
        """
        Represents the compressibility at upstream flowing conditions. Note: Refer to API Chapter 14.2 (AGA Report No. 8 1992 2nd printing 1994).
        """

        FPB = PointTypeParameter(
            parameter_number=10,
            parameter_name='Fpb',
            parameter_desc='Represents the base pressure factor. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992) and API Chapter 21.1 (September 1993).',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Represents the base pressure factor. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992) and API Chapter 21.1 (September 1993).
        """

        FTB = PointTypeParameter(
            parameter_number=11,
            parameter_name='Ftb',
            parameter_desc='Represents the base temperature factor. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992) and API Chapter 21.1 (September 1993)',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Represents the base temperature factor. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992) and API Chapter 21.1 (September 1993)
        """

        MULTIPLIER_VALUE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Multiplier Value',
            parameter_desc='Represents the value multiplied by the square root of the product of differential and static pressure to calculate instantaneous flow rate. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Represents the value multiplied by the square root of the product of differential and static pressure to calculate instantaneous flow rate. Note: Refer to
        ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        METER_TUBE_INTERNAL_DIAMETER_D_ = PointTypeParameter(
            parameter_number=13,
            parameter_name='Meter Tube Internal Diameter (D)',
            parameter_desc='Meter tube internal diameter calculated at the average flowing temperature over the imp in inches. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/O',
            value_range='>0.0-Any positive valid IEEE 754 float'
        )
        """
        Meter tube internal diameter calculated at the average flowing temperature over the imp in inches. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        DIAMETER_RATIO_BETA_ = PointTypeParameter(
            parameter_number=14,
            parameter_name='Diameter Ratio (Beta)',
            parameter_desc='Ratio of orifice plate bore diameter to meter tube internal diameter calculated at the average flowing temperature over the imp. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0->Any positive valid IEEE 754 float'
        )
        """
        Ratio of orifice plate bore diameter to meter tube internal diameter calculated at the average flowing temperature over the imp. Note: Refer to ANSI/API 2530-92
        (AGA Report No. 3 1992).
        """

        DENSITY = PointTypeParameter(
            parameter_number=15,
            parameter_name='Density',
            parameter_desc='Represents the density of a fluid at flowing conditions in lbm/ft³ or kg/m³. See note 1. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0->Any positive valid IEEE 754 float'
        )
        """
        Represents the density of a fluid at flowing conditions in lbm/ft³ or kg/m³. See note 1. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        REYNOLDS_NUMBER = PointTypeParameter(
            parameter_number=16,
            parameter_name='Reynolds Number',
            parameter_desc='Represents the pipe Reynolds number. See note 1. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0-Any positive valid IEEE 754 float'
        )
        """
        Represents the pipe Reynolds number. See note 1. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        UPSTREAM_STATIC_PRESSURE = PointTypeParameter(
            parameter_number=17,
            parameter_name='Upstream Static Pressure',
            parameter_desc='Represents the instantaneous upstream static pressure in psia or kPa.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Represents the instantaneous upstream static pressure in psia or kPa.
        """

        SP_FPWL = PointTypeParameter(
            parameter_number=18,
            parameter_name='SP Fpwl',
            parameter_desc='Represents the local gravitational correction for the deadweight tester. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992), Appendix 3-A.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Represents the local gravitational correction for the deadweight tester. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992), Appendix 3-A.
        """

        FLOW_TODAY = PointTypeParameter(
            parameter_number=19,
            parameter_name='Flow Today',
            parameter_desc='Total accumulation of flow for the current contract day in mft³ or km³.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of flow for the current contract day in mft³ or km³.
        """

        FLOW_YESTERDAY = PointTypeParameter(
            parameter_number=20,
            parameter_name='Flow Yesterday',
            parameter_desc='Total accumulation of flow for the previous contract day in mft³ or km³.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of flow for the previous contract day in mft³ or km³.
        """

        FLOW_MONTH = PointTypeParameter(
            parameter_number=21,
            parameter_name='Flow Month',
            parameter_desc='Total accumulation of flow for the current month in mft³ or km³.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of flow for the current month in mft³ or km³.
        """

        FLOW_PREVIOUS_MONTH = PointTypeParameter(
            parameter_number=22,
            parameter_name='Flow Previous Month',
            parameter_desc='Total accumulation of flow for the previous month in mft³ or km³.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of flow for the previous month in mft³ or km³.
        """

        FLOW_ACCUMULATED = PointTypeParameter(
            parameter_number=23,
            parameter_name='Flow Accumulated',
            parameter_desc='Total accumulation of flow for the meter run in mft³ or km³. The 1,000,000.0 rollover point ensures that flow accuracy is not lost due to the significant digits of a float data type.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0->1,000,000.0'
        )
        """
        Total accumulation of flow for the meter run in mft³ or km³. The 1,000,000.0 rollover point ensures that flow accuracy is not lost due to the significant digits
        of a float data type.
        """

        MINUTES_TODAY = PointTypeParameter(
            parameter_number=24,
            parameter_name='Minutes Today',
            parameter_desc='Total accumulation of flowing minutes for the current contract day.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of flowing minutes for the current contract day.
        """

        MINUTES_YESTERDAY = PointTypeParameter(
            parameter_number=25,
            parameter_name='Minutes Yesterday',
            parameter_desc='Total accumulation of flowing minutes for the previous contract day.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of flowing minutes for the previous contract day.
        """

        MINUTES_MONTH = PointTypeParameter(
            parameter_number=26,
            parameter_name='Minutes Month',
            parameter_desc='Total accumulation of flowing minutes for the current month.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of flowing minutes for the current month.
        """

        MINUTES_PREVIOUS_MONTH = PointTypeParameter(
            parameter_number=27,
            parameter_name='Minutes Previous Month',
            parameter_desc='Total accumulation of flowing minutes for the previous month.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of flowing minutes for the previous month.
        """

        MINUTES_ACCUMULATED = PointTypeParameter(
            parameter_number=28,
            parameter_name='Minutes Accumulated',
            parameter_desc='Total accumulation of flowing minutes for the meter run. The 1,000,000.0 rollover point ensures that flow minutes accuracy is not lost due to the significant digits of a float data type.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0->1,000,000.0'
        )
        """
        Total accumulation of flowing minutes for the meter run. The 1,000,000.0 rollover point ensures that flow minutes accuracy is not lost due to the significant
        digits of a float data type.
        """

        ENERGY_TODAY = PointTypeParameter(
            parameter_number=29,
            parameter_name='Energy Today',
            parameter_desc='Total accumulation of energy for the current contract day in mmBtu or GJ.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of energy for the current contract day in mmBtu or GJ.
        """

        ENERGY_YESTERDAY = PointTypeParameter(
            parameter_number=30,
            parameter_name='Energy Yesterday',
            parameter_desc='Total accumulation of energy for the previous contract day in mmBtu or GJ.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of energy for the previous contract day in mmBtu or GJ.
        """

        ENERGY_MONTH = PointTypeParameter(
            parameter_number=31,
            parameter_name='Energy Month',
            parameter_desc='Total accumulation of energy for the current month in mmBtu or GJ.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of energy for the current month in mmBtu or GJ.
        """

        ENERGY_PREVIOUS_MONTH = PointTypeParameter(
            parameter_number=32,
            parameter_name='Energy Previous Month',
            parameter_desc='Total accumulation of energy for the previous month in mmBtu or GJ.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of energy for the previous month in mmBtu or GJ.
        """

        ENERGY_ACCUMULATED = PointTypeParameter(
            parameter_number=33,
            parameter_name='Energy Accumulated',
            parameter_desc='Total accumulation of energy for the meter run in mmBtu or GJ. The 1,000,000.0 rollover point ensures that energy accuracy is not lost due to the significant digits of a float data type.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0->1,000,000.0'
        )
        """
        Total accumulation of energy for the meter run in mmBtu or GJ. The 1,000,000.0 rollover point ensures that energy accuracy is not lost due to the significant
        digits of a float data type.
        """

        MASS_RATE_PER_DAY = PointTypeParameter(
            parameter_number=34,
            parameter_name='Mass Rate Per Day',
            parameter_desc='Mass flow rate in mlb/day or tonnes/day.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Mass flow rate in mlb/day or tonnes/day.
        """

        MASS_RATE_PER_HOUR = PointTypeParameter(
            parameter_number=35,
            parameter_name='Mass Rate Per Hour',
            parameter_desc='Mass flow rate in lb/hr or kg/hr.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Mass flow rate in lb/hr or kg/hr.
        """

        MASS_TODAY = PointTypeParameter(
            parameter_number=36,
            parameter_name='Mass Today',
            parameter_desc='Total accumulation of mass since the last contract hour in mlb or tonnes.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Total accumulation of mass since the last contract hour in mlb or tonnes.
        """

        MASS_YESTERDAY = PointTypeParameter(
            parameter_number=37,
            parameter_name='Mass Yesterday',
            parameter_desc='Total accumulation of mass for the previous contract day in mlb or tonnes.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Total accumulation of mass for the previous contract day in mlb or tonnes.
        """

        MASS_MONTH = PointTypeParameter(
            parameter_number=38,
            parameter_name='Mass Month',
            parameter_desc='Total accumulation of mass for the current month in mlb or tonnes.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Total accumulation of mass for the current month in mlb or tonnes.
        """

        MASS_PREVIOUS_MONTH = PointTypeParameter(
            parameter_number=39,
            parameter_name='Mass Previous Month',
            parameter_desc='Total accumulation of mass for the previous month in mlb or tonnes.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Total accumulation of mass for the previous month in mlb or tonnes.
        """

        MASS_ACCUMULATED = PointTypeParameter(
            parameter_number=40,
            parameter_name='Mass Accumulated',
            parameter_desc='Total accumulation of mass for the meter run in mlb or tonnes. The 1,000,000.0 rollover point ensures that accuracy is not lost due to the significant digits of a float data type.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Total accumulation of mass for the meter run in mlb or tonnes. The 1,000,000.0 rollover point ensures that accuracy is not lost due to the significant digits of
        a float data type.
        """

        DP_FPWL = PointTypeParameter(
            parameter_number=41,
            parameter_name='DP Fpwl',
            parameter_desc='Represents the local gravitational correction for the deadweight tester. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992), Appendix 3-A.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Represents the local gravitational correction for the deadweight tester. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992), Appendix 3-A.
        """

        FLOW_ACCUMULATED_DOUBLE_PRECISION = PointTypeParameter(
            parameter_number=42,
            parameter_name='Flow Accumulated Double Precision',
            parameter_desc='Total accumulation of flow for the meter run in mft³ or km3. Rollover is based upon the user defined rollover.',
            data_type=dt.DBL,
            access='R/O',
            value_range='Any valid IEEE double precision float'
        )
        """
        Total accumulation of flow for the meter run in mft³ or km3. Rollover is based upon the user defined rollover.
        """

        MINUTES_ACCUMULATED_DOUBLE_PRECISION = PointTypeParameter(
            parameter_number=43,
            parameter_name='Minutes Accumulated Double Precision',
            parameter_desc='Total accumulation of flowing minutes for the meter run. Rollover is based upon the user defined rollover.',
            data_type=dt.DBL,
            access='R/O',
            value_range='Any valid IEEE double precision float'
        )
        """
        Total accumulation of flowing minutes for the meter run. Rollover is based upon the user defined rollover.
        """

        ENERGY_ACCUMULATED_DOUBLE_PRECISION = PointTypeParameter(
            parameter_number=44,
            parameter_name='Energy Accumulated Double Precision',
            parameter_desc='Total accumulation of energy for the previous month in mmBtu or GJ. Rollover is based upon the user defined rollover.',
            data_type=dt.DBL,
            access='R/O',
            value_range='Any valid IEEE double precision float'
        )
        """
        Total accumulation of energy for the previous month in mmBtu or GJ. Rollover is based upon the user defined rollover.
        """

        MASS_ACCUMULATED_DOUBLE_PRECISION = PointTypeParameter(
            parameter_number=45,
            parameter_name='Mass Accumulated Double Precision',
            parameter_desc='Total accumulation of mass for the meter run in mlb or tonnes. Rollover is based upon the user defined rollover.',
            data_type=dt.DBL,
            access='R/O',
            value_range='Any valid IEEE double precision float'
        )
        """
        Total accumulation of mass for the meter run in mlb or tonnes. Rollover is based upon the user defined rollover.
        """

        UPSTREAM_TEMPERATURE = PointTypeParameter(
            parameter_number=46,
            parameter_name='Upstream Temperature',
            parameter_desc='Value of meter temperature in Deg F or Deg C, upstream of the differential meter.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of meter temperature in Deg F or Deg C, upstream of the differential meter.
        """

        JOULE_THOMSON_COEFFICIENT = PointTypeParameter(
            parameter_number=47,
            parameter_name='Joule-Thomson Coefficient',
            parameter_desc='Calculated or entered value of Joule-Thomson coefficient in Deg F/psi, Deg C/kPa or Deg C/bar.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Calculated or entered value of Joule-Thomson coefficient in Deg F/psi, Deg C/kPa or Deg C/bar.
        """

        PRESSURE_LOSS = PointTypeParameter(
            parameter_number=48,
            parameter_name='Pressure Loss',
            parameter_desc='Calculated or entered value of permanent pressure loss across the differential meter in % of DP.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Calculated or entered value of permanent pressure loss across the differential meter in % of DP.
        """





class TURBINE_METER_RUN_CONFIG(PointType):
    """Turbine Meter Run Configuration"""

    point_type_number: int = 115
    """Point Type ID"""

    point_type_desc: str = 'Turbine Meter Run Configuration'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Identification name for specific turbine meter run. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Identification name for specific turbine meter run. Values must be printable ASCII characters.
        """

        POINT_DESCRIPTION = PointTypeParameter(
            parameter_number=1,
            parameter_name='Point Description',
            parameter_desc='Description for specific meter run. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Description for specific meter run. Values must be printable ASCII characters.
        """

        STATIC_PRESSURE_UNITS = PointTypeParameter(
            parameter_number=2,
            parameter_name='Static Pressure Units',
            parameter_desc='Indicates whether the static pressure is in gauge or absolute pressure units. Valid values are 0 (Gauge) and 1 (Absolute).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether the static pressure is in gauge or absolute pressure units. Valid values are 0 (Gauge) and 1 (Absolute).
        """

        ALARMING = PointTypeParameter(
            parameter_number=3,
            parameter_name='Alarming',
            parameter_desc='If enabled, alarms may be generated and sent to the Alarm Log. Valid values are: 0 = Disabled 1 = Alarm on Corrected Volume / Day 2 = Alarm on Mass / Day 3 = Alarm on Corrected Volume / Hour 4 = Alarm on Mass / Hour Note: Options 2, 3, and 4 were added in firmware version 1.52',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-4'
        )
        """
        If enabled, alarms may be generated and sent to the Alarm Log. Valid values are: 0 = Disabled 1 = Alarm on Corrected Volume / Day 2 = Alarm on Mass / Day 3 =
        Alarm on Corrected Volume / Hour 4 = Alarm on Mass / Hour Note: Options 2, 3, and 4 were added in firmware version 1.52
        """

        SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=4,
            parameter_name='SRBX on Clear',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).
        """

        SRBX_ON_SET = PointTypeParameter(
            parameter_number=5,
            parameter_name='SRBX on Set',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).
        """

        ALARM_CODE = PointTypeParameterBinary(
            parameter_number=6,
            parameter_name='Alarm Code',
            parameter_desc='Alarm Code',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Low Alarm',
                    bit_desc='This alarm sets if the Flow Rate per Day (point type 116, parameter #0) is less than or equal to the Low Alarm Flow (parameter #7). This alarm is cleared if the Flow Rate per Day (point type 116, parameter #0) is greater than the Low Alarm Flow (parameter #7) plus the alarm deadband (parameter #9).'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='High Alarm',
                    bit_desc='This alarm sets if the Flow Rate per Day (point type 116, parameter #0) is greater than or equal to the High Alarm Flow (parameter #8). This alarm is cleared if the Flow Rate per Day (point type 116, parameter #0) is less than the High Alarm Flow (parameter #8) minus the alarm deadband (parameter #9).'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='No Flow Alarm',
                    bit_desc='If set, then no flow conditions are present and the Flow Rate per Day (point type 116, parameter #0) is zero. If clear, then flowing conditions exist and the Flow Rate per Day (point type 116, parameter #0) is not zero.'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Manual Inputs Alarm',
                    bit_desc='If set, then one of the Uncorrected Flow Rate TLP (parameter #13), SP TLP (parameter #15), or TMP TLP (parameter #17) is set to Manual (0,0,0). If clear, then the Uncorrected Flow Rate TLP (parameter #13), SP TLP (parameter #15), and TMP TLP (parameter #17) are not set to Manual.'
                )
            ]
        )
        """
        Alarm Code
        """

        LOW_ALARM_FLOW = PointTypeParameter(
            parameter_number=7,
            parameter_name='Low Alarm Flow',
            parameter_desc='Alarm value for Low Alarm in mft3/day or km3/day.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Low Alarm in mft3/day or km3/day.
        """

        HIGH_ALARM_FLOW = PointTypeParameter(
            parameter_number=8,
            parameter_name='High Alarm Flow',
            parameter_desc='Alarm value for High Alarm in mft3/day or km3/day.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for High Alarm in mft3/day or km3/day.
        """

        ALARM_DEADBAND = PointTypeParameter(
            parameter_number=9,
            parameter_name='Alarm Deadband',
            parameter_desc='The value that the Flow Rate Per Day (Point Type 116, parameter #0) must be above the low alarm value (parameter #7) or below the high alarm value (parameter #8) before the associated alarm will clear.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        The value that the Flow Rate Per Day (Point Type 116, parameter #0) must be above the low alarm value (parameter #7) or below the high alarm value (parameter
        #8) before the associated alarm will clear.
        """

        STATION_NUMBER = PointTypeParameter(
            parameter_number=10,
            parameter_name='Station number',
            parameter_desc='Indicates the station associated with this meter run.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-11'
        )
        """
        Indicates the station associated with this meter run.
        """

        K_FACTOR = PointTypeParameter(
            parameter_number=11,
            parameter_name='K-factor',
            parameter_desc='Indicates the linear meter constant (K-Factor) in pulses/ft³ or pulses/m3. f a K-Factor curve is being used (parameter #24), this represents the K-Factor currently in use and becomes a read-only parameter. Note: Refer to API Chapter 21.1 (September 1993).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any positive, non- zero, valid IEEE 754 float'
        )
        """
        Indicates the linear meter constant (K-Factor) in pulses/ft³ or pulses/m3. f a K-Factor curve is being used (parameter #24), this represents the K-Factor
        currently in use and becomes a read-only parameter. Note: Refer to API Chapter 21.1 (September 1993).
        """

        NO_FLOW_TIME = PointTypeParameter(
            parameter_number=12,
            parameter_name='No Flow Time',
            parameter_desc='Amount of time in seconds without a pulse before the meter is considered not to have flow.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='1-86400'
        )
        """
        Amount of time in seconds without a pulse before the meter is considered not to have flow.
        """

        UNCORRECTED_FLOW_RATE_MASS_TLP = PointTypeParameter(
            parameter_number=13,
            parameter_name='Uncorrected Flow Rate/Mass TLP',
            parameter_desc='Indicates what is being used to get the pulses from the turbine and the Uncorrected Flow Rate or Mass (parameter #14).',
            data_type=dt.TLP,
            access='R/W',
            value_range='TLP 0,0,0 and TLP 60-77, 0->255, 0-255 (must be float) and TLP 105,5-148,10 or 13 and TLP 103,5-148,21 and TLP 96,0->,5-211and TLP 98,0->31,1-20'
        )
        """
        Indicates what is being used to get the pulses from the turbine and the Uncorrected Flow Rate or Mass (parameter #14).
        """

        UNCORRECTED_FLOW_MASS_RATE = PointTypeParameter(
            parameter_number=14,
            parameter_name='Uncorrected Flow/Mass Rate',
            parameter_desc='Indicates the uncorrected flow rate in mft3/day or km3/day for volume measurement and Lb/hour or Kg/hour for mass measurement. Note: Refer to API Chapter 21.1 (September 1993) and to AGA Report No. 7 (1996).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any positive valid IEEE 754 float'
        )
        """
        Indicates the uncorrected flow rate in mft3/day or km3/day for volume measurement and Lb/hour or Kg/hour for mass measurement. Note: Refer to API Chapter 21.1
        (September 1993) and to AGA Report No. 7 (1996).
        """

        SP_TLP = PointTypeParameter(
            parameter_number=15,
            parameter_name='SP TLP',
            parameter_desc='Indicates what is being used to get the SP (parameter #16).',
            data_type=dt.TLP,
            access='R/W',
            value_range='TLP 0,0,0 and TLP 60-77, 0-255, 0->255 (must be float) and TLP 103,5-148,21 and TLP 96,0->5,2->11and TLP 98,0->1,1->20 and TLP 108, 16->63,35'
        )
        """
        Indicates what is being used to get the SP (parameter #16).
        """

        SP_STATIC_PRESSURE_PF_ = PointTypeParameter(
            parameter_number=16,
            parameter_name='SP (Static Pressure, Pf)',
            parameter_desc='Static pressure in PSI (lb/in²) or kPa. Note: Refer to API Chapter 21.1 (September 1993) and to AGA Report No. 7 (1996).',
            data_type=dt.FL,
            access='R/W',
            value_range='> 0.0 40,000 PSI (275,790.3 kPa)'
        )
        """
        Static pressure in PSI (lb/in²) or kPa. Note: Refer to API Chapter 21.1 (September 1993) and to AGA Report No. 7 (1996).
        """

        TMP_TLP = PointTypeParameter(
            parameter_number=17,
            parameter_name='TMP TLP',
            parameter_desc='Indicates what is being used to get the TMP (parameter #18).',
            data_type=dt.TLP,
            access='R/W',
            value_range='TLP 0,0,0 and TLP 60-77, 0->255, 0-255 (must be float) and TLP 103,5-148,21 and TLP 96,0->5,2-11and TLP 98,0->31,1-20 and TLP 108, 16->33,50 and TLP 106,5->448,22 and TLP 107,5-148, 9'
        )
        """
        Indicates what is being used to get the TMP (parameter #18).
        """

        TMP_TEMPERATURE_TF_ = PointTypeParameter(
            parameter_number=18,
            parameter_name='TMP (Temperature, Tf)',
            parameter_desc='Temperature in °F or °C. Note: Refer to API Chapter 21.1 (September 1993) and to AGA Report No. 7 (1996).',
            data_type=dt.FL,
            access='R/W',
            value_range='>= -200 Deg F (- 128.9 Deg C) 760 Deg F (404.4 Deg C)'
        )
        """
        Temperature in °F or °C. Note: Refer to API Chapter 21.1 (September 1993) and to AGA Report No. 7 (1996).
        """

        STATIC_PRESSURE_DEADWEIGHT_CALIBRATOR = PointTypeParameter(
            parameter_number=19,
            parameter_name='Static Pressure Deadweight Calibrator',
            parameter_desc='Expand the volume flow equation to include the local gravitational correction for the deadweight calibrator on Static Pressure (Fpwl(static)). Valid values are 0 (Do Not Use) and 1 (Use). Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992), Appendix 3-A.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Expand the volume flow equation to include the local gravitational correction for the deadweight calibrator on Static Pressure (Fpwl(static)). Valid values are
        0 (Do Not Use) and 1 (Use). Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992), Appendix 3-A.
        """

        CALIBRATION_WEIGHTS_GRAVITATIONAL_ACCELERATION = PointTypeParameter(
            parameter_number=20,
            parameter_name='Calibration Weights Gravitational Acceleration',
            parameter_desc='Used to calculate pwl(static)- Entered in ft/sec2 or m/sec2. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992), Appendix 3-A.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any positive valid IEEE 754 float'
        )
        """
        Used to calculate pwl(static)- Entered in ft/sec2 or m/sec2. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992), Appendix 3-A.
        """

        USER_CORRECTION_FACTOR = PointTypeParameter(
            parameter_number=21,
            parameter_name='User Correction Factor',
            parameter_desc='Variable multiplied through the volume flow equation to allow the user to modify the flow (Fuc).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Variable multiplied through the volume flow equation to allow the user to modify the flow (Fuc).
        """

        LOW_FLOW_CUTOFF = PointTypeParameter(
            parameter_number=22,
            parameter_name='Low Flow Cutoff',
            parameter_desc='Indicates the cutoff point for the uncorrected flow rate if it is not obtained from a pulse input. If the uncorrected flow rate input is equal to or below this value, the uncorrected flow rate value (parameter #14) will be set to zero. If the uncorrected flow rate is obtained from a pulse input, all pulses are considered flow and this value is meaningless.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 any valid IEEE 754 float'
        )
        """
        Indicates the cutoff point for the uncorrected flow rate if it is not obtained from a pulse input. If the uncorrected flow rate input is equal to or below this
        value, the uncorrected flow rate value (parameter #14) will be set to zero. If the uncorrected flow rate is obtained from a pulse input, all pulses are
        considered flow and this value is meaningless.
        """

        SPEED_OF_SOUND_OPTION = PointTypeParameter(
            parameter_number=23,
            parameter_name='Speed Of Sound Option',
            parameter_desc='Indicates the status of the speed of sound calculation. Valid vaues are 0 (Disabled) and 1 (Enabled). If enabled, the calculated value of the speed of sound is stored in point type116, parameter 33.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates the status of the speed of sound calculation. Valid vaues are 0 (Disabled) and 1 (Enabled). If enabled, the calculated value of the speed of sound is
        stored in point type116, parameter 33.
        """

        K_FACTOR_OPTION = PointTypeParameter(
            parameter_number=24,
            parameter_name='K-Factor Option',
            parameter_desc='Indicates whether a single K-factor is used or the K-factor table with interpolation between points. Valid values are 0 (Use Single K-factor,) and 1 (Use K-Factor table).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether a single K-factor is used or the K-factor table with interpolation between points. Valid values are 0 (Use Single K-factor,) and 1 (Use
        K-Factor table).
        """

        K_FACTOR_1 = PointTypeParameter(
            parameter_number=25,
            parameter_name='K-Factor 1',
            parameter_desc='This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #26).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0 any valid IEEE 754 float'
        )
        """
        This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #26).
        """

        K_FACTOR_1_FREQUENCY = PointTypeParameter(
            parameter_number=26,
            parameter_name='K-Factor 1 Frequency',
            parameter_desc='Frequency in Hz that corresponds with K-Factor 1 (parameter #25).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 any valid IEEE 754 float'
        )
        """
        Frequency in Hz that corresponds with K-Factor 1 (parameter #25).
        """

        K_FACTOR_2 = PointTypeParameter(
            parameter_number=27,
            parameter_name='K-Factor 2',
            parameter_desc='This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #28).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0 any valid IEEE 754 float'
        )
        """
        This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #28).
        """

        K_FACTOR_2_FREQUENCY = PointTypeParameter(
            parameter_number=28,
            parameter_name='K-Factor 2 Frequency',
            parameter_desc='Frequency in Hz that corresponds with K-Factor 2 (parameter #27).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 any valid IEEE 754 float'
        )
        """
        Frequency in Hz that corresponds with K-Factor 2 (parameter #27).
        """

        K_FACTOR_3 = PointTypeParameter(
            parameter_number=29,
            parameter_name='K-Factor 3',
            parameter_desc='This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #30).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0 any valid IEEE 754 float'
        )
        """
        This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #30).
        """

        K_FACTOR_3_FREQUENCY = PointTypeParameter(
            parameter_number=30,
            parameter_name='K-Factor 3 Frequency',
            parameter_desc='Frequency in Hz that corresponds with K-Factor 3 (parameter #29).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 any valid IEEE 754 float'
        )
        """
        Frequency in Hz that corresponds with K-Factor 3 (parameter #29).
        """

        K_FACTOR_4 = PointTypeParameter(
            parameter_number=31,
            parameter_name='K-Factor 4',
            parameter_desc='This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #32).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0 any valid IEEE 754 float'
        )
        """
        This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #32).
        """

        K_FACTOR_4_FREQUENCY = PointTypeParameter(
            parameter_number=32,
            parameter_name='K-Factor 4 Frequency',
            parameter_desc='Frequency in Hz that corresponds with K-Factor 4 (parameter #31).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 any valid IEEE 754 float'
        )
        """
        Frequency in Hz that corresponds with K-Factor 4 (parameter #31).
        """

        K_FACTOR_5 = PointTypeParameter(
            parameter_number=33,
            parameter_name='K-Factor 5',
            parameter_desc='This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #34).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0 any valid IEEE 754 float'
        )
        """
        This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #34).
        """

        K_FACTOR_5_FREQUENCY = PointTypeParameter(
            parameter_number=34,
            parameter_name='K-Factor 5 Frequency',
            parameter_desc='Frequency in Hz that corresponds with K-Factor 5 (parameter #33).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 any valid IEEE 754 float'
        )
        """
        Frequency in Hz that corresponds with K-Factor 5 (parameter #33).
        """

        K_FACTOR_6 = PointTypeParameter(
            parameter_number=35,
            parameter_name='K-Factor 6',
            parameter_desc='This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #36).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0 any valid IEEE 754 float'
        )
        """
        This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #36).
        """

        K_FACTOR_6_FREQUENCY = PointTypeParameter(
            parameter_number=36,
            parameter_name='K-Factor 6 Frequency',
            parameter_desc='Frequency in Hz that corresponds with K-Factor 6 (parameter #35).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 any valid IEEE 754 float'
        )
        """
        Frequency in Hz that corresponds with K-Factor 6 (parameter #35).
        """

        K_FACTOR_7 = PointTypeParameter(
            parameter_number=37,
            parameter_name='K-Factor 7',
            parameter_desc='This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #38).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0 any valid IEEE 754 float'
        )
        """
        This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #38).
        """

        K_FACTOR_7_FREQUENCY = PointTypeParameter(
            parameter_number=38,
            parameter_name='K-Factor 7 Frequency',
            parameter_desc='Frequency in Hz that corresponds with K-Factor 7 (parameter #37).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 any valid IEEE 754 float'
        )
        """
        Frequency in Hz that corresponds with K-Factor 7 (parameter #37).
        """

        K_FACTOR_8 = PointTypeParameter(
            parameter_number=39,
            parameter_name='K-Factor 8',
            parameter_desc='This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #40).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0 any valid IEEE 754 float'
        )
        """
        This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #40).
        """

        K_FACTOR_8_FREQUENCY = PointTypeParameter(
            parameter_number=40,
            parameter_name='K-Factor 8 Frequency',
            parameter_desc='Frequency in Hz that corresponds with K-Factor 8 (parameter #39).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 any valid IEEE 754 float'
        )
        """
        Frequency in Hz that corresponds with K-Factor 8 (parameter #39).
        """

        K_FACTOR_9 = PointTypeParameter(
            parameter_number=41,
            parameter_name='K-Factor 9',
            parameter_desc='This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #42).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0 any valid IEEE 754 float'
        )
        """
        This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #42).
        """

        K_FACTOR_9_FREQUENCY = PointTypeParameter(
            parameter_number=42,
            parameter_name='K-Factor 9 Frequency',
            parameter_desc='Frequency in Hz that corresponds with K-Factor 9 (parameter #41).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 any valid IEEE 754 float'
        )
        """
        Frequency in Hz that corresponds with K-Factor 9 (parameter #41).
        """

        K_FACTOR_10 = PointTypeParameter(
            parameter_number=43,
            parameter_name='K-Factor 10',
            parameter_desc='This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #44).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0 any valid IEEE 754 float'
        )
        """
        This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #44).
        """

        K_FACTOR_10_FREQUENCY = PointTypeParameter(
            parameter_number=44,
            parameter_name='K-Factor 10 Frequency',
            parameter_desc='Frequency in Hz that corresponds with K-Factor 10 (parameter #43).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 any valid IEEE 754 float'
        )
        """
        Frequency in Hz that corresponds with K-Factor 10 (parameter #43).
        """

        K_FACTOR_11 = PointTypeParameter(
            parameter_number=45,
            parameter_name='K-Factor 11',
            parameter_desc='This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m3 for the associated frequency in Hz (parameter #46).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0 any valid IEEE 754 float'
        )
        """
        This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m3 for the associated frequency in Hz (parameter #46).
        """

        K_FACTOR_11_FREQUENCY = PointTypeParameter(
            parameter_number=46,
            parameter_name='K-Factor 11 Frequency',
            parameter_desc='Frequency in Hz that corresponds with K-Factor 11 (parameter #45).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 any valid IEEE 754 float'
        )
        """
        Frequency in Hz that corresponds with K-Factor 11 (parameter #45).
        """

        K_FACTOR_12 = PointTypeParameter(
            parameter_number=47,
            parameter_name='K-Factor 12',
            parameter_desc='This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #48).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0 any valid IEEE 754 float'
        )
        """
        This is the linear meter constant (K-Factor) in pulses/ft³ or pulses/m³ for the associated frequency in Hz (parameter #48).
        """

        K_FACTOR_12_FREQUENCY = PointTypeParameter(
            parameter_number=48,
            parameter_name='K-Factor 12 Frequency',
            parameter_desc='Frequency in Hz that corresponds with K-Factor 12 (parameter #47).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 any valid IEEE 754 float'
        )
        """
        Frequency in Hz that corresponds with K-Factor 12 (parameter #47).
        """

        METER_INPUT_TYPE = PointTypeParameter(
            parameter_number=49,
            parameter_name='Meter Input Type',
            parameter_desc='Indicates whether the meter input is an actual volume or a mass reading. Valid values are 0 (Volume) and 1 (Mass).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether the meter input is an actual volume or a mass reading. Valid values are 0 (Volume) and 1 (Mass).
        """

        MASS_PRESSURE_COMPENSATION_OPTION = PointTypeParameter(
            parameter_number=50,
            parameter_name='Mass Pressure Compensation Option',
            parameter_desc='Indicates whether the mass input requires compensation for pressure effect on the Coriolis tube. Valid values are 0 (Mass pressure compensation disabled) and 1 (Mass pressure compensation enabled). Note: This parameter is applicable only when mass has been selected for the Meter Input Type (parameter #49)',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether the mass input requires compensation for pressure effect on the Coriolis tube. Valid values are 0 (Mass pressure compensation disabled) and 1
        (Mass pressure compensation enabled). Note: This parameter is applicable only when mass has been selected for the Meter Input Type (parameter #49)
        """

        CALIBRATION_PRESSURE = PointTypeParameter(
            parameter_number=51,
            parameter_name='Calibration Pressure',
            parameter_desc='Pressure mass meter was calibrated at in PSIG. Note: his parameter is applicable only when mass has been selected for the Meter Input Type (parameter #49) and the Mass Pressure Compensation Option (parameter #50).',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Pressure mass meter was calibrated at in PSIG. Note: his parameter is applicable only when mass has been selected for the Meter Input Type (parameter #49) and
        the Mass Pressure Compensation Option (parameter #50).
        """

        PRESSURE_EFFECT_MASS_COMPENSATION_COEFFICIENT = PointTypeParameter(
            parameter_number=52,
            parameter_name='Pressure Effect Mass Compensation Coefficient',
            parameter_desc='Pressure correction coefficient for mass in percent per psi. This value is supplied by the manufacturer for the given model mass meter. This parameter is only applicable when mass has been selected for the Meter Input Type (parameter #49) and the Mass Pressure Compensation Option (parameter #50) has been enabled.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any negative valid IEEE 754 float 0.0'
        )
        """
        Pressure correction coefficient for mass in percent per psi. This value is supplied by the manufacturer for the given model mass meter. This parameter is only
        applicable when mass has been selected for the Meter Input Type (parameter #49) and the Mass Pressure Compensation Option (parameter #50) has been enabled.
        """

        METER_SIGNAL = PointTypeParameter(
            parameter_number=54,
            parameter_name='Meter Signal',
            parameter_desc='Sets the meter signal type. Valid values are 0 (Pulse/Analog) and 1 (Accumulator). When Accumulator is selected, the user is also prompted to enter the accumulator input point and the accumulator rollover value.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 1'
        )
        """
        Sets the meter signal type. Valid values are 0 (Pulse/Analog) and 1 (Accumulator). When Accumulator is selected, the user is also prompted to enter the
        accumulator input point and the accumulator rollover value.
        """

        ACCUMULATOR_ROLLOVER_VALUE = PointTypeParameter(
            parameter_number=55,
            parameter_name='Accumulator Rollover Value',
            parameter_desc='Sets the accumulator rollover value. This field indicates the rollover value for the accumulator input value and applies only when the selected meter signal type is accumulator.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Sets the accumulator rollover value. This field indicates the rollover value for the accumulator input value and applies only when the selected meter signal
        type is accumulator.
        """

        ACCUMULATOR_TLP = PointTypeParameter(
            parameter_number=56,
            parameter_name='Accumulator TLP',
            parameter_desc='Indicates what is being used to get the accumulator input (parameter #57).',
            data_type=dt.TLP,
            access='R/W',
            value_range='TLP 0,0,0 and TLP 60-77, 0->255, 0-255 (must be float) and TLP 196-238 0->255, 0->255 (must be float) and TLP 239 254 0->255, 0->255 (must be float) and TLP 103,5-148,21 and TLP 96,0->5,2->11and TLP 98,0-31, 1-20'
        )
        """
        Indicates what is being used to get the accumulator input (parameter #57).
        """

        ACCUMULATOR_VALUE = PointTypeParameter(
            parameter_number=57,
            parameter_name='Accumulator Value',
            parameter_desc='Accumulator input. Note: This value can either represent the mass accumulation or the volume accumulation depending on the meter input type selection (param #49). Note: If meter input type is mass valid units are Lb for U.S units and Kg for Metric units. If meter input type is volume valid units are MCF for U.S units and KM3 for metric units.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Accumulator input. Note: This value can either represent the mass accumulation or the volume accumulation depending on the meter input type selection (param
        #49). Note: If meter input type is mass valid units are Lb for U.S units and Kg for Metric units. If meter input type is volume valid units are MCF for U.S
        units and KM3 for metric units.
        """





class TURBINE_METER_RUN_VALUES(PointType):
    """Turbine Meter Run Values"""

    point_type_number: int = 116
    """Point Type ID"""

    point_type_desc: str = 'Turbine Meter Run Values'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        FLOW_RATE_PER_DAY = PointTypeParameter(
            parameter_number=0,
            parameter_name='Flow Rate per Day',
            parameter_desc='Volume flow rate at base condition in mft3/day or km3/day.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Volume flow rate at base condition in mft3/day or km3/day.
        """

        ENERGY_RATE_PER_DAY = PointTypeParameter(
            parameter_number=1,
            parameter_name='Energy Rate per Day',
            parameter_desc='Energy rate at base conditions in mmBtu/day or GJ/day.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Energy rate at base conditions in mmBtu/day or GJ/day.
        """

        FLOW_RATE_PER_HOUR = PointTypeParameter(
            parameter_number=2,
            parameter_name='Flow Rate per Hour',
            parameter_desc='Volume flow rate at base conditions in ft3/hour or m³/hour. Note: Refer to AGA Report No. 7 (1996).',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Volume flow rate at base conditions in ft3/hour or m³/hour. Note: Refer to AGA Report No. 7 (1996).
        """

        ENERGY_RATE_PER_HOUR = PointTypeParameter(
            parameter_number=3,
            parameter_name='Energy Rate per Hour',
            parameter_desc='Energy rate at base conditions in Btu/hour or MJ/hour.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Energy rate at base conditions in Btu/hour or MJ/hour.
        """

        PRESSURE_MULTIPLIER = PointTypeParameter(
            parameter_number=4,
            parameter_name='Pressure Multiplier',
            parameter_desc='Represents the AGA 7 pressure factor (R/O) if station calculation method (pt type 112, parameter #1) has been configured for AGA3/7 (Gas) or ISO5167/ISO9951 (Gas). Represents CPL (R/W) if station calculation method (pt type 112, parameter #1) has been configured for ISO5167/API Ch.12 (Liquid). Note: Refer to API Chapter 21.1 (September 1993) and to AGA Report No. 7 (1996).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Represents the AGA 7 pressure factor (R/O) if station calculation method (pt type 112, parameter #1) has been configured for AGA3/7 (Gas) or ISO5167/ISO9951
        (Gas). Represents CPL (R/W) if station calculation method (pt type 112, parameter #1) has been configured for ISO5167/API Ch.12 (Liquid). Note: Refer to API
        Chapter 21.1 (September 1993) and to AGA Report No. 7 (1996).
        """

        TEMPERATURE_MULTIPLIER = PointTypeParameter(
            parameter_number=5,
            parameter_name='Temperature Multiplier',
            parameter_desc='Represents the AGA 7 temperature factor (R/O) if station calculation method (pt type 112, parameter #1) has been configured for AGA3/7 (Gas) or ISO5167/9951 (Gas). Represents CTL (R/W) if station calculation method (pt type 112, parameter #1) has been configured for ISO5167/API Ch.12 (Liquid). Note: Refer to API Chapter 21.1 (September 1993) and to AGA Report No. 7 (1996).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Represents the AGA 7 temperature factor (R/O) if station calculation method (pt type 112, parameter #1) has been configured for AGA3/7 (Gas) or ISO5167/9951
        (Gas). Represents CTL (R/W) if station calculation method (pt type 112, parameter #1) has been configured for ISO5167/API Ch.12 (Liquid). Note: Refer to API
        Chapter 21.1 (September 1993) and to AGA Report No. 7 (1996).
        """

        COMPRESSIBILITY_MULTIPLIER = PointTypeParameter(
            parameter_number=6,
            parameter_name='Compressibility Multiplier',
            parameter_desc='Represents the compressibility factor. Note: Refer to API Chapter 21.1 (September 1993) and to AGA Report No. 7 (1996).',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Represents the compressibility factor. Note: Refer to API Chapter 21.1 (September 1993) and to AGA Report No. 7 (1996).
        """

        ZF1 = PointTypeParameter(
            parameter_number=7,
            parameter_name='Zf1',
            parameter_desc='Represents the compressibility at upstream flowing conditions. Note: Refer to API Chater 14.2 (AGA Report No. 8 1992 2nd Printing 1994).',
            data_type=dt.FL,
            access='R/W',
            value_range='> 0.0-Any positive valid IEEE 754 float'
        )
        """
        Represents the compressibility at upstream flowing conditions. Note: Refer to API Chater 14.2 (AGA Report No. 8 1992 2nd Printing 1994).
        """

        MULTIPLIER_VALUE = PointTypeParameter(
            parameter_number=8,
            parameter_name='Multiplier Value',
            parameter_desc='Represents the product of the pressure multiplier, the temperature multiplier and the compressibility multiplier.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Represents the product of the pressure multiplier, the temperature multiplier and the compressibility multiplier.
        """

        PULSES_ACCUMULATED = PointTypeParameter(
            parameter_number=9,
            parameter_name='Pulses Accumulated',
            parameter_desc='Ongoing accumulation of the number of pulses input to this meter run. Not used if uncorrected flow rate is not configured for a pulse input point.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-4,294,967,295'
        )
        """
        Ongoing accumulation of the number of pulses input to this meter run. Not used if uncorrected flow rate is not configured for a pulse input point.
        """

        DENSITY = PointTypeParameter(
            parameter_number=10,
            parameter_name='Density',
            parameter_desc='Represents the density of a fluid at flowing conditions in lbm/ft³ or kg/m³. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).',
            data_type=dt.FL,
            access='R/W',
            value_range='> 0.0-Any positive valid IEEE 754 float'
        )
        """
        Represents the density of a fluid at flowing conditions in lbm/ft³ or kg/m³. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992).
        """

        FPWL = PointTypeParameter(
            parameter_number=11,
            parameter_name='Fpwl',
            parameter_desc='Represents the local gravitational correction for the deadweight tester static pressure standard. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992), Appendix 3-A.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Represents the local gravitational correction for the deadweight tester static pressure standard. Note: Refer to ANSI/API 2530-92 (AGA Report No. 3 1992),
        Appendix 3-A.
        """

        FLOW_TODAY = PointTypeParameter(
            parameter_number=12,
            parameter_name='Flow Today',
            parameter_desc='Total accumulation of flow for the current contract day in mft³ or km³.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of flow for the current contract day in mft³ or km³.
        """

        FLOW_YESTERDAY = PointTypeParameter(
            parameter_number=13,
            parameter_name='Flow Yesterday',
            parameter_desc='Total accumulation of flow for the previous contract day in mft³ or km³.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of flow for the previous contract day in mft³ or km³.
        """

        FLOW_MONTH = PointTypeParameter(
            parameter_number=14,
            parameter_name='Flow Month',
            parameter_desc='Total accumulation of flow for the current month in mft³ or km³.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of flow for the current month in mft³ or km³.
        """

        FLOW_PREVIOUS_MONTH = PointTypeParameter(
            parameter_number=15,
            parameter_name='Flow Previous Month',
            parameter_desc='Total accumulation of flow for the previous month in mft³ or km³.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of flow for the previous month in mft³ or km³.
        """

        FLOW_ACCUMULATED = PointTypeParameter(
            parameter_number=16,
            parameter_name='Flow Accumulated',
            parameter_desc='Total accumulation of flow for the meter run in mft³ or km³. The 1,000,000.0 rollover point ensures that flow accuracy is not lost due to the significant digits of a float data type.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0->1,000,000.0'
        )
        """
        Total accumulation of flow for the meter run in mft³ or km³. The 1,000,000.0 rollover point ensures that flow accuracy is not lost due to the significant digits
        of a float data type.
        """

        MINUTES_TODAY = PointTypeParameter(
            parameter_number=17,
            parameter_name='Minutes Today',
            parameter_desc='Total accumulation of flowing minutes for the current contract day.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of flowing minutes for the current contract day.
        """

        MINUTES_YESTERDAY = PointTypeParameter(
            parameter_number=18,
            parameter_name='Minutes Yesterday',
            parameter_desc='Total accumulation of flowing minutes for the previous contract day.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of flowing minutes for the previous contract day.
        """

        MINUTES_MONTH = PointTypeParameter(
            parameter_number=19,
            parameter_name='Minutes Month',
            parameter_desc='Total accumulation of flowing minutes for the current month.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of flowing minutes for the current month.
        """

        MINUTES_PREVIOUS_MONTH = PointTypeParameter(
            parameter_number=20,
            parameter_name='Minutes Previous Month',
            parameter_desc='Total accumulation of flowing minutes for the previous month.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of flowing minutes for the previous month.
        """

        MINUTES_ACCUMULATED = PointTypeParameter(
            parameter_number=21,
            parameter_name='Minutes Accumulated',
            parameter_desc='Total accumulation of flowing minutes for the meter run. The 1,000,000.0 rollover is to ensure that flow minutes accuracy is not lost due to the significant digits of a float data type.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0->1,000,000.0'
        )
        """
        Total accumulation of flowing minutes for the meter run. The 1,000,000.0 rollover is to ensure that flow minutes accuracy is not lost due to the significant
        digits of a float data type.
        """

        ENERGY_TODAY = PointTypeParameter(
            parameter_number=22,
            parameter_name='Energy Today',
            parameter_desc='Total accumulation of energy for the current contract day in mmBtu or GJ.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of energy for the current contract day in mmBtu or GJ.
        """

        ENERGY_YESTERDAY = PointTypeParameter(
            parameter_number=23,
            parameter_name='Energy Yesterday',
            parameter_desc='Total accumulation of energy for the previous contract day in mmBtu or GJ.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of energy for the previous contract day in mmBtu or GJ.
        """

        ENERGY_MONTH = PointTypeParameter(
            parameter_number=24,
            parameter_name='Energy Month',
            parameter_desc='Total accumulation of energy for the current month in mmBtu or GJ.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of energy for the current month in mmBtu or GJ.
        """

        ENERGY_PREVIOUS_MONTH = PointTypeParameter(
            parameter_number=25,
            parameter_name='Energy Previous Month',
            parameter_desc='Total accumulation of energy for the previous month in mmBtu or GJ.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of energy for the previous month in mmBtu or GJ.
        """

        ENERGY_ACCUMULATED = PointTypeParameter(
            parameter_number=26,
            parameter_name='Energy Accumulated',
            parameter_desc='Total accumulation of energy for the meter run in mmBtu or GJ. The 1,000,000.0 rollover is to ensure that energy accuracy is not lost due to the significant digits of a float data type.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0->1,000,000.0'
        )
        """
        Total accumulation of energy for the meter run in mmBtu or GJ. The 1,000,000.0 rollover is to ensure that energy accuracy is not lost due to the significant
        digits of a float data type.
        """

        UNCORRECTED_TODAY = PointTypeParameter(
            parameter_number=27,
            parameter_name='Uncorrected Today',
            parameter_desc='Total accumulation of uncorrected flow for the current contract day in mft3 or km³',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of uncorrected flow for the current contract day in mft3 or km³
        """

        UNCORRECTED_YESTERDAY = PointTypeParameter(
            parameter_number=28,
            parameter_name='Uncorrected Yesterday',
            parameter_desc='Total accumulation of uncorrected flow for the previous contract day in mft³ or km³.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of uncorrected flow for the previous contract day in mft³ or km³.
        """

        UNCORRECTED_MONTH = PointTypeParameter(
            parameter_number=29,
            parameter_name='Uncorrected Month',
            parameter_desc='Total accumulation of uncorrected flow for the current month in mft³ or km³.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of uncorrected flow for the current month in mft³ or km³.
        """

        UNCORRECTED_PREVIOUS_MONTH = PointTypeParameter(
            parameter_number=30,
            parameter_name='Uncorrected Previous Month',
            parameter_desc='Total accumulation of uncorrected flow for the previous month in mft³ or km³.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Total accumulation of uncorrected flow for the previous month in mft³ or km³.
        """

        UNCORRECTED_ACCUMULATED = PointTypeParameter(
            parameter_number=31,
            parameter_name='Uncorrected Accumulated',
            parameter_desc='Total accumulation of uncorrected flow for the meter run in mft³ or km³. The 1,000,000.0 rollover is to ensure that uncorrected flow accuracy is not lost due to the significant digits of a float data type.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0->1,000,000.0'
        )
        """
        Total accumulation of uncorrected flow for the meter run in mft³ or km³. The 1,000,000.0 rollover is to ensure that uncorrected flow accuracy is not lost due to
        the significant digits of a float data type.
        """

        MEASURED_SPEED_OF_SOUND = PointTypeParameter(
            parameter_number=32,
            parameter_name='Measured Speed Of Sound',
            parameter_desc='Speed of Sound measured by the ultrasonic flowmeter in feet/second or meters/second. This parameter is intended to store the value retrieved from the ultrasonic meter via Modbus protocol.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Speed of Sound measured by the ultrasonic flowmeter in feet/second or meters/second. This parameter is intended to store the value retrieved from the ultrasonic
        meter via Modbus protocol.
        """

        CALCULATED_SPEED_OF_SOUND = PointTypeParameter(
            parameter_number=33,
            parameter_name='Calculated Speed Of Sound',
            parameter_desc='Speed of Sound calculated per AGA10 in feet/second or meters/second. Note: The system writes this value only if you enable the speed of sound calculation (point type 115, parameter 23).',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Speed of Sound calculated per AGA10 in feet/second or meters/second. Note: The system writes this value only if you enable the speed of sound calculation (point
        type 115, parameter 23).
        """

        MASS_RATE_PER_DAY = PointTypeParameter(
            parameter_number=34,
            parameter_name='Mass Rate Per Day',
            parameter_desc='Mass flow rate in mlb/day or tonnes/day.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Mass flow rate in mlb/day or tonnes/day.
        """

        MASS_RATE_PER_HOUR = PointTypeParameter(
            parameter_number=35,
            parameter_name='Mass Rate Per Hour',
            parameter_desc='Mass flow rate in lb/hr or kg/hr.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Mass flow rate in lb/hr or kg/hr.
        """

        MASS_TODAY = PointTypeParameter(
            parameter_number=36,
            parameter_name='Mass Today',
            parameter_desc='Total accumulation of mass since the last contract hour in mlb or tonnes.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Total accumulation of mass since the last contract hour in mlb or tonnes.
        """

        MASS_YESTERDAY = PointTypeParameter(
            parameter_number=37,
            parameter_name='Mass Yesterday',
            parameter_desc='Total accumulation of mass for the previous contract day in mlb or tonnes.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Total accumulation of mass for the previous contract day in mlb or tonnes.
        """

        MASS_MONTH = PointTypeParameter(
            parameter_number=38,
            parameter_name='Mass Month',
            parameter_desc='Total accumulation of mass for the current month in mlb or tonnes.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Total accumulation of mass for the current month in mlb or tonnes.
        """

        MASS_PREVIOUS_MONTH = PointTypeParameter(
            parameter_number=39,
            parameter_name='Mass Previous Month',
            parameter_desc='Total accumulation of mass for the previous month in mlb or tonnes.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Total accumulation of mass for the previous month in mlb or tonnes.
        """

        MASS_ACCUMULATED = PointTypeParameter(
            parameter_number=40,
            parameter_name='Mass Accumulated',
            parameter_desc='Total accumulation of mass for the meter run in mlb or tonnes. The 1,000,000 rollover point ensures that accuracy is not lost due to the significant digits of a float data type.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Total accumulation of mass for the meter run in mlb or tonnes. The 1,000,000 rollover point ensures that accuracy is not lost due to the significant digits of a
        float data type.
        """

        FLOW_ACCUMULATED_DOUBLE_PRECISION = PointTypeParameter(
            parameter_number=41,
            parameter_name='Flow Accumulated Double Precision',
            parameter_desc='Total accumulation of flow for the meter run in mft³ or km³. Rollover is based upon the user defined rollover.',
            data_type=dt.DBL,
            access='R/O',
            value_range='Any valid IEEE double precision float'
        )
        """
        Total accumulation of flow for the meter run in mft³ or km³. Rollover is based upon the user defined rollover.
        """

        MINUTES_ACCUMULATED_DOUBLE_PRECISION = PointTypeParameter(
            parameter_number=42,
            parameter_name='Minutes Accumulated Double Precision',
            parameter_desc='Total accumulation of flowing minutes for the meter run. Rollover is based upon the user defined rollover.',
            data_type=dt.DBL,
            access='R/O',
            value_range='Any valid IEEE double precision float'
        )
        """
        Total accumulation of flowing minutes for the meter run. Rollover is based upon the user defined rollover.
        """

        ENERGY_ACCUMULATED_DOUBLE_PRECISION = PointTypeParameter(
            parameter_number=43,
            parameter_name='Energy Accumulated Double Precision',
            parameter_desc='Total accumulation of energy for the previous month in mmBtu or GJ. Rollover is based upon the user defined rollover.',
            data_type=dt.DBL,
            access='R/O',
            value_range='Any valid IEEE double precision float'
        )
        """
        Total accumulation of energy for the previous month in mmBtu or GJ. Rollover is based upon the user defined rollover.
        """

        UNCORRECTED_FLOW_ACCUMULATED_DOUBLE_PRECISION = PointTypeParameter(
            parameter_number=44,
            parameter_name='Uncorrected Flow Accumulated Double Precision',
            parameter_desc='Total accumulation of uncorrected flow for the meter run in mft³ or km³. Rollover is based upon the user defined rollover.',
            data_type=dt.DBL,
            access='R/O',
            value_range='Any valid IEEE double precision float'
        )
        """
        Total accumulation of uncorrected flow for the meter run in mft³ or km³. Rollover is based upon the user defined rollover.
        """

        MASS_ACCUMULATED_DOUBLE_PRECISION = PointTypeParameter(
            parameter_number=45,
            parameter_name='Mass Accumulated Double Precision',
            parameter_desc='Total accumulation of mass for the meter run in mlb or tonnes. Rollover is based upon the user defined rollover.',
            data_type=dt.DBL,
            access='R/O',
            value_range='Any valid IEEE double precision float'
        )
        """
        Total accumulation of mass for the meter run in mlb or tonnes. Rollover is based upon the user defined rollover.
        """





class MODBUS_CONFIG_PARAMETERS(PointType):
    """Modbus Configuration Parameters"""

    point_type_number: int = 117
    """Point Type ID"""

    point_type_desc: str = 'Modbus Configuration Parameters'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        TRANSMISSION_MODE = PointTypeParameter(
            parameter_number=0,
            parameter_name='Transmission Mode',
            parameter_desc='Controls the type of transmission mode desired. Valid values are 0 (RTU Mode) and 1 (ASCII Mode).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Controls the type of transmission mode desired. Valid values are 0 (RTU Mode) and 1 (ASCII Mode).
        """

        BYTE_ORDER = PointTypeParameter(
            parameter_number=1,
            parameter_name='Byte Order',
            parameter_desc='Controls which byte is sent out first for floats, short integers, and long integers. Valid values are 0 (LSB first associated with little-endian processors) and 1 (MSB first, aAssociated with big-endian processors).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Controls which byte is sent out first for floats, short integers, and long integers. Valid values are 0 (LSB first associated with little-endian processors) and
        1 (MSB first, aAssociated with big-endian processors).
        """

        EVENT_LOG_ENABLE = PointTypeParameter(
            parameter_number=2,
            parameter_name='Event Log Enable',
            parameter_desc='Controls if changes to Modbus registers are logged to the event log or not (Slave mode only). Valid values are 0 (No Logging) and 1 (Log to Event Log).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Controls if changes to Modbus registers are logged to the event log or not (Slave mode only). Valid values are 0 (No Logging) and 1 (Log to Event Log).
        """

        SLAVE_EXCEPTION_STATUS = PointTypeParameter(
            parameter_number=3,
            parameter_name='Slave Exception Status',
            parameter_desc='Contains the error code for the last Modbus message received (Slave mode only). Valid values are: 0 = No Error 1 = Illegal Function 2 = Illegal Data Address 3 = Illegal Data Value',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-3'
        )
        """
        Contains the error code for the last Modbus message received (Slave mode only). Valid values are: 0 = No Error 1 = Illegal Function 2 = Illegal Data Address 3 =
        Illegal Data Value
        """

        MASTER_POLL_REQUEST_TRIGGER = PointTypeParameter(
            parameter_number=4,
            parameter_name='Master Poll Request Trigger',
            parameter_desc='Controls the initiation of a Modbus master polling sequence (Master mode only). Valid values are 0 (No polling) and 1 (Begin polling with the entry in the Modbus master table indicated by the master starting request number [parameter #5] and continue through the table for the number of master requests [parameter #6]). The system resets this parameter when the polling sequence completes.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Controls the initiation of a Modbus master polling sequence (Master mode only). Valid values are 0 (No polling) and 1 (Begin polling with the entry in the
        Modbus master table indicated by the master starting request number [parameter #5] and continue through the table for the number of master requests [parameter
        #6]). The system resets this parameter when the polling sequence completes.
        """

        MASTER_STARTING_REQUEST_NUMBER = PointTypeParameter(
            parameter_number=5,
            parameter_name='Master Starting Request Number',
            parameter_desc='Contains the request number in the Modbus master table to begin with when the Modbus master poll request trigger (parameter #4) is set (Master mode only).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='1-75'
        )
        """
        Contains the request number in the Modbus master table to begin with when the Modbus master poll request trigger (parameter #4) is set (Master mode only).
        """

        MASTER_NUMBER_OF_REQUESTS = PointTypeParameter(
            parameter_number=6,
            parameter_name='Master Number of Requests',
            parameter_desc='Contains the total number of Modbus requests to be made when the Modbus master poll request trigger (parameter #4) is set (Master mode only).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-75'
        )
        """
        Contains the total number of Modbus requests to be made when the Modbus master poll request trigger (parameter #4) is set (Master mode only).
        """

        MASTER_CONTINUOUS_POLLING_ENABLE = PointTypeParameter(
            parameter_number=7,
            parameter_name='Master Continuous Polling Enable',
            parameter_desc='Controls whether the Modbus master poll request sequence specified is executed on a continuous basis (Master mode only). Valid values are 0 (Continuous polling disabled) and 1 (Continuous polling enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Controls whether the Modbus master poll request sequence specified is executed on a continuous basis (Master mode only). Valid values are 0 (Continuous polling
        disabled) and 1 (Continuous polling enabled).
        """

        MASTER_POLL_REQUEST_DELAY = PointTypeParameter(
            parameter_number=8,
            parameter_name='Master Poll Request Delay',
            parameter_desc='Contains the delay time in seconds between continuous master poll requests (Continuous poll mode only). Note: Default and minimum changed in Ver. 3.60',
            data_type=dt.FL,
            access='R/W',
            value_range='1 86400 (24 hrs)'
        )
        """
        Contains the delay time in seconds between continuous master poll requests (Continuous poll mode only). Note: Default and minimum changed in Ver. 3.60
        """

        LOW_INTEGER_SCALE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Low Integer Scale',
            parameter_desc='Contains the lower limit value when scaling floating- point data.',
            data_type=dt.INT16,
            access='R/W',
            value_range='-32768 32767'
        )
        """
        Contains the lower limit value when scaling floating- point data.
        """

        HIGH_INTEGER_SCALE = PointTypeParameter(
            parameter_number=11,
            parameter_name='High Integer Scale',
            parameter_desc='Contains the upper limit value when scaling floating- point data.',
            data_type=dt.INT16,
            access='R/W',
            value_range='-32768 32767'
        )
        """
        Contains the upper limit value when scaling floating- point data.
        """

        LOW_FLOAT_SCALE_1 = PointTypeParameter(
            parameter_number=12,
            parameter_name='Low Float Scale 1',
            parameter_desc='Contains the lower limit in float range 1 when converting integers to floats and vice-versa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any IEEE 754 floating point number'
        )
        """
        Contains the lower limit in float range 1 when converting integers to floats and vice-versa.
        """

        HIGH_FLOAT_SCALE_1 = PointTypeParameter(
            parameter_number=13,
            parameter_name='High Float Scale 1',
            parameter_desc='Contains the upper limit in float range 1 when converting integers to floats and vice-versa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any IEEE 754 floating point number'
        )
        """
        Contains the upper limit in float range 1 when converting integers to floats and vice-versa.
        """

        LOW_FLOAT_SCALE_2 = PointTypeParameter(
            parameter_number=14,
            parameter_name='Low Float Scale 2',
            parameter_desc='Contains the lower limit in float range 2 when converting integers to floats and vice-versa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any IEEE 754 floating point number'
        )
        """
        Contains the lower limit in float range 2 when converting integers to floats and vice-versa.
        """

        HIGH_FLOAT_SCALE_2 = PointTypeParameter(
            parameter_number=15,
            parameter_name='High Float Scale 2',
            parameter_desc='Contains the upper limit in float range 2 when converting integers to floats and vice-versa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any IEEE 754 floating point number'
        )
        """
        Contains the upper limit in float range 2 when converting integers to floats and vice-versa.
        """

        LOW_FLOAT_SCALE_3 = PointTypeParameter(
            parameter_number=16,
            parameter_name='Low Float Scale 3',
            parameter_desc='Contains the lower limit in float range 3 when converting integers to floats and vice-versa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any IEEE 754 floating point number'
        )
        """
        Contains the lower limit in float range 3 when converting integers to floats and vice-versa.
        """

        HIGH_FLOAT_SCALE_3 = PointTypeParameter(
            parameter_number=17,
            parameter_name='High Float Scale 3',
            parameter_desc='Contains the upper limit in float range 3 when converting integers to floats and vice-versa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any IEEE 754 floating point number'
        )
        """
        Contains the upper limit in float range 3 when converting integers to floats and vice-versa.
        """

        LOW_FLOAT_SCALE_4 = PointTypeParameter(
            parameter_number=18,
            parameter_name='Low Float Scale 4',
            parameter_desc='Contains the lower limit in float range 4 when converting integers to floats and vice-versa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any IEEE 754 floating point number'
        )
        """
        Contains the lower limit in float range 4 when converting integers to floats and vice-versa.
        """

        HIGH_FLOAT_SCALE_4 = PointTypeParameter(
            parameter_number=19,
            parameter_name='High Float Scale 4',
            parameter_desc='Contains the upper limit in float range 4 when converting integers to floats and vice-versa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any IEEE 754 floating point number'
        )
        """
        Contains the upper limit in float range 4 when converting integers to floats and vice-versa.
        """

        LOW_FLOAT_SCALE_5 = PointTypeParameter(
            parameter_number=20,
            parameter_name='Low Float Scale 5',
            parameter_desc='Contains the lower limit in float range 5 when converting integers to floats and vice-versa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any IEEE 754 floating point number'
        )
        """
        Contains the lower limit in float range 5 when converting integers to floats and vice-versa.
        """

        HIGH_FLOAT_SCALE_5 = PointTypeParameter(
            parameter_number=21,
            parameter_name='High Float Scale 5',
            parameter_desc='Contains the upper limit in float range 5 when converting integers to floats and vice-versa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any IEEE 754 floating point number'
        )
        """
        Contains the upper limit in float range 5 when converting integers to floats and vice-versa.
        """

        LOW_FLOAT_SCALE_6 = PointTypeParameter(
            parameter_number=22,
            parameter_name='Low Float Scale 6',
            parameter_desc='Contains the lower limit in float range 6 when converting integers to floats and vice-versa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any IEEE 754 floating point number'
        )
        """
        Contains the lower limit in float range 6 when converting integers to floats and vice-versa.
        """

        HIGH_FLOAT_SCALE_6 = PointTypeParameter(
            parameter_number=23,
            parameter_name='High Float Scale 6',
            parameter_desc='Contains the upper limit in float range 6 when converting integers to floats and vice-versa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any IEEE 754 floating point number'
        )
        """
        Contains the upper limit in float range 6 when converting integers to floats and vice-versa.
        """

        LOW_FLOAT_SCALE_7 = PointTypeParameter(
            parameter_number=24,
            parameter_name='Low Float Scale 7',
            parameter_desc='Contains the lower limit in float range 7 when converting integers to floats and vice-versa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any IEEE 754 floating point number'
        )
        """
        Contains the lower limit in float range 7 when converting integers to floats and vice-versa.
        """

        HIGH_FLOAT_SCALE_7 = PointTypeParameter(
            parameter_number=25,
            parameter_name='High Float Scale 7',
            parameter_desc='Contains the upper limit in float range 7 when converting integers to floats and vice-versa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any IEEE 754 floating point number'
        )
        """
        Contains the upper limit in float range 7 when converting integers to floats and vice-versa.
        """

        LOW_FLOAT_SCALE_8 = PointTypeParameter(
            parameter_number=26,
            parameter_name='Low Float Scale 8',
            parameter_desc='Contains the lower limit in float range 8 when converting integers to floats and vice-versa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any IEEE 754 floating point number'
        )
        """
        Contains the lower limit in float range 8 when converting integers to floats and vice-versa.
        """

        HIGH_FLOAT_SCALE_8 = PointTypeParameter(
            parameter_number=27,
            parameter_name='High Float Scale 8',
            parameter_desc='Contains the upper limit in float range 8 when converting integers to floats and vice-versa.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any IEEE 754 floating point number'
        )
        """
        Contains the upper limit in float range 8 when converting integers to floats and vice-versa.
        """

        MASTER_POLL_TIMEOUT = PointTypeParameter(
            parameter_number=28,
            parameter_name='Master Poll Timeout',
            parameter_desc='Amount of time in seconds Modbus master will wait for a slave response. (Master mode only).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-255'
        )
        """
        Amount of time in seconds Modbus master will wait for a slave response. (Master mode only).
        """

        MASTER_POLL_NUMBER_OF_RETRIES = PointTypeParameter(
            parameter_number=29,
            parameter_name='Master Poll Number of Retries',
            parameter_desc='Number of retries Modbus Master will attempt on a particular request number in the Master Poll Table before giving-up and going to the next request number. (Master mode only).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Number of retries Modbus Master will attempt on a particular request number in the Master Poll Table before giving-up and going to the next request number.
        (Master mode only).
        """





class MODBUS_REGISTER_TO_TLP_MAPPING(PointType):
    """Modbus Register to TLP Mapping"""

    point_type_number: int = 118
    """Point Type ID"""

    point_type_desc: str = 'Modbus Register to TLP Mapping'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Tag ID',
            parameter_desc='String that describes the instance of the mapping table.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        String that describes the instance of the mapping table.
        """

        START_REGISTER_1 = PointTypeParameter(
            parameter_number=1,
            parameter_name='Start Register #1',
            parameter_desc='The starting register number for the first range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting register number for the first range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        END_REGISTER_1 = PointTypeParameter(
            parameter_number=2,
            parameter_name='End Register #1',
            parameter_desc='The ending register number for the first range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The ending register number for the first range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        ROC_PARAMETER_S__REG_RANGE_1_ = PointTypeParameter(
            parameter_number=3,
            parameter_name='ROC Parameter(s) (Reg Range 1)',
            parameter_desc='The starting ROC Plus Protocol TLP that maps to the first range of Modbus registers.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any TLP is valid except for the Program Flash Parameters (PT 90)'
        )
        """
        The starting ROC Plus Protocol TLP that maps to the first range of Modbus registers.
        """

        INDEXING_REG_RANGE_1_ = PointTypeParameter(
            parameter_number=4,
            parameter_name='Indexing (Reg Range 1)',
            parameter_desc='Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing) and 1 (Parameter indexing).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing)
        and 1 (Parameter indexing).
        """

        CONVERSION_CODE_REG_RANGE_1_ = PointTypeParameter(
            parameter_number=5,
            parameter_name='Conversion Code (Reg Range 1)',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='Series 1: 0 8, 25 29, 65 72; Series 2: 0 > 29, 37, 41 81'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        COMM_PORT_REG_RANGE_1_ = PointTypeParameter(
            parameter_number=6,
            parameter_name='Comm Port (Reg Range 1)',
            parameter_desc='Communication port to which the first range of registers map. Vallid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm Port 5 255 = All Comm Ports',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 5, 255'
        )
        """
        Communication port to which the first range of registers map. Vallid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 =
        Comm Port 5 255 = All Comm Ports
        """

        START_REGISTER_2 = PointTypeParameter(
            parameter_number=7,
            parameter_name='Start Register #2',
            parameter_desc='The starting register number for the second range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting register number for the second range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        END_REGISTER_2 = PointTypeParameter(
            parameter_number=8,
            parameter_name='End Register #2',
            parameter_desc='The ending register number for the second range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        The ending register number for the second range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        ROC_PARAMETER_S__REG_RANGE_2_ = PointTypeParameter(
            parameter_number=9,
            parameter_name='ROC Parameter(s) (Reg Range 2)',
            parameter_desc='The starting ROC Plus Protocol TLP that maps to the second range of Modbus registers.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any TLP is valid except for the Program Flash Parameters (PT 90)'
        )
        """
        The starting ROC Plus Protocol TLP that maps to the second range of Modbus registers.
        """

        INDEXING_REG_RANGE_2_ = PointTypeParameter(
            parameter_number=10,
            parameter_name='Indexing (Reg Range 2)',
            parameter_desc='Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. 0 = Logical indexing, 1 = Parameter indexing.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. 0 = Logical indexing, 1 = Parameter
        indexing.
        """

        CONVERSION_CODE_REG_RANGE_2_ = PointTypeParameter(
            parameter_number=11,
            parameter_name='Conversion Code (Reg Range 2)',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='Series 1: 0 8, 25 29, 65 72; Series 2: 0 29, 37, 41 81'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        COMM_PORT_REG_RANGE_2_ = PointTypeParameter(
            parameter_number=12,
            parameter_name='Comm Port (Reg Range 2)',
            parameter_desc='Communication port to which the second range of registers map: Valid values are: 0 LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm Port 5 255 = All Comm Ports',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 5, 255'
        )
        """
        Communication port to which the second range of registers map: Valid values are: 0 LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm
        Port 5 255 = All Comm Ports
        """

        START_REGISTER_3 = PointTypeParameter(
            parameter_number=13,
            parameter_name='Start Register #3',
            parameter_desc='The starting register number for the third range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting register number for the third range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        END_REGISTER_3 = PointTypeParameter(
            parameter_number=14,
            parameter_name='End Register #3',
            parameter_desc='The ending register number for the third range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        The ending register number for the third range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        ROC_PARAMETER_S__REG_RANGE_3_ = PointTypeParameter(
            parameter_number=15,
            parameter_name='ROC Parameter(s) (Reg Range 3)',
            parameter_desc='The starting ROC Plus Protocol TLP that maps to the third range of Modbus registers.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any TLP is valid except for the Program Flash Parameters (PT 90)'
        )
        """
        The starting ROC Plus Protocol TLP that maps to the third range of Modbus registers.
        """

        INDEXING_REG_RANGE_3_ = PointTypeParameter(
            parameter_number=16,
            parameter_name='Indexing (Reg Range 3)',
            parameter_desc='Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. 0 = Logical indexing, 1 = Parameter indexing.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. 0 = Logical indexing, 1 = Parameter
        indexing.
        """

        CONVERSION_CODE_REG_RANGE_3_ = PointTypeParameter(
            parameter_number=17,
            parameter_name='Conversion Code (Reg Range 3)',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='Series 1: 0 8, 25 29, 65 72; Series 2: 0 29, 37, 41 81'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        COMM_PORT_REG_RANGE_3_ = PointTypeParameter(
            parameter_number=18,
            parameter_name='Comm Port (Reg Range 3)',
            parameter_desc='Communication port to which the third range of registers map. Valid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm Port 5 255 = All Comm Ports',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 5, 255'
        )
        """
        Communication port to which the third range of registers map. Valid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm
        Port 5 255 = All Comm Ports
        """

        START_REGISTER_4 = PointTypeParameter(
            parameter_number=19,
            parameter_name='Start Register #4',
            parameter_desc='The starting register number for the fourth range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting register number for the fourth range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        END_REGISTER_4 = PointTypeParameter(
            parameter_number=20,
            parameter_name='End Register #4',
            parameter_desc='The ending register number for the fourth range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The ending register number for the fourth range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        ROC_PARAMETER_S__REG_RANGE_4_ = PointTypeParameter(
            parameter_number=21,
            parameter_name='ROC Parameter(s) (Reg Range 4)',
            parameter_desc='The starting ROC Plus Protocol TLP that maps to the fourth range of Modbus registers.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any TLP is valid except for the Program Flash Parameters (PT 90)'
        )
        """
        The starting ROC Plus Protocol TLP that maps to the fourth range of Modbus registers.
        """

        INDEXING_REG_RANGE_4_ = PointTypeParameter(
            parameter_number=22,
            parameter_name='Indexing (Reg Range 4)',
            parameter_desc='Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing) and 1 (Parameter indexing).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing)
        and 1 (Parameter indexing).
        """

        CONVERSION_CODE_REG_RANGE_4_ = PointTypeParameter(
            parameter_number=23,
            parameter_name='Conversion Code (Reg Range 4)',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='Series 1: 0 8, 25 29, 65 72; Series 2: 0 29, 37, 41 81'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        COMM_PORT_REG_RANGE_4_ = PointTypeParameter(
            parameter_number=24,
            parameter_name='Comm Port (Reg Range 4)',
            parameter_desc='Communication port to which the fourth range of registers map. Valid values are: 0 LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm Port 5 255 = All Comm Ports',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 5, 255'
        )
        """
        Communication port to which the fourth range of registers map. Valid values are: 0 LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm
        Port 5 255 = All Comm Ports
        """

        START_REGISTER_5 = PointTypeParameter(
            parameter_number=25,
            parameter_name='Start Register #5',
            parameter_desc='The starting register number for the fifth range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting register number for the fifth range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        END_REGISTER_5 = PointTypeParameter(
            parameter_number=26,
            parameter_name='End Register #5',
            parameter_desc='The ending register number for the fifth range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The ending register number for the fifth range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        ROC_PARAMETER_S__REG_RANGE_5_ = PointTypeParameter(
            parameter_number=27,
            parameter_name='ROC Parameter(s) (Reg Range 5)',
            parameter_desc='The starting ROC Plus Protocol TLP that maps to the fifth range of Modbus registers.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any TLP is valid except for the Program Flash Parameters (PT 90)'
        )
        """
        The starting ROC Plus Protocol TLP that maps to the fifth range of Modbus registers.
        """

        INDEXING_REG_RANGE_5_ = PointTypeParameter(
            parameter_number=28,
            parameter_name='Indexing (Reg Range 5)',
            parameter_desc='Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing) and 1 (Parameter indexing).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing)
        and 1 (Parameter indexing).
        """

        CONVERSION_CODE_REG_RANGE_5_ = PointTypeParameter(
            parameter_number=29,
            parameter_name='Conversion Code (Reg Range 5)',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='Series 1: 0 8, 25 29, 65 72; Series 2: 0 29, 37, 41 81'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        COMM_PORT_REG_RANGE_5_ = PointTypeParameter(
            parameter_number=30,
            parameter_name='Comm Port (Reg Range 5)',
            parameter_desc='Communication port to which the fifth range of registers map. Valid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm Port 5 255 = All Comm Ports',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 5, 255'
        )
        """
        Communication port to which the fifth range of registers map. Valid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm
        Port 5 255 = All Comm Ports
        """

        START_REGISTER_6 = PointTypeParameter(
            parameter_number=31,
            parameter_name='Start Register #6',
            parameter_desc='The starting register number for the sixth range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting register number for the sixth range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        END_REGISTER_6 = PointTypeParameter(
            parameter_number=32,
            parameter_name='End Register #6',
            parameter_desc='The ending register number for the sixth range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The ending register number for the sixth range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        ROC_PARAMETER_S__REG_RANGE_6_ = PointTypeParameter(
            parameter_number=33,
            parameter_name='ROC Parameter(s) (Reg Range 6)',
            parameter_desc='The starting ROC Plus Protocol TLP that maps to the sixth range of Modbus registers.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any TLP is valid except for the Program Flash Parameters (PT 90)'
        )
        """
        The starting ROC Plus Protocol TLP that maps to the sixth range of Modbus registers.
        """

        INDEXING_REG_RANGE_6_ = PointTypeParameter(
            parameter_number=34,
            parameter_name='Indexing (Reg Range 6)',
            parameter_desc='Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. 0 = Logical indexing, 1 = Parameter indexing.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. 0 = Logical indexing, 1 = Parameter
        indexing.
        """

        CONVERSION_CODE_REG_RANGE_6_ = PointTypeParameter(
            parameter_number=35,
            parameter_name='Conversion Code (Reg Range 6)',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='Series 1: 0 8, 25 29, 65 72; Series 2: 0 29, 37, 41 81'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        COMM_PORT_REG_RANGE_6_ = PointTypeParameter(
            parameter_number=36,
            parameter_name='Comm Port (Reg Range 6)',
            parameter_desc='Communication port to which the sixth range of registers map. Valid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm Port 5 255 = All Comm Ports',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 5, 255'
        )
        """
        Communication port to which the sixth range of registers map. Valid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm
        Port 5 255 = All Comm Ports
        """

        START_REGISTER_7 = PointTypeParameter(
            parameter_number=37,
            parameter_name='Start Register #7',
            parameter_desc='The starting register number for the seventh range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting register number for the seventh range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        END_REGISTER_7 = PointTypeParameter(
            parameter_number=38,
            parameter_name='End Register #7',
            parameter_desc='The ending register number for the seventh range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The ending register number for the seventh range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        ROC_PARAMETER_S__REG_RANGE_7_ = PointTypeParameter(
            parameter_number=39,
            parameter_name='ROC Parameter(s) (Reg Range 7)',
            parameter_desc='The starting ROC Plus Protocol TLP that maps to the seventh range of Modbus registers.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any TLP is valid except for the Program Flash Parameters (PT 90)'
        )
        """
        The starting ROC Plus Protocol TLP that maps to the seventh range of Modbus registers.
        """

        INDEXING_REG_RANGE_7_ = PointTypeParameter(
            parameter_number=40,
            parameter_name='Indexing (Reg Range 7)',
            parameter_desc='Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing) and 1 (Parameter indexing).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing)
        and 1 (Parameter indexing).
        """

        CONVERSION_CODE_REG_RANGE_7_ = PointTypeParameter(
            parameter_number=41,
            parameter_name='Conversion Code (Reg Range 7)',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='Series 1: 0 8, 25 29, 65 72; Series 2: 0 29, 37, 41 81'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        COMM_PORT_REG_RANGE_7_ = PointTypeParameter(
            parameter_number=42,
            parameter_name='Comm Port (Reg Range 7)',
            parameter_desc='Communication port to which the seventh range of registers map. Valid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm Port 5 255 = All Comm Ports',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 5, 255'
        )
        """
        Communication port to which the seventh range of registers map. Valid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 =
        Comm Port 5 255 = All Comm Ports
        """

        START_REGISTER_8 = PointTypeParameter(
            parameter_number=43,
            parameter_name='Start Register #8',
            parameter_desc='The starting register number for the eighth range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting register number for the eighth range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        END_REGISTER_8 = PointTypeParameter(
            parameter_number=44,
            parameter_name='End Register #8',
            parameter_desc='The ending register number for the eighth range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The ending register number for the eighth range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        ROC_PARAMETER_S__REG_RANGE_8_ = PointTypeParameter(
            parameter_number=45,
            parameter_name='ROC Parameter(s) (Reg Range 8)',
            parameter_desc='The starting ROC Plus Protocol TLP that maps to the eighth range of Modbus registers.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any TLP is valid except for the Program Flash Parameters (PT 90)'
        )
        """
        The starting ROC Plus Protocol TLP that maps to the eighth range of Modbus registers.
        """

        INDEXING_REG_RANGE_8_ = PointTypeParameter(
            parameter_number=46,
            parameter_name='Indexing (Reg Range 8)',
            parameter_desc='Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing) and 1 (Parameter indexing).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing)
        and 1 (Parameter indexing).
        """

        CONVERSION_CODE_REG_RANGE_8_ = PointTypeParameter(
            parameter_number=47,
            parameter_name='Conversion Code (Reg Range 8)',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='Series 1: 0 8, 25 29, 65 72; Series 2: 0 29, 37, 41 81'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        COMM_PORT_REG_RANGE_8_ = PointTypeParameter(
            parameter_number=48,
            parameter_name='Comm Port (Reg Range 8)',
            parameter_desc='Communication port to which the eighth range of registers map. Valid values are: 0 LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm Port 5 255 = All Comm Ports',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 5, 255'
        )
        """
        Communication port to which the eighth range of registers map. Valid values are: 0 LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm
        Port 5 255 = All Comm Ports
        """

        START_REGISTER_9 = PointTypeParameter(
            parameter_number=49,
            parameter_name='Start Register #9',
            parameter_desc='The starting register number for the ninth range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting register number for the ninth range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        END_REGISTER_9 = PointTypeParameter(
            parameter_number=50,
            parameter_name='End Register #9',
            parameter_desc='The ending register number for the ninth range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The ending register number for the ninth range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        ROC_PARAMETER_S__REG_RANGE_9_ = PointTypeParameter(
            parameter_number=51,
            parameter_name='ROC Parameter(s) (Reg Range 9)',
            parameter_desc='The starting ROC Plus Protocol TLP that maps to the ninth range of Modbus registers.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any TLP is valid except for the Program Flash Parameters (PT 90)'
        )
        """
        The starting ROC Plus Protocol TLP that maps to the ninth range of Modbus registers.
        """

        INDEXING_REG_RANGE_9_ = PointTypeParameter(
            parameter_number=52,
            parameter_name='Indexing (Reg Range 9)',
            parameter_desc='Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. 0 = Logical indexing, 1 = Parameter indexing.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. 0 = Logical indexing, 1 = Parameter
        indexing.
        """

        CONVERSION_CODE_REG_RANGE_9_ = PointTypeParameter(
            parameter_number=53,
            parameter_name='Conversion Code (Reg Range 9)',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='Series 1: 0 8, 25 29, 65 72; Series 2: 0 29, 37, 41 81'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        COMM_PORT_REG_RANGE_9_ = PointTypeParameter(
            parameter_number=54,
            parameter_name='Comm Port (Reg Range 9)',
            parameter_desc='Communication port to which the ninth range of registers map. Valid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm Port 5 255 = All Comm Ports',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 5, 255'
        )
        """
        Communication port to which the ninth range of registers map. Valid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm
        Port 5 255 = All Comm Ports
        """

        START_REGISTER_10 = PointTypeParameter(
            parameter_number=55,
            parameter_name='Start Register #10',
            parameter_desc='The starting register number for the tenth range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting register number for the tenth range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        END_REGISTER_10 = PointTypeParameter(
            parameter_number=56,
            parameter_name='End Register #10',
            parameter_desc='The ending register number for the tenth range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The ending register number for the tenth range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        ROC_PARAMETER_S__REG_RANGE_10_ = PointTypeParameter(
            parameter_number=57,
            parameter_name='ROC Parameter(s) (Reg Range 10)',
            parameter_desc='The starting ROC Plus Protocol TLP that maps to the tenth range of Modbus registers.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any TLP is valid except for the Program Flash Parameters (PT 90)'
        )
        """
        The starting ROC Plus Protocol TLP that maps to the tenth range of Modbus registers.
        """

        INDEXING_REG_RANGE_10_ = PointTypeParameter(
            parameter_number=58,
            parameter_name='Indexing (Reg Range 10)',
            parameter_desc='Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing) and 1 (Parameter indexing).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing)
        and 1 (Parameter indexing).
        """

        CONVERSION_CODE_REG_RANGE_10_ = PointTypeParameter(
            parameter_number=59,
            parameter_name='Conversion Code (Reg Range 10)',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='Series 1: 0 8, 25 29, 65 72; Series 2: 0 29, 37, 41 81'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        COMM_PORT_REG_RANGE_10_ = PointTypeParameter(
            parameter_number=60,
            parameter_name='Comm Port (Reg Range 10)',
            parameter_desc='Communication port to which the tenth range of registers map. Valid values are: 0 LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm Port 5 255 = All Comm Ports',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 5, 255'
        )
        """
        Communication port to which the tenth range of registers map. Valid values are: 0 LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm
        Port 5 255 = All Comm Ports
        """

        START_REGISTER_11 = PointTypeParameter(
            parameter_number=61,
            parameter_name='Start Register #11',
            parameter_desc='The starting register number for the 11th range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting register number for the 11th range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        END_REGISTER_11 = PointTypeParameter(
            parameter_number=62,
            parameter_name='End Register #11',
            parameter_desc='The ending register number for the 11th range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        The ending register number for the 11th range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        ROC_PARAMETER_S__REG_RANGE_11_ = PointTypeParameter(
            parameter_number=63,
            parameter_name='ROC Parameter(s) (Reg Range 11)',
            parameter_desc='The starting ROC Plus Protocol TLP that maps to the 11th range of Modbus registers.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any TLP is valid except for the Program Flash Parameters (PT 90)'
        )
        """
        The starting ROC Plus Protocol TLP that maps to the 11th range of Modbus registers.
        """

        INDEXING_REG_RANGE_11_ = PointTypeParameter(
            parameter_number=64,
            parameter_name='Indexing (Reg Range 11)',
            parameter_desc='Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing) and 1 (Parameter indexing).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing)
        and 1 (Parameter indexing).
        """

        CONVERSION_CODE_REG_RANGE_11_ = PointTypeParameter(
            parameter_number=65,
            parameter_name='Conversion Code (Reg Range 11)',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='Series 1: 0 8, 25 29, 65 72; Series 2: 0 29, 37, 41 81'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        COMM_PORT_REG_RANGE_11_ = PointTypeParameter(
            parameter_number=66,
            parameter_name='Comm Port (Reg Range 11)',
            parameter_desc='Communication port to which the 11th range of registers map. Valid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm Port 5 255 = All Comm Ports',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 5, 255'
        )
        """
        Communication port to which the 11th range of registers map. Valid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm
        Port 5 255 = All Comm Ports
        """

        START_REGISTER_12 = PointTypeParameter(
            parameter_number=67,
            parameter_name='Start Register #12',
            parameter_desc='The starting register number for the 12th range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting register number for the 12th range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        END_REGISTER_12 = PointTypeParameter(
            parameter_number=68,
            parameter_name='End Register #12',
            parameter_desc='The ending register number for the 12th range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The ending register number for the 12th range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        ROC_PARAMETER_S__REG_RANGE_12_ = PointTypeParameter(
            parameter_number=69,
            parameter_name='ROC Parameter(s) (Reg Range 12)',
            parameter_desc='The starting ROC Plus Protocol TLP that maps to the 12th range of Modbus registers.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any TLP is valid except for the Program Flash Parameters (PT 90)'
        )
        """
        The starting ROC Plus Protocol TLP that maps to the 12th range of Modbus registers.
        """

        INDEXING_REG_RANGE_12_ = PointTypeParameter(
            parameter_number=70,
            parameter_name='Indexing (Reg Range 12)',
            parameter_desc='Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing) and 1 (Parameter indexing).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing)
        and 1 (Parameter indexing).
        """

        CONVERSION_CODE_REG_RANGE_12_ = PointTypeParameter(
            parameter_number=71,
            parameter_name='Conversion Code (Reg Range 12)',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='Series 1: 0 8, 25 29, 65 72; Series 2: 0 29, 37, 41 81'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        COMM_PORT_REG_RANGE_12_ = PointTypeParameter(
            parameter_number=72,
            parameter_name='Comm Port (Reg Range 12)',
            parameter_desc='Communication port to which the 12th range of registers map. Valid values are: 0 LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm Port 5 255 = All Comm Ports',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 5, 255'
        )
        """
        Communication port to which the 12th range of registers map. Valid values are: 0 LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm
        Port 5 255 = All Comm Ports
        """

        START_REGISTER_13 = PointTypeParameter(
            parameter_number=73,
            parameter_name='Start Register #13',
            parameter_desc='The starting register number for the 13th range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting register number for the 13th range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        END_REGISTER_13 = PointTypeParameter(
            parameter_number=74,
            parameter_name='End Register #13',
            parameter_desc='The ending register number for the 13th range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The ending register number for the 13th range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        ROC_PARAMETER_S__REG_RANGE_13_ = PointTypeParameter(
            parameter_number=75,
            parameter_name='ROC Parameter(s) (Reg Range 13)',
            parameter_desc='The starting ROC Plus Protocol TLP that maps to the 13th range of Modbus registers.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any TLP is valid except for the Program Flash Parameters (PT 90)'
        )
        """
        The starting ROC Plus Protocol TLP that maps to the 13th range of Modbus registers.
        """

        INDEXING_REG_RANGE_13_ = PointTypeParameter(
            parameter_number=76,
            parameter_name='Indexing (Reg Range 13)',
            parameter_desc='Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. 0 = Logical indexing, 1 = Parameter indexing.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. 0 = Logical indexing, 1 = Parameter
        indexing.
        """

        CONVERSION_CODE_REG_RANGE_13_ = PointTypeParameter(
            parameter_number=77,
            parameter_name='Conversion Code (Reg Range 13)',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='Series 1: 0 8, 25 29, 65 72; Series 2: 0 29, 37, 41 81'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        COMM_PORT_REG_RANGE_13_ = PointTypeParameter(
            parameter_number=78,
            parameter_name='Comm Port (Reg Range 13)',
            parameter_desc='Communication port to which the 13th range of registers map. Valid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm Port 5 255 = All Comm Ports',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 5, 255'
        )
        """
        Communication port to which the 13th range of registers map. Valid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm
        Port 5 255 = All Comm Ports
        """

        START_REGISTER_14 = PointTypeParameter(
            parameter_number=79,
            parameter_name='Start Register #14',
            parameter_desc='The starting register number for the 14th range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting register number for the 14th range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        END_REGISTER_14 = PointTypeParameter(
            parameter_number=80,
            parameter_name='End Register #14',
            parameter_desc='The ending register number for the 14th range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The ending register number for the 14th range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        ROC_PARAMETER_S__REG_RANGE_14_ = PointTypeParameter(
            parameter_number=81,
            parameter_name='ROC Parameter(s) (Reg Range 14)',
            parameter_desc='The starting ROC Plus Protocol TLP that maps to the 14th range of Modbus registers.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any TLP is valid except for the Program Flash Parameters (PT 90)'
        )
        """
        The starting ROC Plus Protocol TLP that maps to the 14th range of Modbus registers.
        """

        INDEXING_REG_RANGE_14_ = PointTypeParameter(
            parameter_number=82,
            parameter_name='Indexing (Reg Range 14)',
            parameter_desc='Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing) and 1 (Parameter indexing).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing)
        and 1 (Parameter indexing).
        """

        CONVERSION_CODE_REG_RANGE_14_ = PointTypeParameter(
            parameter_number=83,
            parameter_name='Conversion Code (Reg Range 14)',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='Series 1: 0 8, 25 29, 65 72; Series 2: 0 29, 37, 41 81'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        COMM_PORT_REG_RANGE_14_ = PointTypeParameter(
            parameter_number=84,
            parameter_name='Comm Port (Reg Range 14)',
            parameter_desc='Communication port to which the 14th range of registers map. Valid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm Port 5 255 = All Comm Ports',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 5, 255'
        )
        """
        Communication port to which the 14th range of registers map. Valid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm
        Port 5 255 = All Comm Ports
        """

        START_REGISTER_15 = PointTypeParameter(
            parameter_number=85,
            parameter_name='Start Register #15',
            parameter_desc='The starting register number for the 15th range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting register number for the 15th range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        END_REGISTER_15 = PointTypeParameter(
            parameter_number=86,
            parameter_name='End Register #15',
            parameter_desc='The ending register number for the 15th range of Modbus registers that map to ROC Plus Protocol TLP(s).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The ending register number for the 15th range of Modbus registers that map to ROC Plus Protocol TLP(s).
        """

        ROC_PARAMETER_S__REG_RANGE_15_ = PointTypeParameter(
            parameter_number=87,
            parameter_name='ROC Parameter(s) (Reg Range 15)',
            parameter_desc='The starting ROC Plus Protocol TLP that maps to the 15th range of Modbus registers.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any TLP is valid except for the Program Flash Parameters (PT 90)'
        )
        """
        The starting ROC Plus Protocol TLP that maps to the 15th range of Modbus registers.
        """

        INDEXING_REG_RANGE_15_ = PointTypeParameter(
            parameter_number=88,
            parameter_name='Indexing (Reg Range 15)',
            parameter_desc='Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing) and 1 (Parameter indexing).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether multiple registers access consecutive logical numbers or consecutive parameters from the starting TLP. Valid values are 0 (Logical indexing)
        and 1 (Parameter indexing).
        """

        CONVERSION_CODE_REG_RANGE_15_ = PointTypeParameter(
            parameter_number=89,
            parameter_name='Conversion Code (Reg Range 15)',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='Series 1: 0 8, 25 29, 65 72; Series 2: 0 29, 37, 41 81'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        COMM_PORT_REG_RANGE_15_ = PointTypeParameter(
            parameter_number=90,
            parameter_name='Comm Port (Reg Range 15)',
            parameter_desc='Communication port to which the 15th range of registers map. Valkid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm Port 5 255 = All Comm Ports',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 5, 255'
        )
        """
        Communication port to which the 15th range of registers map. Valkid values are: 0 = LOI 1 = Comm Port 1 2 = Comm Port 2 3 = Comm Port 3 4 = Comm Port 4 5 = Comm
        Port 5 255 = All Comm Ports
        """





class MODBUS_EVENT_ALARM_HISTORY_TABLE(PointType):
    """Modbus Event, Alarm, and History Table"""

    point_type_number: int = 119
    """Point Type ID"""

    point_type_desc: str = 'Modbus Event, Alarm, and History Table'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        EVENT_ALARM_REGISTER = PointTypeParameter(
            parameter_number=0,
            parameter_name='Event/Alarm Register',
            parameter_desc='Contains a unique register number that indicates the request is for Events and Alarm records.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for Events and Alarm records.
        """

        CURRENT_DATE_REGISTER = PointTypeParameter(
            parameter_number=1,
            parameter_name='Current Date Register',
            parameter_desc='Contains a unique register that allows a Modbus read/write command to access the current date in MMDDYY format',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register that allows a Modbus read/write command to access the current date in MMDDYY format
        """

        CURRENT_TIME_REGISTER = PointTypeParameter(
            parameter_number=2,
            parameter_name='Current Time Register',
            parameter_desc='Contains a unique register that allows a Modbus read/write command to access the current time in HHMMSS format',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register that allows a Modbus read/write command to access the current time in HHMMSS format
        """

        PERIODIC_HISTORY_REGISTER_1 = PointTypeParameter(
            parameter_number=3,
            parameter_name='Periodic History Register #1',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the first range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the first range of history points.
        """

        DAILY_HISTORY_REGISTER_1 = PointTypeParameter(
            parameter_number=4,
            parameter_name='Daily History Register #1',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the first range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the first range of history points.
        """

        HISTORY_SEGMENT_1 = PointTypeParameter(
            parameter_number=5,
            parameter_name='History Segment #1',
            parameter_desc='Contains the history segment for range 1.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-10'
        )
        """
        Contains the history segment for range 1.
        """

        START_HISTORY_POINT_1 = PointTypeParameter(
            parameter_number=6,
            parameter_name='Start History Point #1',
            parameter_desc='Contains the starting history point number for range 1.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the starting history point number for range 1.
        """

        END_HISTORY_POINT_1 = PointTypeParameter(
            parameter_number=7,
            parameter_name='End History Point #1',
            parameter_desc='Contains the ending history point number for range 1.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the ending history point number for range 1.
        """

        CONVERSION_CODE_1 = PointTypeParameter(
            parameter_number=8,
            parameter_name='Conversion Code #1',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        PERIODIC_HISTORY_REGISTER_2 = PointTypeParameter(
            parameter_number=9,
            parameter_name='Periodic History Register #2',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the second range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the second range of history points.
        """

        DAILY_HISTORY_REGISTER_2 = PointTypeParameter(
            parameter_number=10,
            parameter_name='Daily History Register #2',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the second range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the second range of history points.
        """

        HISTORY_SEGMENT_2 = PointTypeParameter(
            parameter_number=11,
            parameter_name='History Segment #2',
            parameter_desc='Contains the history segment for range 2.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 10'
        )
        """
        Contains the history segment for range 2.
        """

        START_HISTORY_POINT_2 = PointTypeParameter(
            parameter_number=12,
            parameter_name='Start History Point #2',
            parameter_desc='Contains the starting history point number for range 2.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the starting history point number for range 2.
        """

        END_HISTORY_POINT_2 = PointTypeParameter(
            parameter_number=13,
            parameter_name='End History Point #2',
            parameter_desc='Contains the ending history point number for range 2.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the ending history point number for range 2.
        """

        CONVERSION_CODE_2 = PointTypeParameter(
            parameter_number=14,
            parameter_name='Conversion Code #2',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        PERIODIC_HISTORY_REGISTER_3 = PointTypeParameter(
            parameter_number=15,
            parameter_name='Periodic History Register #3',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the third range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the third range of history points.
        """

        DAILY_HISTORY_REGISTER_3 = PointTypeParameter(
            parameter_number=16,
            parameter_name='Daily History Register #3',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the third range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the third range of history points.
        """

        HISTORY_SEGMENT_3 = PointTypeParameter(
            parameter_number=17,
            parameter_name='History Segment #3',
            parameter_desc='Contains the history segment for range 3.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 10'
        )
        """
        Contains the history segment for range 3.
        """

        START_HISTORY_POINT_3 = PointTypeParameter(
            parameter_number=18,
            parameter_name='Start History Point #3',
            parameter_desc='Contains the starting history point number for range 3.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the starting history point number for range 3.
        """

        END_HISTORY_POINT_3 = PointTypeParameter(
            parameter_number=19,
            parameter_name='End History Point #3',
            parameter_desc='Contains the ending history point number for range 3.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the ending history point number for range 3.
        """

        CONVERSION_CODE_3 = PointTypeParameter(
            parameter_number=20,
            parameter_name='Conversion Code #3',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        PERIODIC_HISTORY_REGISTER_4 = PointTypeParameter(
            parameter_number=21,
            parameter_name='Periodic History Register #4',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the fourth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the fourth range of history points.
        """

        DAILY_HISTORY_REGISTER_4 = PointTypeParameter(
            parameter_number=22,
            parameter_name='Daily History Register #4',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the fourth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the fourth range of history points.
        """

        HISTORY_SEGMENT_4 = PointTypeParameter(
            parameter_number=23,
            parameter_name='History Segment #4',
            parameter_desc='Contains the history segment for range 4.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 10'
        )
        """
        Contains the history segment for range 4.
        """

        START_HISTORY_POINT_4 = PointTypeParameter(
            parameter_number=24,
            parameter_name='Start History Point #4',
            parameter_desc='Contains the starting history point number for range 4.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0->199'
        )
        """
        Contains the starting history point number for range 4.
        """

        END_HISTORY_POINT_4 = PointTypeParameter(
            parameter_number=25,
            parameter_name='End History Point #4',
            parameter_desc='Contains the ending history point number for range 4.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0->199'
        )
        """
        Contains the ending history point number for range 4.
        """

        CONVERSION_CODE_4 = PointTypeParameter(
            parameter_number=26,
            parameter_name='Conversion Code #4',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        PERIODIC_HISTORY_REGISTER_5 = PointTypeParameter(
            parameter_number=27,
            parameter_name='Periodic History Register #5',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the fifth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the fifth range of history points.
        """

        DAILY_HISTORY_REGISTER_5 = PointTypeParameter(
            parameter_number=28,
            parameter_name='Daily History Register #5',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the fifth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the fifth range of history points.
        """

        HISTORY_SEGMENT_5 = PointTypeParameter(
            parameter_number=29,
            parameter_name='History Segment #5',
            parameter_desc='Contains the history segment for range 5.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-10'
        )
        """
        Contains the history segment for range 5.
        """

        START_HISTORY_POINT_5 = PointTypeParameter(
            parameter_number=30,
            parameter_name='Start History Point #5',
            parameter_desc='Contains the starting history point number for range 5.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='1-9199'
        )
        """
        Contains the starting history point number for range 5.
        """

        END_HISTORY_POINT_5 = PointTypeParameter(
            parameter_number=31,
            parameter_name='End History Point #5',
            parameter_desc='Contains the ending history point number for range 5.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-199'
        )
        """
        Contains the ending history point number for range 5.
        """

        CONVERSION_CODE_5 = PointTypeParameter(
            parameter_number=32,
            parameter_name='Conversion Code #5',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        PERIODIC_HISTORY_REGISTER_6 = PointTypeParameter(
            parameter_number=33,
            parameter_name='Periodic History Register #6',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the sixth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the sixth range of history points.
        """

        DAILY_HISTORY_REGISTER_6 = PointTypeParameter(
            parameter_number=34,
            parameter_name='Daily History Register #6',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the sixth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the sixth range of history points.
        """

        HISTORY_SEGMENT_6 = PointTypeParameter(
            parameter_number=35,
            parameter_name='History Segment #6',
            parameter_desc='Contains the history segment for range 6.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-10'
        )
        """
        Contains the history segment for range 6.
        """

        START_HISTORY_POINT_6 = PointTypeParameter(
            parameter_number=36,
            parameter_name='Start History Point #6',
            parameter_desc='Contains the starting history point number for range 6.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the starting history point number for range 6.
        """

        END_HISTORY_POINT_6 = PointTypeParameter(
            parameter_number=37,
            parameter_name='End History Point #6',
            parameter_desc='Contains the ending history point number for range 6.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the ending history point number for range 6.
        """

        CONVERSION_CODE_6 = PointTypeParameter(
            parameter_number=38,
            parameter_name='Conversion Code #6',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        PERIODIC_HISTORY_REGISTER_7 = PointTypeParameter(
            parameter_number=39,
            parameter_name='Periodic History Register #7',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the seventh range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the seventh range of history points.
        """

        DAILY_HISTORY_REGISTER_7 = PointTypeParameter(
            parameter_number=40,
            parameter_name='Daily History Register #7',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the seventh range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the seventh range of history points.
        """

        HISTORY_SEGMENT_7 = PointTypeParameter(
            parameter_number=41,
            parameter_name='History Segment #7',
            parameter_desc='Contains the history segment for range 7.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-10'
        )
        """
        Contains the history segment for range 7.
        """

        START_HISTORY_POINT_7 = PointTypeParameter(
            parameter_number=42,
            parameter_name='Start History Point #7',
            parameter_desc='Contains the starting history point number for range 7.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the starting history point number for range 7.
        """

        END_HISTORY_POINT_7 = PointTypeParameter(
            parameter_number=43,
            parameter_name='End History Point #7',
            parameter_desc='Contains the ending history point number for range 7.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the ending history point number for range 7.
        """

        CONVERSION_CODE_7 = PointTypeParameter(
            parameter_number=44,
            parameter_name='Conversion Code #7',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        PERIODIC_HISTORY_REGISTER_8 = PointTypeParameter(
            parameter_number=45,
            parameter_name='Periodic History Register #8',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the eighth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the eighth range of history points.
        """

        DAILY_HISTORY_REGISTER_8 = PointTypeParameter(
            parameter_number=46,
            parameter_name='Daily History Register #8',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the eighth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the eighth range of history points.
        """

        HISTORY_SEGMENT_8 = PointTypeParameter(
            parameter_number=47,
            parameter_name='History Segment #8',
            parameter_desc='Contains the history segment for range 8.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0- 10'
        )
        """
        Contains the history segment for range 8.
        """

        START_HISTORY_POINT_8 = PointTypeParameter(
            parameter_number=48,
            parameter_name='Start History Point #8',
            parameter_desc='Contains the starting history point number for range 8.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the starting history point number for range 8.
        """

        END_HISTORY_POINT_8 = PointTypeParameter(
            parameter_number=49,
            parameter_name='End History Point #8',
            parameter_desc='Contains the ending history point number for range 8.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the ending history point number for range 8.
        """

        CONVERSION_CODE_8 = PointTypeParameter(
            parameter_number=50,
            parameter_name='Conversion Code #8',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        PERIODIC_HISTORY_REGISTER_9 = PointTypeParameter(
            parameter_number=51,
            parameter_name='Periodic History Register #9',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the ninth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the ninth range of history points.
        """

        DAILY_HISTORY_REGISTER_9 = PointTypeParameter(
            parameter_number=52,
            parameter_name='Daily History Register #9',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the ninth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the ninth range of history points.
        """

        HISTORY_SEGMENT_9 = PointTypeParameter(
            parameter_number=53,
            parameter_name='History Segment #9',
            parameter_desc='Contains the history segment for range 9.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 10'
        )
        """
        Contains the history segment for range 9.
        """

        START_HISTORY_POINT_9 = PointTypeParameter(
            parameter_number=54,
            parameter_name='Start History Point #9',
            parameter_desc='Contains the starting history point number for range 9.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the starting history point number for range 9.
        """

        END_HISTORY_POINT_9 = PointTypeParameter(
            parameter_number=55,
            parameter_name='End History Point #9',
            parameter_desc='Contains the ending history point number for range 9.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the ending history point number for range 9.
        """

        CONVERSION_CODE_9 = PointTypeParameter(
            parameter_number=56,
            parameter_name='Conversion Code #9',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 25 29, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        PERIODIC_HISTORY_REGISTER_10 = PointTypeParameter(
            parameter_number=57,
            parameter_name='Periodic History Register #10',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the tenth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the tenth range of history points.
        """

        DAILY_HISTORY_REGISTER_10 = PointTypeParameter(
            parameter_number=58,
            parameter_name='Daily History Register #10',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the tenth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the tenth range of history points.
        """

        HISTORY_SEGMENT_10 = PointTypeParameter(
            parameter_number=59,
            parameter_name='History Segment #10',
            parameter_desc='Contains the history segment for range 10.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-10'
        )
        """
        Contains the history segment for range 10.
        """

        START_HISTORY_POINT_10 = PointTypeParameter(
            parameter_number=60,
            parameter_name='Start History Point #10',
            parameter_desc='Contains the starting history point number for range 10.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the starting history point number for range 10.
        """

        END_HISTORY_POINT_10 = PointTypeParameter(
            parameter_number=61,
            parameter_name='End History Point #10',
            parameter_desc='Contains the ending history point number for range 10.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the ending history point number for range 10.
        """

        CONVERSION_CODE_10 = PointTypeParameter(
            parameter_number=62,
            parameter_name='Conversion Code #10',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        PERIODIC_HISTORY_REGISTER_11 = PointTypeParameter(
            parameter_number=63,
            parameter_name='Periodic History Register #11',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the eleventh range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the eleventh range of history points.
        """

        DAILY_HISTORY_REGISTER_11 = PointTypeParameter(
            parameter_number=64,
            parameter_name='Daily History Register #11',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the eleventh range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the eleventh range of history points.
        """

        HISTORY_SEGMENT_11 = PointTypeParameter(
            parameter_number=65,
            parameter_name='History Segment #11',
            parameter_desc='Contains the history segment for range 11.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-10'
        )
        """
        Contains the history segment for range 11.
        """

        START_HISTORY_POINT_11 = PointTypeParameter(
            parameter_number=66,
            parameter_name='Start History Point #11',
            parameter_desc='Contains the starting history point number for range 11.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the starting history point number for range 11.
        """

        END_HISTORY_POINT_11 = PointTypeParameter(
            parameter_number=67,
            parameter_name='End History Point #11',
            parameter_desc='Contains the ending history point number for range 11.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the ending history point number for range 11.
        """

        CONVERSION_CODE_11 = PointTypeParameter(
            parameter_number=68,
            parameter_name='Conversion Code #11',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        PERIODIC_HISTORY_REGISTER_12 = PointTypeParameter(
            parameter_number=69,
            parameter_name='Periodic History Register #12',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the twelfth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the twelfth range of history points.
        """

        DAILY_HISTORY_REGISTER_12 = PointTypeParameter(
            parameter_number=70,
            parameter_name='Daily History Register #12',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the twelfth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the twelfth range of history points.
        """

        HISTORY_SEGMENT_12 = PointTypeParameter(
            parameter_number=71,
            parameter_name='History Segment #12',
            parameter_desc='Contains the history segment for range 12.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-10'
        )
        """
        Contains the history segment for range 12.
        """

        START_HISTORY_POINT_12 = PointTypeParameter(
            parameter_number=72,
            parameter_name='Start History Point #12',
            parameter_desc='Contains the starting history point number for range 12.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the starting history point number for range 12.
        """

        END_HISTORY_POINT_12 = PointTypeParameter(
            parameter_number=73,
            parameter_name='End History Point #12',
            parameter_desc='Contains the ending history point number for range 12.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='199'
        )
        """
        Contains the ending history point number for range 12.
        """

        CONVERSION_CODE_12 = PointTypeParameter(
            parameter_number=74,
            parameter_name='Conversion Code #12',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        PERIODIC_HISTORY_REGISTER_13 = PointTypeParameter(
            parameter_number=75,
            parameter_name='Periodic History Register #13',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the thirteenth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the thirteenth range of history points.
        """

        DAILY_HISTORY_REGISTER_13 = PointTypeParameter(
            parameter_number=76,
            parameter_name='Daily History Register #13',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the thirteenth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the thirteenth range of history points.
        """

        HISTORY_SEGMENT_13 = PointTypeParameter(
            parameter_number=77,
            parameter_name='History Segment #13',
            parameter_desc='Contains the history segment for range 13.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 10'
        )
        """
        Contains the history segment for range 13.
        """

        START_HISTORY_POINT_13 = PointTypeParameter(
            parameter_number=78,
            parameter_name='Start History Point #13',
            parameter_desc='Contains the starting history point number for range 13.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the starting history point number for range 13.
        """

        END_HISTORY_POINT_13 = PointTypeParameter(
            parameter_number=79,
            parameter_name='End History Point #13',
            parameter_desc='Contains the ending history point number for range 13.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-199'
        )
        """
        Contains the ending history point number for range 13.
        """

        CONVERSION_CODE_13 = PointTypeParameter(
            parameter_number=80,
            parameter_name='Conversion Code #13',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        PERIODIC_HISTORY_REGISTER_14 = PointTypeParameter(
            parameter_number=81,
            parameter_name='Periodic History Register #14',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the fourteenth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the fourteenth range of history points.
        """

        DAILY_HISTORY_REGISTER_14 = PointTypeParameter(
            parameter_number=82,
            parameter_name='Daily History Register #14',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the fourteenth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the fourteenth range of history points.
        """

        HISTORY_SEGMENT_14 = PointTypeParameter(
            parameter_number=83,
            parameter_name='History Segment #14',
            parameter_desc='Contains the history segment for range 14.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1 10'
        )
        """
        Contains the history segment for range 14.
        """

        START_HISTORY_POINT_14 = PointTypeParameter(
            parameter_number=84,
            parameter_name='Start History Point #14',
            parameter_desc='Contains the starting history point number for range 14.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-199'
        )
        """
        Contains the starting history point number for range 14.
        """

        END_HISTORY_POINT_14 = PointTypeParameter(
            parameter_number=85,
            parameter_name='End History Point #14',
            parameter_desc='Contains the ending history point number for range 14.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-199'
        )
        """
        Contains the ending history point number for range 14.
        """

        CONVERSION_CODE_14 = PointTypeParameter(
            parameter_number=86,
            parameter_name='Conversion Code #14',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        PERIODIC_HISTORY_REGISTER_15 = PointTypeParameter(
            parameter_number=87,
            parameter_name='Periodic History Register #15',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the fifteenth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the fifteenth range of history points.
        """

        DAILY_HISTORY_REGISTER_15 = PointTypeParameter(
            parameter_number=88,
            parameter_name='Daily History Register #15',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the fifteenth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the fifteenth range of history points.
        """

        HISTORY_SEGMENT_15 = PointTypeParameter(
            parameter_number=89,
            parameter_name='History Segment #15',
            parameter_desc='Contains the history segment for range 15.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-10'
        )
        """
        Contains the history segment for range 15.
        """

        START_HISTORY_POINT_15 = PointTypeParameter(
            parameter_number=90,
            parameter_name='Start History Point #15',
            parameter_desc='Contains the starting history point number for range 15.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-199'
        )
        """
        Contains the starting history point number for range 15.
        """

        END_HISTORY_POINT_15 = PointTypeParameter(
            parameter_number=91,
            parameter_name='End History Point #15',
            parameter_desc='Contains the ending history point number for range 15.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-199'
        )
        """
        Contains the ending history point number for range 15.
        """

        CONVERSION_CODE_15 = PointTypeParameter(
            parameter_number=92,
            parameter_name='Conversion Code #15',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        PERIODIC_HISTORY_REGISTER_16 = PointTypeParameter(
            parameter_number=93,
            parameter_name='Periodic History Register #16',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the sixteenth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the sixteenth range of history points.
        """

        DAILY_HISTORY_REGISTER_16 = PointTypeParameter(
            parameter_number=94,
            parameter_name='Daily History Register #16',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the sixteenth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the sixteenth range of history points.
        """

        HISTORY_SEGMENT_16 = PointTypeParameter(
            parameter_number=95,
            parameter_name='History Segment #16',
            parameter_desc='Contains the history segment for range 16.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-10'
        )
        """
        Contains the history segment for range 16.
        """

        START_HISTORY_POINT_16 = PointTypeParameter(
            parameter_number=96,
            parameter_name='Start History Point #16',
            parameter_desc='Contains the starting history point number for range 16.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='199'
        )
        """
        Contains the starting history point number for range 16.
        """

        END_HISTORY_POINT_16 = PointTypeParameter(
            parameter_number=97,
            parameter_name='End History Point #16',
            parameter_desc='Contains the ending history point number for range 16.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the ending history point number for range 16.
        """

        CONVERSION_CODE_16 = PointTypeParameter(
            parameter_number=98,
            parameter_name='Conversion Code #16',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        PERIODIC_HISTORY_REGISTER_17 = PointTypeParameter(
            parameter_number=99,
            parameter_name='Periodic History Register #17',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the seventeenth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the seventeenth range of history points.
        """

        DAILY_HISTORY_REGISTER_17 = PointTypeParameter(
            parameter_number=100,
            parameter_name='Daily History Register #17',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the seventeenth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the seventeenth range of history points.
        """

        HISTORY_SEGMENT_17 = PointTypeParameter(
            parameter_number=101,
            parameter_name='History Segment #17',
            parameter_desc='Contains the history segment for range 17.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-10'
        )
        """
        Contains the history segment for range 17.
        """

        START_HISTORY_POINT_17 = PointTypeParameter(
            parameter_number=102,
            parameter_name='Start History Point #17',
            parameter_desc='Contains the starting history point number for range 17.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-199'
        )
        """
        Contains the starting history point number for range 17.
        """

        END_HISTORY_POINT_17 = PointTypeParameter(
            parameter_number=103,
            parameter_name='End History Point #17',
            parameter_desc='Contains the ending history point number for range 17.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-199'
        )
        """
        Contains the ending history point number for range 17.
        """

        CONVERSION_CODE_17 = PointTypeParameter(
            parameter_number=104,
            parameter_name='Conversion Code #17',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        PERIODIC_HISTORY_REGISTER_18 = PointTypeParameter(
            parameter_number=105,
            parameter_name='Periodic History Register #18',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the eighteenth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the eighteenth range of history points.
        """

        DAILY_HISTORY_REGISTER_18 = PointTypeParameter(
            parameter_number=106,
            parameter_name='Daily History Register #18',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the eighteenth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the eighteenth range of history points.
        """

        HISTORY_SEGMENT_18 = PointTypeParameter(
            parameter_number=107,
            parameter_name='History Segment #18',
            parameter_desc='Contains the history segment for range 18.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-10'
        )
        """
        Contains the history segment for range 18.
        """

        START_HISTORY_POINT_18 = PointTypeParameter(
            parameter_number=108,
            parameter_name='Start History Point #18',
            parameter_desc='Contains the starting history point number for range 18.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the starting history point number for range 18.
        """

        END_HISTORY_POINT_18 = PointTypeParameter(
            parameter_number=109,
            parameter_name='End History Point #18',
            parameter_desc='Contains the ending history point number for range 18.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the ending history point number for range 18.
        """

        CONVERSION_CODE_18 = PointTypeParameter(
            parameter_number=110,
            parameter_name='Conversion Code #18',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        PERIODIC_HISTORY_REGISTER_19 = PointTypeParameter(
            parameter_number=111,
            parameter_name='Periodic History Register #19',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the nineteenth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the nineteenth range of history points.
        """

        DAILY_HISTORY_REGISTER_19 = PointTypeParameter(
            parameter_number=112,
            parameter_name='Daily History Register #19',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the nineteenth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the nineteenth range of history points.
        """

        HISTORY_SEGMENT_19 = PointTypeParameter(
            parameter_number=113,
            parameter_name='History Segment #19',
            parameter_desc='Contains the history segment for range 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 10'
        )
        """
        Contains the history segment for range 19.
        """

        START_HISTORY_POINT_19 = PointTypeParameter(
            parameter_number=114,
            parameter_name='Start History Point #19',
            parameter_desc='Contains the starting history point number for range 19.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 199'
        )
        """
        Contains the starting history point number for range 19.
        """

        END_HISTORY_POINT_19 = PointTypeParameter(
            parameter_number=115,
            parameter_name='End History Point #19',
            parameter_desc='Contains the ending history point number for range 19.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0->199'
        )
        """
        Contains the ending history point number for range 19.
        """

        CONVERSION_CODE_19 = PointTypeParameter(
            parameter_number=116,
            parameter_name='Conversion Code #19',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        PERIODIC_HISTORY_REGISTER_20 = PointTypeParameter(
            parameter_number=117,
            parameter_name='Periodic History Register #20',
            parameter_desc='Contains a unique register number that indicates the request is for periodic values for the twentieth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for periodic values for the twentieth range of history points.
        """

        DAILY_HISTORY_REGISTER_20 = PointTypeParameter(
            parameter_number=118,
            parameter_name='Daily History Register #20',
            parameter_desc='Contains a unique register number that indicates the request is for daily values for the twentieth range of history points.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Contains a unique register number that indicates the request is for daily values for the twentieth range of history points.
        """

        HISTORY_SEGMENT_20 = PointTypeParameter(
            parameter_number=119,
            parameter_name='History Segment #20',
            parameter_desc='Contains the history segment for range 20.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-10'
        )
        """
        Contains the history segment for range 20.
        """

        START_HISTORY_POINT_20 = PointTypeParameter(
            parameter_number=120,
            parameter_name='Start History Point #20',
            parameter_desc='Contains the starting history point number for range 20.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0->199'
        )
        """
        Contains the starting history point number for range 20.
        """

        END_HISTORY_POINT_20 = PointTypeParameter(
            parameter_number=121,
            parameter_name='End History Point #20',
            parameter_desc='Contains the ending history point number for range 20.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-199'
        )
        """
        Contains the ending history point number for range 20.
        """

        CONVERSION_CODE_20 = PointTypeParameter(
            parameter_number=122,
            parameter_name='Conversion Code #20',
            parameter_desc='Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 65 72'
        )
        """
        Contains the conversion code to convert the ROC800-Series data into a format that is compatible to a Modbus device. Note: See Conversion Codes at end of table.
        """

        HISTORY_INDEX_MODE_20 = PointTypeParameter(
            parameter_number=123,
            parameter_name='History Index Mode #20',
            parameter_desc='Indicates the history indexing mode. Valid values are: 0 = EFM Extensions Mode: History Indexes (mapped to TLP[124,X,5] and [124,X,6]) will be returned as one less - accounting for roll-over - corresponding to last entry location. History data will be returned for the index requested. 1 = Override mode 1: History Indexes (mapped to TLP[124,X,5] and [124,X,6]] will be returned unmodified (index is to the next record to be written). History data will be returned for the index requested. 2 = Override mode 2: History Indexes (mapped to TLP[124,X,5] and [124,X,6]) will be returned unmodified (index is to the next record to be written). History data will be returned at an index one less than the index requested, accounting for rollover. If a request for history data at an index beyond the number of valid indices is received, the ROC will respond with history data at the last valid index (For example, if there are 35 daily entries, valid indices are 0-34. Requests for index 35, 36, 37, etc. will all return history for index 34). Override mode 2 was implemented in firmware version 2.02.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0'
        )
        """
        Indicates the history indexing mode. Valid values are: 0 = EFM Extensions Mode: History Indexes (mapped to TLP[124,X,5] and [124,X,6]) will be returned as one
        less - accounting for roll-over - corresponding to last entry location. History data will be returned for the index requested. 1 = Override mode 1: History
        Indexes (mapped to TLP[124,X,5] and [124,X,6]] will be returned unmodified (index is to the next record to be written). History data will be returned for the
        index requested. 2 = Override mode 2: History Indexes (mapped to TLP[124,X,5] and [124,X,6]) will be returned unmodified (index is to the next record to be
        written). History data will be returned at an index one less than the index requested, accounting for rollover. If a request for history data at an index beyond
        the number of valid indices is received, the ROC will respond with history data at the last valid index (For example, if there are 35 daily entries, valid
        indices are 0-34. Requests for index 35, 36, 37, etc. will all return history for index 34). Override mode 2 was implemented in firmware version 2.02.
        """





class MODBUS_MASTER_MODEM_CONFIG(PointType):
    """Modbus Master Modem Configuration"""

    point_type_number: int = 120
    """Point Type ID"""

    point_type_desc: str = 'Modbus Master Modem Configuration'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Tag ID',
            parameter_desc='String that describes the instance of the Master modem table.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        String that describes the instance of the Master modem table.
        """

        FIRST_RTU_ADDRESS = PointTypeParameter(
            parameter_number=1,
            parameter_name='First RTU Address',
            parameter_desc='Associates an RTU address to the Connect Command.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Associates an RTU address to the Connect Command.
        """

        FIRST_CONNECT_COMMAND = PointTypeParameter(
            parameter_number=2,
            parameter_name='First Connect Command',
            parameter_desc='A 40-character modem command typically used to represent the telephone number of the slave RTU.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        A 40-character modem command typically used to represent the telephone number of the slave RTU.
        """

        SECOND_RTU_ADDRESS = PointTypeParameter(
            parameter_number=3,
            parameter_name='Second RTU Address',
            parameter_desc='Associates an RTU address to the Connect Command.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Associates an RTU address to the Connect Command.
        """

        SECOND_CONNECT_COMMAND = PointTypeParameter(
            parameter_number=4,
            parameter_name='Second Connect Command',
            parameter_desc='A 40-character modem command typically used to represent the telephone number of the slave RTU.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        A 40-character modem command typically used to represent the telephone number of the slave RTU.
        """

        THIRD_RTU_ADDRESS = PointTypeParameter(
            parameter_number=5,
            parameter_name='Third RTU Address',
            parameter_desc='Associates an RTU address to the Connect Command.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Associates an RTU address to the Connect Command.
        """

        THIRD_CONNECT_COMMAND = PointTypeParameter(
            parameter_number=6,
            parameter_name='Third Connect Command',
            parameter_desc='A 40-character modem command typically used to represent the telephone number of the slave RTU.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        A 40-character modem command typically used to represent the telephone number of the slave RTU.
        """

        FOURTH_RTU_ADDRESS = PointTypeParameter(
            parameter_number=7,
            parameter_name='Fourth RTU Address',
            parameter_desc='Associates an RTU address to the Connect Command.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Associates an RTU address to the Connect Command.
        """

        FOURTH_CONNECT_COMMAND = PointTypeParameter(
            parameter_number=8,
            parameter_name='Fourth Connect Command',
            parameter_desc='A 40-character modem command typically used to represent the telephone number of the slave RTU.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        A 40-character modem command typically used to represent the telephone number of the slave RTU.
        """

        FIFTH_RTU_ADDRESS = PointTypeParameter(
            parameter_number=9,
            parameter_name='Fifth RTU Address',
            parameter_desc='Associates an RTU address to the Connect Command.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Associates an RTU address to the Connect Command.
        """

        FIFTH_CONNECT_COMMAND = PointTypeParameter(
            parameter_number=10,
            parameter_name='Fifth Connect Command',
            parameter_desc='A 40-character modem command typically used to represent the telephone number of the slave RTU.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        A 40-character modem command typically used to represent the telephone number of the slave RTU.
        """

        SIXTH_RTU_ADDRESS = PointTypeParameter(
            parameter_number=11,
            parameter_name='Sixth RTU Address',
            parameter_desc='Associates an RTU address to the Connect Command.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Associates an RTU address to the Connect Command.
        """

        SIXTH_CONNECT_COMMAND = PointTypeParameter(
            parameter_number=12,
            parameter_name='Sixth Connect Command',
            parameter_desc='A 40-character modem command typically used to represent the telephone number of the slave RTU.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 > 0x7E for each byte'
        )
        """
        A 40-character modem command typically used to represent the telephone number of the slave RTU.
        """





class MODBUS_MASTER_TABLE(PointType):
    """Modbus Master Table"""

    point_type_number: int = 121
    """Point Type ID"""

    point_type_desc: str = 'Modbus Master Table'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Tag ID',
            parameter_desc='String that describes the instance of the Master table.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        String that describes the instance of the Master table.
        """

        RTU_1_ADDRESS = PointTypeParameter(
            parameter_number=1,
            parameter_name='RTU 1 Address',
            parameter_desc='Contains RTU 1 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 1 Address the Modbus Query is destined for
        """

        RTU_1_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=2,
            parameter_name='RTU 1 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 1. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 1. Note: See Modbus Function Codes list at end of table.
        """

        RTU_1_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=3,
            parameter_name='RTU 1 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 1.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 1.
        """

        RTU_1_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=4,
            parameter_name='RTU 1 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_1_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=5,
            parameter_name='RTU 1 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_1_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=6,
            parameter_name='RTU 1 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_2_ADDRESS = PointTypeParameter(
            parameter_number=7,
            parameter_name='RTU 2 Address',
            parameter_desc='Contains RTU 2 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 2 Address the Modbus Query is destined for
        """

        RTU_2_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=8,
            parameter_name='RTU 2 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 2. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 2. Note: See Modbus Function Codes list at end of table.
        """

        RTU_2_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=9,
            parameter_name='RTU 2 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 2.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 2.
        """

        RTU_2_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=10,
            parameter_name='RTU 2 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_2_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=11,
            parameter_name='RTU 2 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_2_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=12,
            parameter_name='RTU 2 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_3_ADDRESS = PointTypeParameter(
            parameter_number=13,
            parameter_name='RTU 3 Address',
            parameter_desc='Contains RTU 3 Address the Modbus Query is destined for.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 3 Address the Modbus Query is destined for.
        """

        RTU_3_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=14,
            parameter_name='RTU 3 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 3. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 3. Note: See Modbus Function Codes list at end of table.
        """

        RTU_3_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=15,
            parameter_name='RTU 3 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 3.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 3.
        """

        RTU_3_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=16,
            parameter_name='RTU 3 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_3_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=17,
            parameter_name='RTU 3 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_3_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=18,
            parameter_name='RTU 3 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_4_ADDRESS = PointTypeParameter(
            parameter_number=19,
            parameter_name='RTU 4 Address',
            parameter_desc='Contains RTU 4 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 4 Address the Modbus Query is destined for
        """

        RTU_4_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=20,
            parameter_name='RTU 4 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 4. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 4. Note: See Modbus Function Codes list at end of table.
        """

        RTU_4_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=21,
            parameter_name='RTU 4 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 4.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 4.
        """

        RTU_4_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=22,
            parameter_name='RTU 4 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series9) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series9) where the data will either be stored for a read, or provided for a write.
        """

        RTU_4_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=23,
            parameter_name='RTU 4 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_4_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=24,
            parameter_name='RTU 4 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_5_ADDRESS = PointTypeParameter(
            parameter_number=25,
            parameter_name='RTU 5 Address',
            parameter_desc='Contains RTU 5 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 5 Address the Modbus Query is destined for
        """

        RTU_5_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=26,
            parameter_name='RTU 5 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 5. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 5. Note: See Modbus Function Codes list at end of table.
        """

        RTU_5_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=27,
            parameter_name='RTU 5 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 5.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 5.
        """

        RTU_5_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=28,
            parameter_name='RTU 5 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read or provided for a write.
        """

        RTU_5_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=29,
            parameter_name='RTU 5 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_5_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=30,
            parameter_name='RTU 5 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_6_ADDRESS = PointTypeParameter(
            parameter_number=31,
            parameter_name='RTU 6 Address',
            parameter_desc='Contains RTU 6 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 6 Address the Modbus Query is destined for
        """

        RTU_6_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=32,
            parameter_name='RTU 6 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 6. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 6. Note: See Modbus Function Codes list at end of table.
        """

        RTU_6_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=33,
            parameter_name='RTU 6 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 6.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 6.
        """

        RTU_6_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=34,
            parameter_name='RTU 6 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read or provided for a write.
        """

        RTU_6_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=35,
            parameter_name='RTU 6 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_6_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=36,
            parameter_name='RTU 6 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_7_ADDRESS = PointTypeParameter(
            parameter_number=37,
            parameter_name='RTU 7 Address',
            parameter_desc='Contains RTU 7 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 7 Address the Modbus Query is destined for
        """

        RTU_7_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=38,
            parameter_name='RTU 7 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 7. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 7. Note: See Modbus Function Codes list at end of table.
        """

        RTU_7_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=39,
            parameter_name='RTU 7 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 7.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 7.
        """

        RTU_7_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=40,
            parameter_name='RTU 7 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_7_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=41,
            parameter_name='RTU 7 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_7_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=42,
            parameter_name='RTU 7 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_8_ADDRESS = PointTypeParameter(
            parameter_number=43,
            parameter_name='RTU 8 Address',
            parameter_desc='Contains RTU 8 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 8 Address the Modbus Query is destined for
        """

        RTU_8_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=44,
            parameter_name='RTU 8 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 8. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 8. Note: See Modbus Function Codes list at end of table.
        """

        RTU_8_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=45,
            parameter_name='RTU 8 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 8.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 8.
        """

        RTU_8_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=46,
            parameter_name='RTU 8 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_8_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=47,
            parameter_name='RTU 8 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_8_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=48,
            parameter_name='RTU 8 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_9_ADDRESS = PointTypeParameter(
            parameter_number=49,
            parameter_name='RTU 9 Address',
            parameter_desc='Contains RTU 9 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 9 Address the Modbus Query is destined for
        """

        RTU_9_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=50,
            parameter_name='RTU 9 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 9. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 9. Note: See Modbus Function Codes list at end of table.
        """

        RTU_9_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=51,
            parameter_name='RTU 9 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 9.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 9.
        """

        RTU_9_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=52,
            parameter_name='RTU 9 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_9_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=53,
            parameter_name='RTU 9 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_9_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=54,
            parameter_name='RTU 9 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_10_ADDRESS = PointTypeParameter(
            parameter_number=55,
            parameter_name='RTU 10 Address',
            parameter_desc='Contains RTU 10 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 10 Address the Modbus Query is destined for
        """

        RTU_10_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=56,
            parameter_name='RTU 10 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 10. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 10. Note: See Modbus Function Codes list at end of table.
        """

        RTU_10_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=57,
            parameter_name='RTU 10 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 10.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 10.
        """

        RTU_10_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=58,
            parameter_name='RTU 10 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_10_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=59,
            parameter_name='RTU 10 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_10_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=60,
            parameter_name='RTU 10 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_11_ADDRESS = PointTypeParameter(
            parameter_number=61,
            parameter_name='RTU 11 Address',
            parameter_desc='Contains RTU 11 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 11 Address the Modbus Query is destined for
        """

        RTU_11_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=62,
            parameter_name='RTU 11 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 11. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 11. Note: See Modbus Function Codes list at end of table.
        """

        RTU_11_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=63,
            parameter_name='RTU 11 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 11.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 11.
        """

        RTU_11_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=64,
            parameter_name='RTU 11 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_11_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=65,
            parameter_name='RTU 11 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_11_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=66,
            parameter_name='RTU 11 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_12_ADDRESS = PointTypeParameter(
            parameter_number=67,
            parameter_name='RTU 12 Address',
            parameter_desc='Contains RTU 12 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 12 Address the Modbus Query is destined for
        """

        RTU_12_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=68,
            parameter_name='RTU 12 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 12. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 12. Note: See Modbus Function Codes list at end of table.
        """

        RTU_12_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=69,
            parameter_name='RTU 12 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 12.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 12.
        """

        RTU_12_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=70,
            parameter_name='RTU 12 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data is either stored for a read or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data is either stored for a read or provided for a write.
        """

        RTU_12_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=71,
            parameter_name='RTU 12 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_12_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=72,
            parameter_name='RTU 12 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_13_ADDRESS = PointTypeParameter(
            parameter_number=73,
            parameter_name='RTU 13 Address',
            parameter_desc='Contains RTU 13 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 13 Address the Modbus Query is destined for
        """

        RTU_13_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=74,
            parameter_name='RTU 13 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 13. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 13. Note: See Modbus Function Codes list at end of table.
        """

        RTU_13_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=75,
            parameter_name='RTU 13 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 13.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 13.
        """

        RTU_13_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=76,
            parameter_name='RTU 13 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_13_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=77,
            parameter_name='RTU 13 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_13_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=78,
            parameter_name='RTU 13 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_14_ADDRESS = PointTypeParameter(
            parameter_number=79,
            parameter_name='RTU 14 Address',
            parameter_desc='Contains RTU 14 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 14 Address the Modbus Query is destined for
        """

        RTU_14_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=80,
            parameter_name='RTU 14 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 14. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 14. Note: See Modbus Function Codes list at end of table.
        """

        RTU_14_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=81,
            parameter_name='RTU 14 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 14.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 14.
        """

        RTU_14_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=82,
            parameter_name='RTU 14 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_14_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=83,
            parameter_name='RTU 14 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_14_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=84,
            parameter_name='RTU 14 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_15_ADDRESS = PointTypeParameter(
            parameter_number=85,
            parameter_name='RTU 15 Address',
            parameter_desc='Contains RTU 15 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 15 Address the Modbus Query is destined for
        """

        RTU_15_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=86,
            parameter_name='RTU 15 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 15. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 15. Note: See Modbus Function Codes list at end of table.
        """

        RTU_15_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=87,
            parameter_name='RTU 15 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 15.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 15.
        """

        RTU_15_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=88,
            parameter_name='RTU 15 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_15_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=89,
            parameter_name='RTU 15 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_15_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=90,
            parameter_name='RTU 15 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_16_ADDRESS = PointTypeParameter(
            parameter_number=91,
            parameter_name='RTU 16 Address',
            parameter_desc='Contains RTU 16 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 16 Address the Modbus Query is destined for
        """

        RTU_16_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=92,
            parameter_name='RTU 16 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 16. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 16. Note: See Modbus Function Codes list at end of table.
        """

        RTU_16_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=93,
            parameter_name='RTU 16 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 16.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 16.
        """

        RTU_16_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=94,
            parameter_name='RTU 16 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_16_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=95,
            parameter_name='RTU 16 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_16_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=96,
            parameter_name='RTU 16 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_17_ADDRESS = PointTypeParameter(
            parameter_number=97,
            parameter_name='RTU 17 Address',
            parameter_desc='Contains RTU 17 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 17 Address the Modbus Query is destined for
        """

        RTU_17_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=98,
            parameter_name='RTU 17 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 17. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 17. Note: See Modbus Function Codes list at end of table.
        """

        RTU_17_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=99,
            parameter_name='RTU 17 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 17.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 17.
        """

        RTU_17_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=100,
            parameter_name='RTU 17 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_17_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=101,
            parameter_name='RTU 17 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_17_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=102,
            parameter_name='RTU 17 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_18_ADDRESS = PointTypeParameter(
            parameter_number=103,
            parameter_name='RTU 18 Address',
            parameter_desc='Contains RTU 18 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 18 Address the Modbus Query is destined for
        """

        RTU_18_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=104,
            parameter_name='RTU 18 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 18. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 18. Note: See Modbus Function Codes list at end of table.
        """

        RTU_18_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=105,
            parameter_name='RTU 18 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 18.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 18.
        """

        RTU_18_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=106,
            parameter_name='RTU 18 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_18_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=107,
            parameter_name='RTU 18 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_18_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=108,
            parameter_name='RTU 18 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_19_ADDRESS = PointTypeParameter(
            parameter_number=109,
            parameter_name='RTU 19 Address',
            parameter_desc='Contains RTU 19 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 19 Address the Modbus Query is destined for
        """

        RTU_19_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=110,
            parameter_name='RTU 19 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 19. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 19. Note: See Modbus Function Codes list at end of table.
        """

        RTU_19_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=111,
            parameter_name='RTU 19 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 19.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 19.
        """

        RTU_19_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=112,
            parameter_name='RTU 19 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_19_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=113,
            parameter_name='RTU 19 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_19_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=114,
            parameter_name='RTU 19 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_20_ADDRESS = PointTypeParameter(
            parameter_number=115,
            parameter_name='RTU 20 Address',
            parameter_desc='Contains RTU 20 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 20 Address the Modbus Query is destined for
        """

        RTU_20_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=116,
            parameter_name='RTU 20 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 20. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 20. Note: See Modbus Function Codes list at end of table.
        """

        RTU_20_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=117,
            parameter_name='RTU 20 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 20.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 20.
        """

        RTU_20_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=118,
            parameter_name='RTU 20 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_20_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=119,
            parameter_name='RTU 20 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_20_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=120,
            parameter_name='RTU 20 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_21_ADDRESS = PointTypeParameter(
            parameter_number=121,
            parameter_name='RTU 21 Address',
            parameter_desc='Contains RTU 21 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 21 Address the Modbus Query is destined for
        """

        RTU_21_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=122,
            parameter_name='RTU 21 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 21. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 21. Note: See Modbus Function Codes list at end of table.
        """

        RTU_21_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=123,
            parameter_name='RTU 21 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 21.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 21.
        """

        RTU_21_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=124,
            parameter_name='RTU 21 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_21_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=125,
            parameter_name='RTU 21 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_21_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=126,
            parameter_name='RTU 21 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_22_ADDRESS = PointTypeParameter(
            parameter_number=127,
            parameter_name='RTU 22 Address',
            parameter_desc='Contains RTU 22 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 22 Address the Modbus Query is destined for
        """

        RTU_22_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=128,
            parameter_name='RTU 22 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 22. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 22. Note: See Modbus Function Codes list at end of table.
        """

        RTU_22_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=129,
            parameter_name='RTU 22 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 22.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 22.
        """

        RTU_22_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=130,
            parameter_name='RTU 22 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_22_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=131,
            parameter_name='RTU 22 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_22_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=132,
            parameter_name='RTU 22 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_23_ADDRESS = PointTypeParameter(
            parameter_number=133,
            parameter_name='RTU 23 Address',
            parameter_desc='Contains RTU 23 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 23 Address the Modbus Query is destined for
        """

        RTU_23_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=134,
            parameter_name='RTU 23 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 23. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 23. Note: See Modbus Function Codes list at end of table.
        """

        RTU_23_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=135,
            parameter_name='RTU 23 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 23.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 23.
        """

        RTU_23_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=136,
            parameter_name='RTU 23 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_23_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=137,
            parameter_name='RTU 23 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_23_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=138,
            parameter_name='RTU 23 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_24_ADDRESS = PointTypeParameter(
            parameter_number=139,
            parameter_name='RTU 24 Address',
            parameter_desc='Contains RTU 24 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 24 Address the Modbus Query is destined for
        """

        RTU_24_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=140,
            parameter_name='RTU 24 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 24. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 24. Note: See Modbus Function Codes list at end of table.
        """

        RTU_24_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=141,
            parameter_name='RTU 24 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 24.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 24.
        """

        RTU_24_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=142,
            parameter_name='RTU 24 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_24_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=143,
            parameter_name='RTU 24 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_24_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=144,
            parameter_name='RTU 24 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """

        RTU_25_ADDRESS = PointTypeParameter(
            parameter_number=145,
            parameter_name='RTU 25 Address',
            parameter_desc='Contains RTU 25 Address the Modbus Query is destined for',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Contains RTU 25 Address the Modbus Query is destined for
        """

        RTU_25_FUNCTION_CODE_NUMBER = PointTypeParameter(
            parameter_number=146,
            parameter_name='RTU 25 Function Code Number',
            parameter_desc='Specifies the Modbus Function Code to be sent to the slave device on RTU 25. Note: See Modbus Function Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 6, 15, 16'
        )
        """
        Specifies the Modbus Function Code to be sent to the slave device on RTU 25. Note: See Modbus Function Codes list at end of table.
        """

        RTU_25_SLAVE_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=147,
            parameter_name='RTU 25 Slave Register Number',
            parameter_desc='The starting Modbus register number on the slave device for the query on RTU 25.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the slave device for the query on RTU 25.
        """

        RTU_25_MASTER_REGISTER_NUMBER = PointTypeParameter(
            parameter_number=148,
            parameter_name='RTU 25 Master Register Number',
            parameter_desc='The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The starting Modbus register number on the Master device (ROC800-Series) where the data will either be stored for a read, or provided for a write.
        """

        RTU_25_NUMBER_OF_REGISTERS = PointTypeParameter(
            parameter_number=149,
            parameter_name='RTU 25 Number of registers',
            parameter_desc='Indicates the number of registers for the master to either read or write.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-120'
        )
        """
        Indicates the number of registers for the master to either read or write.
        """

        RTU_25_COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=150,
            parameter_name='RTU 25 Communication Status',
            parameter_desc='Displays the status of the master query. Note: See Communications Status Codes list at end of table.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0 8, 128 131, 144, 145'
        )
        """
        Displays the status of the master query. Note: See Communications Status Codes list at end of table.
        """





class DS800_CONFIGURATION(PointType):
    """DS800 Configuration"""

    point_type_number: int = 122
    """Point Type ID"""

    point_type_desc: str = 'DS800 Configuration'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POWER_SWITCH = PointTypeParameter(
            parameter_number=0,
            parameter_name='Power Switch',
            parameter_desc='Turns DS800 on and off. Valid values are 0 (OFF) and 1 (ON).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0,1'
        )
        """
        Turns DS800 on and off. Valid values are 0 (OFF) and 1 (ON).
        """

        RSI_ENABLE = PointTypeParameter(
            parameter_number=1,
            parameter_name='RSI Enable',
            parameter_desc='Enables/Disables the DS800 serial task. Valid values are 0 (Disable) and 1 (Enable). Changes to this parameter take affect when DS800 is stopped and started again.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0,1'
        )
        """
        Enables/Disables the DS800 serial task. Valid values are 0 (Disable) and 1 (Enable). Changes to this parameter take affect when DS800 is stopped and started
        again.
        """

        ETCP_ENABLE = PointTypeParameter(
            parameter_number=2,
            parameter_name='ETCP Enable',
            parameter_desc='Enables/Disables the DS800 TCP/IP task. Valid values are 0 (Disable) and 1 (Enable). Changes to this parameter take affect when DS800 is stopped and started again.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0,1'
        )
        """
        Enables/Disables the DS800 TCP/IP task. Valid values are 0 (Disable) and 1 (Enable). Changes to this parameter take affect when DS800 is stopped and started
        again.
        """

        IXD_ENABLE = PointTypeParameter(
            parameter_number=3,
            parameter_name='IXD Enable',
            parameter_desc='Enables/Disables the DS800 IXD task. Valid values are 0 (Disabale) and 1 (Enable). Changes to this parameter take affect when DS800 is stopped and started again.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0,1'
        )
        """
        Enables/Disables the DS800 IXD task. Valid values are 0 (Disabale) and 1 (Enable). Changes to this parameter take affect when DS800 is stopped and started
        again.
        """

        RSI_RUNNING = PointTypeParameter(
            parameter_number=4,
            parameter_name='RSI Running',
            parameter_desc='Indicates whether the DS800 serial task is currently running. Valid values are 0 (Not running) and 1 (Running).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0,1'
        )
        """
        Indicates whether the DS800 serial task is currently running. Valid values are 0 (Not running) and 1 (Running).
        """

        ETCP_RUNNING = PointTypeParameter(
            parameter_number=5,
            parameter_name='ETCP Running',
            parameter_desc='Indicates whether the DS800 TCP/IP task is currently running. Valid values are 0 (Not running) and 1 (Running).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0,1'
        )
        """
        Indicates whether the DS800 TCP/IP task is currently running. Valid values are 0 (Not running) and 1 (Running).
        """

        IXD_RUNNING = PointTypeParameter(
            parameter_number=6,
            parameter_name='IXD Running',
            parameter_desc='Indicates whether or not the DS800 IXD task is currently running. Valid values are 0 (Not running) and 1 (Running).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0,1'
        )
        """
        Indicates whether or not the DS800 IXD task is currently running. Valid values are 0 (Not running) and 1 (Running).
        """

        CLEAN_STORED_RESOURCES = PointTypeParameter(
            parameter_number=7,
            parameter_name='Clean Stored Resources',
            parameter_desc='Setting this parameter to 1 removes all stored resources from file system. This does not stop resources that may be running, but running resources will not be reloaded when you toggle the power switch.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0,1'
        )
        """
        Setting this parameter to 1 removes all stored resources from file system. This does not stop resources that may be running, but running resources will not be
        reloaded when you toggle the power switch.
        """

        RESOURCE_1_NAME = PointTypeParameter(
            parameter_number=8,
            parameter_name='Resource 1 Name',
            parameter_desc='Indicates the name for the specified resource.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x02 0x7E for each bite'
        )
        """
        Indicates the name for the specified resource.
        """

        RESOURCE_1_STATUS = PointTypeParameter(
            parameter_number=9,
            parameter_name='Resource 1 Status',
            parameter_desc='Indicates the resources status code. Valild values are: -1 = Fatal Error 0 = No resource available 1 = Stored resource available 2 = Ready to run 3 = Run in real time 4 = Run in cycle by cycle 5 = Run with breakpoint encountered (not currentl supported)',
            data_type=dt.INT8,
            access='R/O',
            value_range='1-120'
        )
        """
        Indicates the resources status code. Valild values are: -1 = Fatal Error 0 = No resource available 1 = Stored resource available 2 = Ready to run 3 = Run in
        real time 4 = Run in cycle by cycle 5 = Run with breakpoint encountered (not currentl supported)
        """

        RESROJUCE_1_PROGRAMMED_CYCLE_TIME = PointTypeParameter(
            parameter_number=10,
            parameter_name='Resrojuce 1 Programmed Cycle Time',
            parameter_desc='Indicates, in milliseconds, the defined cycle time for the specified resource.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 - 4,294,967,295'
        )
        """
        Indicates, in milliseconds, the defined cycle time for the specified resource.
        """

        RESOURCE_1_CURRENT_CYCLE_TIME = PointTypeParameter(
            parameter_number=11,
            parameter_name='Resource 1 Current Cycle Time',
            parameter_desc='Indicates, in milliseconds, the current cycle time for the specified resource.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 - 4,294,967,295'
        )
        """
        Indicates, in milliseconds, the current cycle time for the specified resource.
        """

        RESOURCE_2_NAME = PointTypeParameter(
            parameter_number=12,
            parameter_name='Resource 2 Name',
            parameter_desc='Indicates the name for the specified resource.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x02 0x7E for each bite'
        )
        """
        Indicates the name for the specified resource.
        """

        RESOURCE_2_STATUS = PointTypeParameter(
            parameter_number=13,
            parameter_name='Resource 2 Status',
            parameter_desc='Indicates the resources status code. Valild values are: -1 = Fatal Error 0 = No resource available 1 = Stored resource available 2 = Ready to run 3 = Run in real time 4 = Run in cycle by cycle 5 = Run with breakpoint encountered (not currentl supported)',
            data_type=dt.INT8,
            access='R/O',
            value_range='1-120'
        )
        """
        Indicates the resources status code. Valild values are: -1 = Fatal Error 0 = No resource available 1 = Stored resource available 2 = Ready to run 3 = Run in
        real time 4 = Run in cycle by cycle 5 = Run with breakpoint encountered (not currentl supported)
        """

        RESROIUCE_2_PROGRAMMED_CYCLE_TIME = PointTypeParameter(
            parameter_number=14,
            parameter_name='Resroiuce 2 Programmed Cycle Time',
            parameter_desc='Indicates, in milliseconds, the defined cycle time for the specified resource.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 - 4,294,967,295'
        )
        """
        Indicates, in milliseconds, the defined cycle time for the specified resource.
        """

        RESOURCE_2CURRENT_CYCLE_TIME = PointTypeParameter(
            parameter_number=15,
            parameter_name='Resource 2Current Cycle Time',
            parameter_desc='Indicates, in milliseconds, the current cycle time for the specified resource.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 - 4,294,967,295'
        )
        """
        Indicates, in milliseconds, the current cycle time for the specified resource.
        """

        RESOURCE_3_NAME = PointTypeParameter(
            parameter_number=16,
            parameter_name='Resource 3 Name',
            parameter_desc='Indicates the name for the specified resource.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x02 0x7E for each bite'
        )
        """
        Indicates the name for the specified resource.
        """

        RESOURCE_3STATUS = PointTypeParameter(
            parameter_number=17,
            parameter_name='Resource 3Status',
            parameter_desc='Indicates the resources status code. Valild values are: -1 = Fatal Error 0 = No resource available 1 = Stored resource available 2 = Ready to run 3 = Run in real time 4 = Run in cycle by cycle 5 = Run with breakpoint encountered (not currentl supported)',
            data_type=dt.INT8,
            access='R/O',
            value_range='1-120'
        )
        """
        Indicates the resources status code. Valild values are: -1 = Fatal Error 0 = No resource available 1 = Stored resource available 2 = Ready to run 3 = Run in
        real time 4 = Run in cycle by cycle 5 = Run with breakpoint encountered (not currentl supported)
        """

        RESROIUCE_3_PROGRAMMED_CYCLE_TIME = PointTypeParameter(
            parameter_number=18,
            parameter_name='Resroiuce 3 Programmed Cycle Time',
            parameter_desc='Indicates, in milliseconds, the defined cycle time for the specified resource.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 - 4,294,967,295'
        )
        """
        Indicates, in milliseconds, the defined cycle time for the specified resource.
        """

        RESOURCE_3_CURRENT_CYCLE_TIME = PointTypeParameter(
            parameter_number=19,
            parameter_name='Resource 3 Current Cycle Time',
            parameter_desc='Indicates, in milliseconds, the current cycle time for the specified resource.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 - 4,294,967,295'
        )
        """
        Indicates, in milliseconds, the current cycle time for the specified resource.
        """

        RESOURCE_4_NAME = PointTypeParameter(
            parameter_number=20,
            parameter_name='Resource 4 Name',
            parameter_desc='Indicates the name for the specified resource.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x02 0x7E for each bite'
        )
        """
        Indicates the name for the specified resource.
        """

        RESOURCE_4_STATUS = PointTypeParameter(
            parameter_number=21,
            parameter_name='Resource 4 Status',
            parameter_desc='Indicates the resources status code. Valild values are: -1 = Fatal Error 0 = No resource available 1 = Stored resource available 2 = Ready to run 3 = Run in real time 4 = Run in cycle by cycle 5 = Run with breakpoint encountered (not currentl supported)',
            data_type=dt.INT8,
            access='R/O',
            value_range='1-120'
        )
        """
        Indicates the resources status code. Valild values are: -1 = Fatal Error 0 = No resource available 1 = Stored resource available 2 = Ready to run 3 = Run in
        real time 4 = Run in cycle by cycle 5 = Run with breakpoint encountered (not currentl supported)
        """

        RESROIUCE_4_PROGRAMMED_CYCLE_TIME = PointTypeParameter(
            parameter_number=22,
            parameter_name='Resroiuce 4 Programmed Cycle Time',
            parameter_desc='Indicates, in milliseconds, the defined cycle time for the specified resource.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 - 4,294,967,295'
        )
        """
        Indicates, in milliseconds, the defined cycle time for the specified resource.
        """

        RESOURCE_4_CURRENT_CYCLE_TIME = PointTypeParameter(
            parameter_number=23,
            parameter_name='Resource 4 Current Cycle Time',
            parameter_desc='Indicates, in milliseconds, the current cycle time for the specified resource.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 - 4,294,967,295'
        )
        """
        Indicates, in milliseconds, the current cycle time for the specified resource.
        """





class SECURITY_GROUP_CONFIGURATION(PointType):
    """Security - Group Configuration"""

    point_type_number: int = 123
    """Point Type ID"""

    point_type_desc: str = 'Security - Group Configuration'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        GROUP_1 = PointTypeParameter(
            parameter_number=0,
            parameter_name='Group #1',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """

        GROUP_2 = PointTypeParameter(
            parameter_number=1,
            parameter_name='Group #2',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """

        GROUP_3 = PointTypeParameter(
            parameter_number=2,
            parameter_name='Group #3',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """

        GROUP_4 = PointTypeParameter(
            parameter_number=3,
            parameter_name='Group #4',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """

        GROUP_5 = PointTypeParameter(
            parameter_number=4,
            parameter_name='Group #5',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """

        GROUP_6 = PointTypeParameter(
            parameter_number=5,
            parameter_name='Group #6',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """

        GROUP_7 = PointTypeParameter(
            parameter_number=6,
            parameter_name='Group #7',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """

        GROUP_8 = PointTypeParameter(
            parameter_number=7,
            parameter_name='Group #8',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """

        GROUP_9 = PointTypeParameter(
            parameter_number=8,
            parameter_name='Group #9',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """

        GROUP_10 = PointTypeParameter(
            parameter_number=9,
            parameter_name='Group #10',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """

        GROUP_11 = PointTypeParameter(
            parameter_number=10,
            parameter_name='Group #11',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """

        GROUP_12 = PointTypeParameter(
            parameter_number=11,
            parameter_name='Group #12',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """

        GROUP_13 = PointTypeParameter(
            parameter_number=12,
            parameter_name='Group #13',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """

        GROUP_14 = PointTypeParameter(
            parameter_number=13,
            parameter_name='Group #14',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """

        GROUP_15 = PointTypeParameter(
            parameter_number=14,
            parameter_name='Group #15',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """

        GROUP_16 = PointTypeParameter(
            parameter_number=15,
            parameter_name='Group #16',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """

        GROUP_17 = PointTypeParameter(
            parameter_number=16,
            parameter_name='Group #17',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """

        GROUP_18 = PointTypeParameter(
            parameter_number=17,
            parameter_name='Group #18',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """

        GROUP_19 = PointTypeParameter(
            parameter_number=18,
            parameter_name='Group #19',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """

        GROUP_20 = PointTypeParameter(
            parameter_number=19,
            parameter_name='Group #20',
            parameter_desc='Group identifier',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Group identifier
        """





class HISTORY_SEGMENT_CONFIGURATION(PointType):
    """History Segment Configuration"""

    point_type_number: int = 124
    """Point Type ID"""

    point_type_desc: str = 'History Segment Configuration'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        SEGMENT_DESCRIPTION = PointTypeParameter(
            parameter_number=0,
            parameter_name='Segment Description',
            parameter_desc='Identifies what the segment of history is used for. For logical points 1 - 12, XX is the ordered number of the history type.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Identifies what the segment of history is used for. For logical points 1 - 12, XX is the ordered number of the history type.
        """

        SEGMENT_SIZE = PointTypeParameter(
            parameter_number=1,
            parameter_name='Segment Size',
            parameter_desc='Specifies how many history points are in the history segment. For Logic 0, this parameter is R/O. Note: You cannot modify this parameter from an FST, nor can you set this value to less than the value of parameter 12 (Number of Configured Points).',
            data_type=dt.UINT16,
            access='LOGIC 0: R/O LOGIC 1 - 10: R/W',
            value_range='0-240'
        )
        """
        Specifies how many history points are in the history segment. For Logic 0, this parameter is R/O. Note: You cannot modify this parameter from an FST, nor can
        you set this value to less than the value of parameter 12 (Number of Configured Points).
        """

        MAXIMUM_SEGMENT_SIZE = PointTypeParameter(
            parameter_number=2,
            parameter_name='Maximum Segment Size',
            parameter_desc='Specifies the maximum number of history points that may be configured for the history segment.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='240'
        )
        """
        Specifies the maximum number of history points that may be configured for the history segment.
        """

        PERIODIC_ENTRIES = PointTypeParameter(
            parameter_number=3,
            parameter_name='Periodic Entries',
            parameter_desc='Number of periodic entries per history point in the history segment. Actual upper range is limited by available free space.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Number of periodic entries per history point in the history segment. Actual upper range is limited by available free space.
        """

        DAILY_ENTRIES = PointTypeParameter(
            parameter_number=4,
            parameter_name='Daily Entries',
            parameter_desc='Number of daily entries per history point in the history segment.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Number of daily entries per history point in the history segment.
        """

        PERIODIC_INDEX = PointTypeParameter(
            parameter_number=5,
            parameter_name='Periodic Index',
            parameter_desc='Location in each history point for the segment where the next periodic entry will be saved.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 - (#Periodic Entries - 1)'
        )
        """
        Location in each history point for the segment where the next periodic entry will be saved.
        """

        DAILY_INDEX = PointTypeParameter(
            parameter_number=6,
            parameter_name='Daily Index',
            parameter_desc='Location in each history point for the segment where the next daily entry will be saved.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 - (#Daily Entries - 1)'
        )
        """
        Location in each history point for the segment where the next daily entry will be saved.
        """

        PERIODIC_SAMPLE_RATE = PointTypeParameter(
            parameter_number=7,
            parameter_name='Periodic Sample Rate',
            parameter_desc='The number of minute intervals that pass before an entry is made in the periodic history. Note: For meter run history, you can set the periodic sample rate only to the same value as the integral multiplier period for the meter run, or 60.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30, 60'
        )
        """
        The number of minute intervals that pass before an entry is made in the periodic history. Note: For meter run history, you can set the periodic sample rate only
        to the same value as the integral multiplier period for the meter run, or 60.
        """

        CONTRACT_HOUR = PointTypeParameter(
            parameter_number=8,
            parameter_name='Contract Hour',
            parameter_desc='Hour that indicates the beginning of a new day.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-23'
        )
        """
        Hour that indicates the beginning of a new day.
        """

        ON_OFF_SWITCH = PointTypeParameter(
            parameter_number=9,
            parameter_name='ON/OFF Switch',
            parameter_desc='Switch that controls history logging for the history segment. Logging is suspended while the switch is off. Valid values are 0 (Off) and 1 (On).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Switch that controls history logging for the history segment. Logging is suspended while the switch is off. Valid values are 0 (Off) and 1 (On).
        """

        FREE_SPACE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Free Space',
            parameter_desc='Specifies the number of history entries that are unaccounted for and may be added to history points in various segments. This value applies to all history segments.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 224400'
        )
        """
        Specifies the number of history entries that are unaccounted for and may be added to history points in various segments. This value applies to all history
        segments.
        """

        FORCE_END_OF_DAY = PointTypeParameter(
            parameter_number=11,
            parameter_name='Force End of Day',
            parameter_desc='Allows the user to force an end of day for the history segment. Valid values are 0 (No Force) and 1 (Force End of Day).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Allows the user to force an end of day for the history segment. Valid values are 0 (No Force) and 1 (Force End of Day).
        """

        NUMBER_OF_CONFIGURED_POINTS = PointTypeParameter(
            parameter_number=12,
            parameter_name='Number of Configured Points',
            parameter_desc='Number of history points that are configured in the segment.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0-240'
        )
        """
        Number of history points that are configured in the segment.
        """

        USER_WEIGHTING_TLP = PointTypeParameter(
            parameter_number=13,
            parameter_name='User Weighting TLP',
            parameter_desc='The parameter of the value to use as the weight when using averaging type 6, User Weighted Averaging. Note: TLP used as the weight must be a number.',
            data_type=dt.TLP,
            access='R/W',
            value_range='See note in description'
        )
        """
        The parameter of the value to use as the weight when using averaging type 6, User Weighted Averaging. Note: TLP used as the weight must be a number.
        """





class HISTORY_SEGMENT_0_POINT_CONFIGURATION(PointType):
    """History Segment 0 Point Configuration"""

    point_type_number: int = 125
    """Point Type ID"""

    point_type_desc: str = 'History Segment 0 Point Configuration'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Same value as the Point Tag of the Point Type the History Log Point resides in.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Same value as the Point Tag of the Point Type the History Log Point resides in.
        """

        PARAMETER_DESCRIPTION = PointTypeParameter(
            parameter_number=1,
            parameter_name='Parameter Description',
            parameter_desc='User supplied text string used to identify the parameter being logged in the history point.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        User supplied text string used to identify the parameter being logged in the history point.
        """

        HISTORY_LOG_POINT = PointTypeParameter(
            parameter_number=2,
            parameter_name='History Log Point',
            parameter_desc='TLP points to a value to be archived by history.',
            data_type=dt.TLP,
            access='R/W',
            value_range='See note 3'
        )
        """
        TLP points to a value to be archived by history.
        """

        ARCHIVE_TYPE = PointTypeParameter(
            parameter_number=3,
            parameter_name='Archive Type',
            parameter_desc='See note 1',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 1'
        )
        """
        See note 1
        """

        AVERAGING_RATE_TYPE = PointTypeParameter(
            parameter_number=4,
            parameter_name='Averaging/Rate Type',
            parameter_desc='See note 2',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 2'
        )
        """
        See note 2
        """

        CURRENT_VALUE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Current Value',
            parameter_desc='Current value of parameter being logged.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current value of parameter being logged.
        """

        LAST_DAILY_VALUE = PointTypeParameter(
            parameter_number=6,
            parameter_name='Last Daily Value',
            parameter_desc='Value logged to the daily archive at the last contract hour.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value logged to the daily archive at the last contract hour.
        """

        TODAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=7,
            parameter_name='Today Minimum Time',
            parameter_desc='Time the minimum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0-4294967296'
        )
        """
        Time the minimum value was reached today.
        """

        TODAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=8,
            parameter_name='Today Minimum Value',
            parameter_desc='Minimum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed today.
        """

        TODAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=9,
            parameter_name='Today Maximum Time',
            parameter_desc='Time the maximum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0-4294967296'
        )
        """
        Time the maximum value was reached today.
        """

        TODAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Today Maximum Value',
            parameter_desc='Maximum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed today.
        """

        YESTERDAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=11,
            parameter_name='Yesterday Minimum Time',
            parameter_desc='Time the minimum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0-4294967296'
        )
        """
        Time the minimum value was reached yesterday.
        """

        YESTERDAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Yesterday Minimum Value',
            parameter_desc='Minimum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed yesterday.
        """

        YESTERDAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=13,
            parameter_name='Yesterday Maximum Time',
            parameter_desc='Time the maximum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0-4294967296'
        )
        """
        Time the maximum value was reached yesterday.
        """

        YESTERDAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=14,
            parameter_name='Yesterday Maximum Value',
            parameter_desc='Maximum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed yesterday.
        """





class HISTORY_SEGMENT_1_POINT_CONFIGURATION(PointType):
    """History Segment 1 Point Configuration"""

    point_type_number: int = 126
    """Point Type ID"""

    point_type_desc: str = 'History Segment 1 Point Configuration'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Same value as the Point Tag of the Point Type the History Log Point resides in.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Same value as the Point Tag of the Point Type the History Log Point resides in.
        """

        PARAMETER_DESCRIPTION = PointTypeParameter(
            parameter_number=1,
            parameter_name='Parameter Description',
            parameter_desc='User supplied text string used to identify the parameter being logged in the history point.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        User supplied text string used to identify the parameter being logged in the history point.
        """

        HISTORY_LOG_POINT = PointTypeParameter(
            parameter_number=2,
            parameter_name='History Log Point',
            parameter_desc='TLP points to a value to be archived by history.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any parameter may be logged except parameters of Data Type TLP or AC'
        )
        """
        TLP points to a value to be archived by history.
        """

        ARCHIVE_TYPE = PointTypeParameter(
            parameter_number=3,
            parameter_name='Archive Type',
            parameter_desc='See note 1',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 1'
        )
        """
        See note 1
        """

        AVERAGING_RATE_TYPE = PointTypeParameter(
            parameter_number=4,
            parameter_name='Averaging/Rate Type',
            parameter_desc='See note 2',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 2'
        )
        """
        See note 2
        """

        CURRENT_VALUE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Current Value',
            parameter_desc='Current value of parameter being logged.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current value of parameter being logged.
        """

        LAST_DAILY_VALUE = PointTypeParameter(
            parameter_number=6,
            parameter_name='Last Daily Value',
            parameter_desc='Value logged to the daily archive at the last contract hour.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value logged to the daily archive at the last contract hour.
        """

        TODAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=7,
            parameter_name='Today Minimum Time',
            parameter_desc='Time the minimum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='94294967296'
        )
        """
        Time the minimum value was reached today.
        """

        TODAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=8,
            parameter_name='Today Minimum Value',
            parameter_desc='Minimum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed today.
        """

        TODAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=9,
            parameter_name='Today Maximum Time',
            parameter_desc='Time the maximum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='4294967296'
        )
        """
        Time the maximum value was reached today.
        """

        TODAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Today Maximum Value',
            parameter_desc='Maximum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed today.
        """

        YESTERDAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=11,
            parameter_name='Yesterday Minimum Time',
            parameter_desc='Time the minimum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0-4294967296'
        )
        """
        Time the minimum value was reached yesterday.
        """

        YESTERDAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Yesterday Minimum Value',
            parameter_desc='Minimum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed yesterday.
        """

        YESTERDAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=13,
            parameter_name='Yesterday Maximum Time',
            parameter_desc='Time the maximum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0-4294967296'
        )
        """
        Time the maximum value was reached yesterday.
        """

        YESTERDAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=14,
            parameter_name='Yesterday Maximum Value',
            parameter_desc='Maximum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed yesterday.
        """





class HISTORY_SEGMENT_2_POINT_CONFIGURATION(PointType):
    """History Segment 2 Point Configuration"""

    point_type_number: int = 127
    """Point Type ID"""

    point_type_desc: str = 'History Segment 2 Point Configuration'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Same value as the Point Tag of the Point Type the History Log Point resides in.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Same value as the Point Tag of the Point Type the History Log Point resides in.
        """

        PARAMETER_DESCRIPTION = PointTypeParameter(
            parameter_number=1,
            parameter_name='Parameter Description',
            parameter_desc='User supplied text string used to identify the parameter being logged in the history point.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        User supplied text string used to identify the parameter being logged in the history point.
        """

        HISTORY_LOG_POINT = PointTypeParameter(
            parameter_number=2,
            parameter_name='History Log Point',
            parameter_desc='TLP points to a value to be archived by history.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any parameter may be logged except parameters of Data Type TLP or AC'
        )
        """
        TLP points to a value to be archived by history.
        """

        ARCHIVE_TYPE = PointTypeParameter(
            parameter_number=3,
            parameter_name='Archive Type',
            parameter_desc='See note 1',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 1'
        )
        """
        See note 1
        """

        AVERAGING_RATE_TYPE = PointTypeParameter(
            parameter_number=4,
            parameter_name='Averaging/Rate Type',
            parameter_desc='See note 2',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 2'
        )
        """
        See note 2
        """

        CURRENT_VALUE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Current Value',
            parameter_desc='Current value of parameter being logged.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current value of parameter being logged.
        """

        LAST_DAILY_VALUE = PointTypeParameter(
            parameter_number=6,
            parameter_name='Last Daily Value',
            parameter_desc='Value logged to the daily archive at the last contract hour.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value logged to the daily archive at the last contract hour.
        """

        TODAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=7,
            parameter_name='Today Minimum Time',
            parameter_desc='Time the minimum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0-4294967296'
        )
        """
        Time the minimum value was reached today.
        """

        TODAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=8,
            parameter_name='Today Minimum Value',
            parameter_desc='Minimum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed today.
        """

        TODAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=9,
            parameter_name='Today Maximum Time',
            parameter_desc='Time the maximum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='-4294967296'
        )
        """
        Time the maximum value was reached today.
        """

        TODAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Today Maximum Value',
            parameter_desc='Maximum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed today.
        """

        YESTERDAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=11,
            parameter_name='Yesterday Minimum Time',
            parameter_desc='Time the minimum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0-4294967296'
        )
        """
        Time the minimum value was reached yesterday.
        """

        YESTERDAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Yesterday Minimum Value',
            parameter_desc='Minimum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed yesterday.
        """

        YESTERDAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=13,
            parameter_name='Yesterday Maximum Time',
            parameter_desc='Time the maximum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0-4294967296'
        )
        """
        Time the maximum value was reached yesterday.
        """

        YESTERDAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=14,
            parameter_name='Yesterday Maximum Value',
            parameter_desc='Maximum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed yesterday.
        """





class HISTORY_SEGMENT_3_POINT_CONFIGURATION(PointType):
    """History Segment 3 Point Configuration"""

    point_type_number: int = 128
    """Point Type ID"""

    point_type_desc: str = 'History Segment 3 Point Configuration'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Same value as the Point Tag of the Point Type the History Log Point resides in.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Same value as the Point Tag of the Point Type the History Log Point resides in.
        """

        PARAMETER_DESCRIPTION = PointTypeParameter(
            parameter_number=1,
            parameter_name='Parameter Description',
            parameter_desc='User supplied text string used to identify the parameter being logged in the history point.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        User supplied text string used to identify the parameter being logged in the history point.
        """

        HISTORY_LOG_POINT = PointTypeParameter(
            parameter_number=2,
            parameter_name='History Log Point',
            parameter_desc='TLP points to a value to be archived by history.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any parameter may be logged except parameters of Data Type TLP or AC'
        )
        """
        TLP points to a value to be archived by history.
        """

        ARCHIVE_TYPE = PointTypeParameter(
            parameter_number=3,
            parameter_name='Archive Type',
            parameter_desc='See note 1',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 1'
        )
        """
        See note 1
        """

        AVERAGING_RATE_TYPE = PointTypeParameter(
            parameter_number=4,
            parameter_name='Averaging/Rate Type',
            parameter_desc='See note 2',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 2'
        )
        """
        See note 2
        """

        CURRENT_VALUE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Current Value',
            parameter_desc='Current value of parameter being logged.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current value of parameter being logged.
        """

        LAST_DAILY_VALUE = PointTypeParameter(
            parameter_number=6,
            parameter_name='Last Daily Value',
            parameter_desc='Value logged to the daily archive at the last contract hour.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value logged to the daily archive at the last contract hour.
        """

        TODAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=7,
            parameter_name='Today Minimum Time',
            parameter_desc='Time the minimum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='>4294967296'
        )
        """
        Time the minimum value was reached today.
        """

        TODAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=8,
            parameter_name='Today Minimum Value',
            parameter_desc='Minimum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed today.
        """

        TODAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=9,
            parameter_name='Today Maximum Time',
            parameter_desc='Time the maximum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='4294967296'
        )
        """
        Time the maximum value was reached today.
        """

        TODAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Today Maximum Value',
            parameter_desc='Maximum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed today.
        """

        YESTERDAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=11,
            parameter_name='Yesterday Minimum Time',
            parameter_desc='Time the minimum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0->4294967296'
        )
        """
        Time the minimum value was reached yesterday.
        """

        YESTERDAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Yesterday Minimum Value',
            parameter_desc='Minimum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed yesterday.
        """

        YESTERDAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=13,
            parameter_name='Yesterday Maximum Time',
            parameter_desc='Time the maximum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0->4294967296'
        )
        """
        Time the maximum value was reached yesterday.
        """

        YESTERDAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=14,
            parameter_name='Yesterday Maximum Value',
            parameter_desc='Maximum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed yesterday.
        """





class HISTORY_SEGMENT_4_POINT_CONFIGURATION(PointType):
    """History Segment 4 Point Configuration"""

    point_type_number: int = 129
    """Point Type ID"""

    point_type_desc: str = 'History Segment 4 Point Configuration'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Same value as the Point Tag of the Point Type the History Log Point resides in.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Same value as the Point Tag of the Point Type the History Log Point resides in.
        """

        PARAMETER_DESCRIPTION = PointTypeParameter(
            parameter_number=1,
            parameter_name='Parameter Description',
            parameter_desc='User supplied text string used to identify the parameter being logged in the history point.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        User supplied text string used to identify the parameter being logged in the history point.
        """

        HISTORY_LOG_POINT = PointTypeParameter(
            parameter_number=2,
            parameter_name='History Log Point',
            parameter_desc='TLP points to a value to be archived by history.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any parameter may be logged except parameters of Data Type TLP or AC'
        )
        """
        TLP points to a value to be archived by history.
        """

        ARCHIVE_TYPE = PointTypeParameter(
            parameter_number=3,
            parameter_name='Archive Type',
            parameter_desc='See note 1',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 1'
        )
        """
        See note 1
        """

        AVERAGING_RATE_TYPE = PointTypeParameter(
            parameter_number=4,
            parameter_name='Averaging/Rate Type',
            parameter_desc='See note 2',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 2'
        )
        """
        See note 2
        """

        CURRENT_VALUE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Current Value',
            parameter_desc='Current value of parameter being logged.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current value of parameter being logged.
        """

        LAST_DAILY_VALUE = PointTypeParameter(
            parameter_number=6,
            parameter_name='Last Daily Value',
            parameter_desc='Value logged to the daily archive at the last contract hour.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value logged to the daily archive at the last contract hour.
        """

        TODAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=7,
            parameter_name='Today Minimum Time',
            parameter_desc='Time the minimum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='94294967296'
        )
        """
        Time the minimum value was reached today.
        """

        TODAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=8,
            parameter_name='Today Minimum Value',
            parameter_desc='Minimum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed today.
        """

        TODAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=9,
            parameter_name='Today Maximum Time',
            parameter_desc='Time the maximum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='>4294967296'
        )
        """
        Time the maximum value was reached today.
        """

        TODAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Today Maximum Value',
            parameter_desc='Maximum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed today.
        """

        YESTERDAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=11,
            parameter_name='Yesterday Minimum Time',
            parameter_desc='Time the minimum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0->4294967296'
        )
        """
        Time the minimum value was reached yesterday.
        """

        YESTERDAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Yesterday Minimum Value',
            parameter_desc='Minimum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed yesterday.
        """

        YESTERDAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=13,
            parameter_name='Yesterday Maximum Time',
            parameter_desc='Time the maximum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0->4294967296'
        )
        """
        Time the maximum value was reached yesterday.
        """

        YESTERDAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=14,
            parameter_name='Yesterday Maximum Value',
            parameter_desc='Maximum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed yesterday.
        """





class HISTORY_SEGMENT_5_POINT_CONFIGURATION(PointType):
    """History Segment 5 Point Configuration"""

    point_type_number: int = 130
    """Point Type ID"""

    point_type_desc: str = 'History Segment 5 Point Configuration'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Same value as the Point Tag of the Point Type the History Log Point resides in.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Same value as the Point Tag of the Point Type the History Log Point resides in.
        """

        PARAMETER_DESCRIPTION = PointTypeParameter(
            parameter_number=1,
            parameter_name='Parameter Description',
            parameter_desc='User supplied text string used to identify the parameter being logged in the history point.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        User supplied text string used to identify the parameter being logged in the history point.
        """

        HISTORY_LOG_POINT = PointTypeParameter(
            parameter_number=2,
            parameter_name='History Log Point',
            parameter_desc='TLP points to a value to be archived by history.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any parameter may be logged except parameters of Data Type TLP or AC'
        )
        """
        TLP points to a value to be archived by history.
        """

        ARCHIVE_TYPE = PointTypeParameter(
            parameter_number=3,
            parameter_name='Archive Type',
            parameter_desc='See note 1',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 1'
        )
        """
        See note 1
        """

        AVERAGING_RATE_TYPE = PointTypeParameter(
            parameter_number=4,
            parameter_name='Averaging/Rate Type',
            parameter_desc='See note 2',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 2'
        )
        """
        See note 2
        """

        CURRENT_VALUE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Current Value',
            parameter_desc='Current value of parameter being logged.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current value of parameter being logged.
        """

        LAST_DAILY_VALUE = PointTypeParameter(
            parameter_number=6,
            parameter_name='Last Daily Value',
            parameter_desc='Value logged to the daily archive at the last contract hour.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value logged to the daily archive at the last contract hour.
        """

        TODAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=7,
            parameter_name='Today Minimum Time',
            parameter_desc='Time the minimum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0->4294967296'
        )
        """
        Time the minimum value was reached today.
        """

        TODAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=8,
            parameter_name='Today Minimum Value',
            parameter_desc='Minimum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed today.
        """

        TODAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=9,
            parameter_name='Today Maximum Time',
            parameter_desc='Time the maximum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0-4294967296'
        )
        """
        Time the maximum value was reached today.
        """

        TODAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Today Maximum Value',
            parameter_desc='Maximum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed today.
        """

        YESTERDAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=11,
            parameter_name='Yesterday Minimum Time',
            parameter_desc='Time the minimum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0->4294967296'
        )
        """
        Time the minimum value was reached yesterday.
        """

        YESTERDAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Yesterday Minimum Value',
            parameter_desc='Minimum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed yesterday.
        """

        YESTERDAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=13,
            parameter_name='Yesterday Maximum Time',
            parameter_desc='Time the maximum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0->4294967296'
        )
        """
        Time the maximum value was reached yesterday.
        """

        YESTERDAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=14,
            parameter_name='Yesterday Maximum Value',
            parameter_desc='Maximum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed yesterday.
        """





class HISTORY_SEGMENT_6_POINT_CONFIGURATION(PointType):
    """History Segment 6 Point Configuration"""

    point_type_number: int = 131
    """Point Type ID"""

    point_type_desc: str = 'History Segment 6 Point Configuration'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Same value as the Point Tag of the Point Type the History Log Point resides in.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Same value as the Point Tag of the Point Type the History Log Point resides in.
        """

        PARAMETER_DESCRIPTION = PointTypeParameter(
            parameter_number=1,
            parameter_name='Parameter Description',
            parameter_desc='User supplied text string used to identify the parameter being logged in the history point.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        User supplied text string used to identify the parameter being logged in the history point.
        """

        HISTORY_LOG_POINT = PointTypeParameter(
            parameter_number=2,
            parameter_name='History Log Point',
            parameter_desc='TLP points to a value to be archived by history.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any parameter may be logged except parameters of Data Type TLP or AC'
        )
        """
        TLP points to a value to be archived by history.
        """

        ARCHIVE_TYPE = PointTypeParameter(
            parameter_number=3,
            parameter_name='Archive Type',
            parameter_desc='See note 1',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 1'
        )
        """
        See note 1
        """

        AVERAGING_RATE_TYPE = PointTypeParameter(
            parameter_number=4,
            parameter_name='Averaging/Rate Type',
            parameter_desc='See note 2',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 2'
        )
        """
        See note 2
        """

        CURRENT_VALUE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Current Value',
            parameter_desc='Current value of parameter being logged.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current value of parameter being logged.
        """

        LAST_DAILY_VALUE = PointTypeParameter(
            parameter_number=6,
            parameter_name='Last Daily Value',
            parameter_desc='Value logged to the daily archive at the last contract hour.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value logged to the daily archive at the last contract hour.
        """

        TODAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=7,
            parameter_name='Today Minimum Time',
            parameter_desc='Time the minimum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='-4294967296'
        )
        """
        Time the minimum value was reached today.
        """

        TODAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=8,
            parameter_name='Today Minimum Value',
            parameter_desc='Minimum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed today.
        """

        TODAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=9,
            parameter_name='Today Maximum Time',
            parameter_desc='Time the maximum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0-4294967296'
        )
        """
        Time the maximum value was reached today.
        """

        TODAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Today Maximum Value',
            parameter_desc='Maximum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed today.
        """

        YESTERDAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=11,
            parameter_name='Yesterday Minimum Time',
            parameter_desc='Time the minimum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0-4294967296'
        )
        """
        Time the minimum value was reached yesterday.
        """

        YESTERDAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Yesterday Minimum Value',
            parameter_desc='Minimum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed yesterday.
        """

        YESTERDAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=13,
            parameter_name='Yesterday Maximum Time',
            parameter_desc='Time the maximum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0->4294967296'
        )
        """
        Time the maximum value was reached yesterday.
        """

        YESTERDAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=14,
            parameter_name='Yesterday Maximum Value',
            parameter_desc='Maximum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed yesterday.
        """





class HISTORY_SEGMENT_7_POINT_CONFIGURATION(PointType):
    """History Segment 7 Point Configuration"""

    point_type_number: int = 132
    """Point Type ID"""

    point_type_desc: str = 'History Segment 7 Point Configuration'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Same value as the Point Tag of the Point Type the History Log Point resides in.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Same value as the Point Tag of the Point Type the History Log Point resides in.
        """

        PARAMETER_DESCRIPTION = PointTypeParameter(
            parameter_number=1,
            parameter_name='Parameter Description',
            parameter_desc='User supplied text string used to identify the parameter being logged in the history point.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        User supplied text string used to identify the parameter being logged in the history point.
        """

        HISTORY_LOG_POINT = PointTypeParameter(
            parameter_number=2,
            parameter_name='History Log Point',
            parameter_desc='TLP points to a value to be archived by history.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any parameter may be logged except parameters of Data Type TLP or AC'
        )
        """
        TLP points to a value to be archived by history.
        """

        ARCHIVE_TYPE = PointTypeParameter(
            parameter_number=3,
            parameter_name='Archive Type',
            parameter_desc='See note 1',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 1'
        )
        """
        See note 1
        """

        AVERAGING_RATE_TYPE = PointTypeParameter(
            parameter_number=4,
            parameter_name='Averaging/Rate Type',
            parameter_desc='See noter 2',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 2'
        )
        """
        See noter 2
        """

        CURRENT_VALUE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Current Value',
            parameter_desc='Current value of parameter being logged.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current value of parameter being logged.
        """

        LAST_DAILY_VALUE = PointTypeParameter(
            parameter_number=6,
            parameter_name='Last Daily Value',
            parameter_desc='Value logged to the daily archive at the last contract hour.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value logged to the daily archive at the last contract hour.
        """

        TODAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=7,
            parameter_name='Today Minimum Time',
            parameter_desc='Time the minimum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0->4294967296'
        )
        """
        Time the minimum value was reached today.
        """

        TODAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=8,
            parameter_name='Today Minimum Value',
            parameter_desc='Minimum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed today.
        """

        TODAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=9,
            parameter_name='Today Maximum Time',
            parameter_desc='Time the maximum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0-4294967296'
        )
        """
        Time the maximum value was reached today.
        """

        TODAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Today Maximum Value',
            parameter_desc='Maximum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed today.
        """

        YESTERDAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=11,
            parameter_name='Yesterday Minimum Time',
            parameter_desc='Time the minimum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0-4294967296'
        )
        """
        Time the minimum value was reached yesterday.
        """

        YESTERDAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Yesterday Minimum Value',
            parameter_desc='Minimum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed yesterday.
        """

        YESTERDAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=13,
            parameter_name='Yesterday Maximum Time',
            parameter_desc='Time the maximum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0->4294967296'
        )
        """
        Time the maximum value was reached yesterday.
        """

        YESTERDAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=14,
            parameter_name='Yesterday Maximum Value',
            parameter_desc='Maximum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed yesterday.
        """





class HISTORY_SEGMENT_8_POINT_CONFIGURATION(PointType):
    """History Segment 8 Point Configuration"""

    point_type_number: int = 133
    """Point Type ID"""

    point_type_desc: str = 'History Segment 8 Point Configuration'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Same value as the Point Tag of the Point Type the History Log Point resides in.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Same value as the Point Tag of the Point Type the History Log Point resides in.
        """

        PARAMETER_DESCRIPTION = PointTypeParameter(
            parameter_number=1,
            parameter_name='Parameter Description',
            parameter_desc='User supplied text string used to identify the parameter being logged in the history point.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        User supplied text string used to identify the parameter being logged in the history point.
        """

        HISTORY_LOG_POINT = PointTypeParameter(
            parameter_number=2,
            parameter_name='History Log Point',
            parameter_desc='TLP points to a value to be archived by history.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any parameter may be logged except parameters of Data Type TLP or AC'
        )
        """
        TLP points to a value to be archived by history.
        """

        ARCHIVE_TYPE = PointTypeParameter(
            parameter_number=3,
            parameter_name='Archive Type',
            parameter_desc='See note 1',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 1'
        )
        """
        See note 1
        """

        AVERAGING_RATE_TYPE = PointTypeParameter(
            parameter_number=4,
            parameter_name='Averaging/Rate Type',
            parameter_desc='See note 2',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 2'
        )
        """
        See note 2
        """

        CURRENT_VALUE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Current Value',
            parameter_desc='Current value of parameter being logged.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current value of parameter being logged.
        """

        LAST_DAILY_VALUE = PointTypeParameter(
            parameter_number=6,
            parameter_name='Last Daily Value',
            parameter_desc='Value logged to the daily archive at the last contract hour.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value logged to the daily archive at the last contract hour.
        """

        TODAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=7,
            parameter_name='Today Minimum Time',
            parameter_desc='Time the minimum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='>4294967296'
        )
        """
        Time the minimum value was reached today.
        """

        TODAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=8,
            parameter_name='Today Minimum Value',
            parameter_desc='Minimum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed today.
        """

        TODAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=9,
            parameter_name='Today Maximum Time',
            parameter_desc='Time the maximum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0-4294967296'
        )
        """
        Time the maximum value was reached today.
        """

        TODAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Today Maximum Value',
            parameter_desc='Maximum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed today.
        """

        YESTERDAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=11,
            parameter_name='Yesterday Minimum Time',
            parameter_desc='Time the minimum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0->4294967296'
        )
        """
        Time the minimum value was reached yesterday.
        """

        YESTERDAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Yesterday Minimum Value',
            parameter_desc='Minimum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed yesterday.
        """

        YESTERDAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=13,
            parameter_name='Yesterday Maximum Time',
            parameter_desc='Time the maximum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0->4294967296'
        )
        """
        Time the maximum value was reached yesterday.
        """

        YESTERDAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=14,
            parameter_name='Yesterday Maximum Value',
            parameter_desc='Maximum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed yesterday.
        """





class HISTORY_SEGMENT_9_POINT_CONFIGURATION(PointType):
    """History Segment 9 Point Configuration"""

    point_type_number: int = 134
    """Point Type ID"""

    point_type_desc: str = 'History Segment 9 Point Configuration'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Same value as the Point Tag of the Point Type the History Log Point resides in.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Same value as the Point Tag of the Point Type the History Log Point resides in.
        """

        PARAMETER_DESCRIPTION = PointTypeParameter(
            parameter_number=1,
            parameter_name='Parameter Description',
            parameter_desc='User supplied text string used to identify the parameter being logged in the history point.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        User supplied text string used to identify the parameter being logged in the history point.
        """

        HISTORY_LOG_POINT = PointTypeParameter(
            parameter_number=2,
            parameter_name='History Log Point',
            parameter_desc='TLP points to a value to be archived by history.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any parameter may be logged except parameters of Data Type TLP or AC'
        )
        """
        TLP points to a value to be archived by history.
        """

        ARCHIVE_TYPE = PointTypeParameter(
            parameter_number=3,
            parameter_name='Archive Type',
            parameter_desc='See note 1',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 1'
        )
        """
        See note 1
        """

        AVERAGING_RATE_TYPE = PointTypeParameter(
            parameter_number=4,
            parameter_name='Averaging/Rate Type',
            parameter_desc='See note 2',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 2'
        )
        """
        See note 2
        """

        CURRENT_VALUE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Current Value',
            parameter_desc='Current value of parameter being logged.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current value of parameter being logged.
        """

        LAST_DAILY_VALUE = PointTypeParameter(
            parameter_number=6,
            parameter_name='Last Daily Value',
            parameter_desc='Value logged to the daily archive at the last contract hour.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value logged to the daily archive at the last contract hour.
        """

        TODAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=7,
            parameter_name='Today Minimum Time',
            parameter_desc='Time the minimum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0-4294967296'
        )
        """
        Time the minimum value was reached today.
        """

        TODAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=8,
            parameter_name='Today Minimum Value',
            parameter_desc='Minimum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed today.
        """

        TODAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=9,
            parameter_name='Today Maximum Time',
            parameter_desc='Time the maximum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='4294967296'
        )
        """
        Time the maximum value was reached today.
        """

        TODAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Today Maximum Value',
            parameter_desc='Maximum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed today.
        """

        YESTERDAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=11,
            parameter_name='Yesterday Minimum Time',
            parameter_desc='Time the minimum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0->4294967296'
        )
        """
        Time the minimum value was reached yesterday.
        """

        YESTERDAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Yesterday Minimum Value',
            parameter_desc='Minimum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed yesterday.
        """

        YESTERDAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=13,
            parameter_name='Yesterday Maximum Time',
            parameter_desc='Time the maximum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0-4294967296'
        )
        """
        Time the maximum value was reached yesterday.
        """

        YESTERDAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=14,
            parameter_name='Yesterday Maximum Value',
            parameter_desc='Maximum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed yesterday.
        """





class HISTORY_SEGMENT_10_POINT_CONFIGURATION(PointType):
    """History Segment 10 Point Configuration"""

    point_type_number: int = 135
    """Point Type ID"""

    point_type_desc: str = 'History Segment 10 Point Configuration'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Same value as the Point Tag of the Point Type the History Log Point resides in.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Same value as the Point Tag of the Point Type the History Log Point resides in.
        """

        PARAMETER_DESCRIPTION = PointTypeParameter(
            parameter_number=1,
            parameter_name='Parameter Description',
            parameter_desc='User supplied text string used to identify the parameter being logged in the history point.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        User supplied text string used to identify the parameter being logged in the history point.
        """

        HISTORY_LOG_POINT = PointTypeParameter(
            parameter_number=2,
            parameter_name='History Log Point',
            parameter_desc='TLP points to a value to be archived by history.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any parameter may be logged except parameters of Data Type TLP or AC'
        )
        """
        TLP points to a value to be archived by history.
        """

        ARCHIVE_TYPE = PointTypeParameter(
            parameter_number=3,
            parameter_name='Archive Type',
            parameter_desc='See note 1',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 1'
        )
        """
        See note 1
        """

        AVERAGING_RATE_TYPE = PointTypeParameter(
            parameter_number=4,
            parameter_name='Averaging/Rate Type',
            parameter_desc='See note 2',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 2'
        )
        """
        See note 2
        """

        CURRENT_VALUE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Current Value',
            parameter_desc='Current value of parameter being logged.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current value of parameter being logged.
        """

        LAST_DAILY_VALUE = PointTypeParameter(
            parameter_number=6,
            parameter_name='Last Daily Value',
            parameter_desc='Value logged to the daily archive at the last contract hour.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value logged to the daily archive at the last contract hour.
        """

        TODAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=7,
            parameter_name='Today Minimum Time',
            parameter_desc='Time the minimum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0->4294967296'
        )
        """
        Time the minimum value was reached today.
        """

        TODAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=8,
            parameter_name='Today Minimum Value',
            parameter_desc='Minimum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed today.
        """

        TODAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=9,
            parameter_name='Today Maximum Time',
            parameter_desc='Time the maximum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='-4294967296'
        )
        """
        Time the maximum value was reached today.
        """

        TODAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Today Maximum Value',
            parameter_desc='Maximum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed today.
        """

        YESTERDAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=11,
            parameter_name='Yesterday Minimum Time',
            parameter_desc='Time the minimum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='>4294967296'
        )
        """
        Time the minimum value was reached yesterday.
        """

        YESTERDAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Yesterday Minimum Value',
            parameter_desc='Minimum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed yesterday.
        """

        YESTERDAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=13,
            parameter_name='Yesterday Maximum Time',
            parameter_desc='Time the maximum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='-4294967296'
        )
        """
        Time the maximum value was reached yesterday.
        """

        YESTERDAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=14,
            parameter_name='Yesterday Maximum Value',
            parameter_desc='Maximum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed yesterday.
        """





class ROC_CLOCK(PointType):
    """ROC Clock"""

    point_type_number: int = 136
    """Point Type ID"""

    point_type_desc: str = 'ROC Clock'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        SECONDS = PointTypeParameter(
            parameter_number=0,
            parameter_name='Seconds',
            parameter_desc='The seconds.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-59'
        )
        """
        The seconds.
        """

        MINUTES = PointTypeParameter(
            parameter_number=1,
            parameter_name='Minutes',
            parameter_desc='The minutes.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-59'
        )
        """
        The minutes.
        """

        HOURS = PointTypeParameter(
            parameter_number=2,
            parameter_name='Hours',
            parameter_desc='The hours.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-23'
        )
        """
        The hours.
        """

        DAY = PointTypeParameter(
            parameter_number=3,
            parameter_name='Day',
            parameter_desc='The day.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='1-31'
        )
        """
        The day.
        """

        MONTH = PointTypeParameter(
            parameter_number=4,
            parameter_name='Month',
            parameter_desc='The month.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='1-12'
        )
        """
        The month.
        """

        YEAR = PointTypeParameter(
            parameter_number=5,
            parameter_name='Year',
            parameter_desc='The year.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='2000 2104'
        )
        """
        The year.
        """

        DAY_OF_WEEK = PointTypeParameter(
            parameter_number=6,
            parameter_name='Day of Week',
            parameter_desc='The day of the week. Valid values are: 1 Sunday 2 = Monday 3 = Tuesday 4 = Wednesday 5 = Thursday 6 Friday 7 = Saturday',
            data_type=dt.UINT8,
            access='R/O',
            value_range='1-7'
        )
        """
        The day of the week. Valid values are: 1 Sunday 2 = Monday 3 = Tuesday 4 = Wednesday 5 = Thursday 6 Friday 7 = Saturday
        """

        TIME = PointTypeParameter(
            parameter_number=7,
            parameter_name='Time',
            parameter_desc='Number of seconds elapsed since 12:00 a.m. Jan. 1, 1970.',
            data_type=dt.TIME,
            access='R/O',
            value_range='N/A'
        )
        """
        Number of seconds elapsed since 12:00 a.m. Jan. 1, 1970.
        """

        DAYLIGHT_SAVINGS_TIME_ENABLE = PointTypeParameter(
            parameter_number=8,
            parameter_name='Daylight Savings Time Enable',
            parameter_desc='Indicates if daylight savings time is enabled. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates if daylight savings time is enabled. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        MICROSECONDS = PointTypeParameter(
            parameter_number=9,
            parameter_name='Microseconds',
            parameter_desc='The microseconds.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 999999'
        )
        """
        The microseconds.
        """

        DST_START_HOUR = PointTypeParameter(
            parameter_number=10,
            parameter_name='DST Start Hour',
            parameter_desc='Hour at which daylight saving time begins.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-23'
        )
        """
        Hour at which daylight saving time begins.
        """

        DST_START_DAY_OF_WEEK = PointTypeParameter(
            parameter_number=11,
            parameter_name='DST Start Day of Week',
            parameter_desc='Day of the week on which daylight saving time begins.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-7 (corresponds to Sunday through Saturday)'
        )
        """
        Day of the week on which daylight saving time begins.
        """

        DST_START_WEEK_OF_MONTH = PointTypeParameter(
            parameter_number=12,
            parameter_name='DST Start Week of Month',
            parameter_desc='Week fo the month in which daylight saving time begins. Weeks are counted if the Sunday falls in the month.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-6 (if set to 6, will be the last week of the month)'
        )
        """
        Week fo the month in which daylight saving time begins. Weeks are counted if the Sunday falls in the month.
        """

        DST_START_MONTH = PointTypeParameter(
            parameter_number=13,
            parameter_name='DST Start Month',
            parameter_desc='Month in which daylight saving time begins.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-12'
        )
        """
        Month in which daylight saving time begins.
        """

        DST_START_DATE_AND_TIME = PointTypeParameter(
            parameter_number=14,
            parameter_name='DST Start Date and Time',
            parameter_desc='Time and date on which daylight saving time begins. Calculated based on settings above.',
            data_type=dt.TIME,
            access='R/O',
            value_range='N/A'
        )
        """
        Time and date on which daylight saving time begins. Calculated based on settings above.
        """

        DST_END_HOUR = PointTypeParameter(
            parameter_number=15,
            parameter_name='DST End Hour',
            parameter_desc='Hour at which daylight saving time ends.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-23'
        )
        """
        Hour at which daylight saving time ends.
        """

        DST_END_DAY_OF_WEEK = PointTypeParameter(
            parameter_number=16,
            parameter_name='DST End Day of Week',
            parameter_desc='Day of the week in which daylight saving time ends.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-7 (corresponds to Sunday through Saturday)'
        )
        """
        Day of the week in which daylight saving time ends.
        """

        DST_END_WEEK_OF_MONTH = PointTypeParameter(
            parameter_number=17,
            parameter_name='DST End Week of Month',
            parameter_desc='Week of the month in which daylight saving time ends. Weeks are counted if the Sunday falls in the month.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-56 (if set to 56, will be the last week of month)'
        )
        """
        Week of the month in which daylight saving time ends. Weeks are counted if the Sunday falls in the month.
        """

        DST_END_MONTH = PointTypeParameter(
            parameter_number=18,
            parameter_name='DST End Month',
            parameter_desc='Month at which daylight saving time ends.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-12'
        )
        """
        Month at which daylight saving time ends.
        """

        DST_END_DATE_AND_TIME = PointTypeParameter(
            parameter_number=19,
            parameter_name='DST End Date and Time',
            parameter_desc='The time and date that daylight saving time ends. Calculated based on settings above.',
            data_type=dt.TIME,
            access='R/O',
            value_range='N/A'
        )
        """
        The time and date that daylight saving time ends. Calculated based on settings above.
        """





class INTERNET_CONFIG_PARAMETERS(PointType):
    """Internet Configuration Parameters"""

    point_type_number: int = 137
    """Point Type ID"""

    point_type_desc: str = 'Internet Configuration Parameters'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        MAC_ADDRESS = PointTypeParameter(
            parameter_number=0,
            parameter_name='MAC Address',
            parameter_desc='Unique MAC address set by the factory.',
            data_type=dt.AC12,
            access='R/O',
            value_range='N/A'
        )
        """
        Unique MAC address set by the factory.
        """

        IP_ADDRESS = PointTypeParameter(
            parameter_number=1,
            parameter_name='IP Address',
            parameter_desc='IP address for the ROC800. Note: These values must be in the format XXX.XXX.XXX.XXX (such as 10.0.0.1). The value 255.255.255.255 is invalid.',
            data_type=dt.AC20,
            access='R/W',
            value_range='See note in description'
        )
        """
        IP address for the ROC800. Note: These values must be in the format XXX.XXX.XXX.XXX (such as 10.0.0.1). The value 255.255.255.255 is invalid.
        """

        SUBNET_MASK = PointTypeParameter(
            parameter_number=2,
            parameter_name='Subnet Mask',
            parameter_desc='Subnet mask for the ROC800. Note: These values must be in the format XXX.XXX.XXX.XXX (such as 10.0.0.1). The value 255.255.255.255 is invalid',
            data_type=dt.AC20,
            access='R/W',
            value_range='See note in description'
        )
        """
        Subnet mask for the ROC800. Note: These values must be in the format XXX.XXX.XXX.XXX (such as 10.0.0.1). The value 255.255.255.255 is invalid
        """

        GATEWAY_ADDRESS = PointTypeParameter(
            parameter_number=3,
            parameter_name='Gateway Address',
            parameter_desc='Gateway used by the ROC800. Note: These values must be in the format XXX.XXX.XXX.XXX (such as 10.0.0.1). The value 255.255.255.255 is invalid',
            data_type=dt.AC20,
            access='R/W',
            value_range='See note in description'
        )
        """
        Gateway used by the ROC800. Note: These values must be in the format XXX.XXX.XXX.XXX (such as 10.0.0.1). The value 255.255.255.255 is invalid
        """

        ROC_PLUS_PROTOCOL_IP_PORT_NUMBER = PointTypeParameter(
            parameter_number=4,
            parameter_name='ROC Plus Protocol IP Port Number',
            parameter_desc='The IP port number to which the ROC listens ROC Plus Protocol connections.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The IP port number to which the ROC listens ROC Plus Protocol connections.
        """

        CURRENT_ROC_PLUS_PROTOCOL_CONNECTIONS = PointTypeParameter(
            parameter_number=5,
            parameter_name='Current ROC Plus Protocol Connections',
            parameter_desc='This parameter shows the number of active ROC Plus Protocol TCP/IP connections.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0 > 255'
        )
        """
        This parameter shows the number of active ROC Plus Protocol TCP/IP connections.
        """

        ROC_PLUS_PROTOCOL_INACTIVITY_TIME = PointTypeParameter(
            parameter_number=6,
            parameter_name='ROC Plus Protocol Inactivity Time',
            parameter_desc='Time, in seconds, that the ROC800 waits, without receiving a valid message, before it closes the connection. Occurs in the Application Layer. Enter 0 to disable this feature.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0-> Any positive valid IEEE 754 float'
        )
        """
        Time, in seconds, that the ROC800 waits, without receiving a valid message, before it closes the connection. Occurs in the Application Layer. Enter 0 to disable
        this feature.
        """

        RESET_ROC_PLUS_PROTOCOL_CONNECTIONS = PointTypeParameter(
            parameter_number=7,
            parameter_name='Reset ROC Plus Protocol Connections',
            parameter_desc='Write 1 to this parameter to close all ROC Plus Protocol TCP/IP connections.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Write 1 to this parameter to close all ROC Plus Protocol TCP/IP connections.
        """

        ROC_PLUS_PROTOCOL_KEEP_ALIVE_TIME = PointTypeParameter(
            parameter_number=8,
            parameter_name='ROC Plus Protocol Keep- Alive Time',
            parameter_desc='Specifies the amount of idle time (in seconds) before the first keep alive message is sent. Nine more keep-alive messages will be sent at an interval of 64 seconds before a connection is considered broken. Occurs in the Transport Layer. Enter 0 to disable this feature.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0,64 86400'
        )
        """
        Specifies the amount of idle time (in seconds) before the first keep alive message is sent. Nine more keep-alive messages will be sent at an interval of 64
        seconds before a connection is considered broken. Occurs in the Transport Layer. Enter 0 to disable this feature.
        """

        MODBUS_IP_PORT_NUMBER = PointTypeParameter(
            parameter_number=9,
            parameter_name='Modbus IP Port Number',
            parameter_desc='The IP port number to which the ROC800 listens for Modbus connections.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The IP port number to which the ROC800 listens for Modbus connections.
        """

        CURRENT_MODBUS_CONNECTIONS = PointTypeParameter(
            parameter_number=10,
            parameter_name='Current Modbus Connections',
            parameter_desc='Shows the number of active modbus TCP/IP connections.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Shows the number of active modbus TCP/IP connections.
        """

        MODBUS_INACTIVITY_TIME = PointTypeParameter(
            parameter_number=11,
            parameter_name='Modbus Inactivity Time',
            parameter_desc='Time, in seconds, that the ROC800 waits, without receiving a valid modbus message, before it closes the connection. Occurs in the Application Layer. Enter 0 to disable this feature.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0-> Any positive valid IEEE 754 float'
        )
        """
        Time, in seconds, that the ROC800 waits, without receiving a valid modbus message, before it closes the connection. Occurs in the Application Layer. Enter 0 to
        disable this feature.
        """

        RESET_MODBUS_CONNECTIONS = PointTypeParameter(
            parameter_number=12,
            parameter_name='Reset Modbus Connections',
            parameter_desc='Write 1 to this parameter to close all Modbus TCP/IP connections.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Write 1 to this parameter to close all Modbus TCP/IP connections.
        """

        MODBUS_KEEP_ALIVE_TIME = PointTypeParameter(
            parameter_number=13,
            parameter_name='Modbus Keep-Alive Time',
            parameter_desc='Specifies the amount of idle time (in seconds) before the first keep-alive message is sent for the modbus connection. Nine more keep-alive messages will be sent at an interval of 64 seconds before a connection is considered broken. Occurs in the Transport Layer. Enter 0 to disable this feature.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0,64 86400'
        )
        """
        Specifies the amount of idle time (in seconds) before the first keep-alive message is sent for the modbus connection. Nine more keep-alive messages will be sent
        at an interval of 64 seconds before a connection is considered broken. Occurs in the Transport Layer. Enter 0 to disable this feature.
        """

        MODBUS_OVER_TCP_ADDRESS_TO_USE = PointTypeParameter(
            parameter_number=14,
            parameter_name='Modbus over TCP Address To Use',
            parameter_desc='Selects which address (ROC or Modbus over IP slave) modbus-over-IP should use. Valid values are: 0 = ROC Address (TLP: 91,0,0) 1 = Modbus over IP Slave Address (TLP: 138,0,15) 2 = Either ROC Address or Modbus TCP Address',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        Selects which address (ROC or Modbus over IP slave) modbus-over-IP should use. Valid values are: 0 = ROC Address (TLP: 91,0,0) 1 = Modbus over IP Slave Address
        (TLP: 138,0,15) 2 = Either ROC Address or Modbus TCP Address
        """

        MODBUS_OVER_TCP_SLAVE_ADDRESS = PointTypeParameter(
            parameter_number=15,
            parameter_name='Modbus over TCP Slave Address',
            parameter_desc='Specifies the Slave Address for Modbus over IP.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 > 255'
        )
        """
        Specifies the Slave Address for Modbus over IP.
        """

        ARP_PROTECTION_ENABLE = PointTypeParameter(
            parameter_number=16,
            parameter_name='ARP Protection Enable',
            parameter_desc='Enables APR storm protection. Valid values are 0 (Disable) and 1 (Enable).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Enables APR storm protection. Valid values are 0 (Disable) and 1 (Enable).
        """

        APR_PACKET_QUEUE_LIMIT = PointTypeParameter(
            parameter_number=17,
            parameter_name='APR Packet Queue Limit',
            parameter_desc='Specifies the required number of ARP packets to be queued in order for the ROC to shut down the Ethernet device due to an ARP storm.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        Specifies the required number of ARP packets to be queued in order for the ROC to shut down the Ethernet device due to an ARP storm.
        """

        TABLE_1_MODBUS_MASTER_TCP_OPTION = PointTypeParameter(
            parameter_number=18,
            parameter_name='Table 1 Modbus Master TCP Option',
            parameter_desc='Specifies the Modbus master TCP option for Master Table I. Valid values are 0 (TCP Modbus format) and 1 (Modbus wrapped in TCP).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Specifies the Modbus master TCP option for Master Table I. Valid values are 0 (TCP Modbus format) and 1 (Modbus wrapped in TCP).
        """

        TABLE_1_SERVER_1_IP_ADDRESS = PointTypeParameter(
            parameter_number=19,
            parameter_name='Table 1 Server 1 IP Address',
            parameter_desc='IP address for Table 1, Server 1',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 1
        """

        TABLE_1_SERVER_1_IP_PORT = PointTypeParameter(
            parameter_number=20,
            parameter_name='Table 1 Server 1 IP Port',
            parameter_desc='IP port number for Table 1, Server 1',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 1
        """

        TABLE_1_SERVER_2_IP_ADDRESS = PointTypeParameter(
            parameter_number=21,
            parameter_name='Table 1 Server 2 IP Address',
            parameter_desc='IP address for Table 1, Server 2',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 2
        """

        TABLE_1_SERVER_2_IP_PORT = PointTypeParameter(
            parameter_number=22,
            parameter_name='Table 1 Server 2 IP Port',
            parameter_desc='IP port number for Table 1, Server 2',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        IP port number for Table 1, Server 2
        """

        TABLE_1_SERVER_3_IP_ADDRESS = PointTypeParameter(
            parameter_number=23,
            parameter_name='Table 1 Server 3 IP Address',
            parameter_desc='IP address for Table 1, Server 3',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 3
        """

        TABLE_1_SERVER_3_IP_PORT = PointTypeParameter(
            parameter_number=24,
            parameter_name='Table 1 Server 3 IP Port',
            parameter_desc='IP port number for Table 1, Server 3',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 3
        """

        TABLE_1_SERVER_4_IP_ADDRESS = PointTypeParameter(
            parameter_number=25,
            parameter_name='Table 1 Server 4 IP Address',
            parameter_desc='IP address for Table 1, Server 4',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 4
        """

        TABLE_1_SERVER_4_IP_PORT = PointTypeParameter(
            parameter_number=26,
            parameter_name='Table 1 Server 4 IP Port',
            parameter_desc='IP port number for Table 1, Server 4',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 4
        """

        TABLE_1_SERVER_5_IP_ADDRESS = PointTypeParameter(
            parameter_number=27,
            parameter_name='Table 1 Server 5 IP Address',
            parameter_desc='IP address for Table 1, Server 5',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 5
        """

        TABLE_1_SERVER_5_IP_PORT = PointTypeParameter(
            parameter_number=28,
            parameter_name='Table 1 Server 5 IP Port',
            parameter_desc='IP port number for Table 1, Server 5',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 5
        """

        TABLE_1_SERVER_6_IP_ADDRESS = PointTypeParameter(
            parameter_number=29,
            parameter_name='Table 1 Server 6 IP Address',
            parameter_desc='IP address for Table 1, Server 6',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 6
        """

        TABLE_1_SERVER_6_IP_PORT = PointTypeParameter(
            parameter_number=30,
            parameter_name='Table 1 Server 6 IP Port',
            parameter_desc='IP port number for Table 1, Server 6',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 6
        """

        TABLE_1_SERVER_7_IP_ADDRESS = PointTypeParameter(
            parameter_number=31,
            parameter_name='Table 1 Server 7 IP Address',
            parameter_desc='IP address for Table 1, Server 7',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 7
        """

        TABLE_1_SERVER_7_IP_PORT = PointTypeParameter(
            parameter_number=32,
            parameter_name='Table 1 Server 7 IP Port',
            parameter_desc='IP port number for Table 1, Server 7',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 7
        """

        TABLE_1_SERVER_8_IP_ADDRESS = PointTypeParameter(
            parameter_number=33,
            parameter_name='Table 1 Server 8 IP Address',
            parameter_desc='IP address for Table 1, Server 8',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 8
        """

        TABLE_1_SERVER_8_IP_PORT = PointTypeParameter(
            parameter_number=34,
            parameter_name='Table 1 Server 8 IP Port',
            parameter_desc='IP port number for Table 1, Server 8',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 8
        """

        TABLE_1_SERVER_9_IP_ADDRESS = PointTypeParameter(
            parameter_number=35,
            parameter_name='Table 1 Server 9 IP Address',
            parameter_desc='IP address for Table 1, Server 9',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 9
        """

        TABLE_1_SERVER_9_IP_PORT = PointTypeParameter(
            parameter_number=36,
            parameter_name='Table 1 Server 9 IP Port',
            parameter_desc='IP port number for Table 1, Server 9',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 9
        """

        TABLE_1_SERVER_10_IP_ADDRESS = PointTypeParameter(
            parameter_number=37,
            parameter_name='Table 1 Server 10 IP Address',
            parameter_desc='IP address for Table 1, Server 10',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 10
        """

        TABLE_1_SERVER_10_IP_PORT = PointTypeParameter(
            parameter_number=38,
            parameter_name='Table 1 Server 10 IP Port',
            parameter_desc='IP port number for Table 1, Server 10',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 10
        """

        TABLE_1_SERVER_11_IP_ADDRESS = PointTypeParameter(
            parameter_number=39,
            parameter_name='Table 1 Server 11 IP Address',
            parameter_desc='IP address for Table 1, Server 11',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 11
        """

        TABLE_1_SERVER_11_IP_PORT = PointTypeParameter(
            parameter_number=40,
            parameter_name='Table 1 Server 11 IP Port',
            parameter_desc='IP port number for Table 1, Server 11',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 11
        """

        TABLE_1_SERVER_12_IP_ADDRESS = PointTypeParameter(
            parameter_number=41,
            parameter_name='Table 1 Server 12 IP Address',
            parameter_desc='IP address for Table 1, Server 12',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 12
        """

        TABLE_1_SERVER_12_IP_PORT = PointTypeParameter(
            parameter_number=42,
            parameter_name='Table 1 Server 12 IP Port',
            parameter_desc='IP port number for Table 1, Server 12',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 12
        """

        TABLE_1_SERVER_13_IP_ADDRESS = PointTypeParameter(
            parameter_number=43,
            parameter_name='Table 1 Server 13 IP Address',
            parameter_desc='IP address for Table 1, Server 13',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 13
        """

        TABLE_1_SERVER_13_IP_PORT = PointTypeParameter(
            parameter_number=44,
            parameter_name='Table 1 Server 13 IP Port',
            parameter_desc='IP port number for Table 1, Server 13',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 13
        """

        TABLE_1_SERVER_14_IP_ADDRESS = PointTypeParameter(
            parameter_number=45,
            parameter_name='Table 1 Server 14 IP Address',
            parameter_desc='IP address for Table 1, Server 14',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 14
        """

        TABLE_1_SERVER_14_IP_PORT = PointTypeParameter(
            parameter_number=46,
            parameter_name='Table 1 Server 14 IP Port',
            parameter_desc='IP port number for Table 1, Server 14',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 14
        """

        TABLE_1_SERVER_15_IP_ADDRESS = PointTypeParameter(
            parameter_number=47,
            parameter_name='Table 1 Server 15 IP Address',
            parameter_desc='IP address for Table 1, Server 15',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 15
        """

        TABLE_1_SERVER_15_IP_PORT = PointTypeParameter(
            parameter_number=48,
            parameter_name='Table 1 Server 15 IP Port',
            parameter_desc='IP port number for Table 1, Server 15',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 15
        """

        TABLE_1_SERVER_16_IP_ADDRESS = PointTypeParameter(
            parameter_number=49,
            parameter_name='Table 1 Server 16 IP Address',
            parameter_desc='IP address for Table 1, Server 16',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 16
        """

        TABLE_1_SERVER_16_IP_PORT = PointTypeParameter(
            parameter_number=50,
            parameter_name='Table 1 Server 16 IP Port',
            parameter_desc='IP port number for Table 1, Server 16',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 16
        """

        TABLE_1_SERVER_17_IP_ADDRESS = PointTypeParameter(
            parameter_number=51,
            parameter_name='Table 1 Server 17 IP Address',
            parameter_desc='IP address for Table 1, Server 17',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 17
        """

        TABLE_1_SERVER_17_IP_PORT = PointTypeParameter(
            parameter_number=52,
            parameter_name='Table 1 Server 17 IP Port',
            parameter_desc='IP port number for Table 1, Server 17',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 17
        """

        TABLE_1_SERVER_18_IP_ADDRESS = PointTypeParameter(
            parameter_number=53,
            parameter_name='Table 1 Server 18 IP Address',
            parameter_desc='IP address for Table 1, Server 18',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 18
        """

        TABLE_1_SERVER_18_IP_PORT = PointTypeParameter(
            parameter_number=54,
            parameter_name='Table 1 Server 18 IP Port',
            parameter_desc='IP port number for Table 1, Server 18',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 18
        """

        TABLE_1_SERVER_19_IP_ADDRESS = PointTypeParameter(
            parameter_number=55,
            parameter_name='Table 1 Server 19 IP Address',
            parameter_desc='IP address for Table 1, Server 19',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 19
        """

        TABLE_1_SERVER_19_IP_PORT = PointTypeParameter(
            parameter_number=56,
            parameter_name='Table 1 Server 19 IP Port',
            parameter_desc='IP port number for Table 1, Server 19',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 19
        """

        TABLE_1_SERVER_20_IP_ADDRESS = PointTypeParameter(
            parameter_number=57,
            parameter_name='Table 1 Server 20 IP Address',
            parameter_desc='IP address for Table 1, Server 20',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 20
        """

        TABLE_1_SERVER_20_IP_PORT = PointTypeParameter(
            parameter_number=58,
            parameter_name='Table 1 Server 20 IP Port',
            parameter_desc='IP port number for Table 1, Server 20',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 20
        """

        TABLE_1_SERVER_21_IP_ADDRESS = PointTypeParameter(
            parameter_number=59,
            parameter_name='Table 1 Server 21 IP Address',
            parameter_desc='IP address for Table 1, Server 21',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 21
        """

        TABLE_1_SERVER_21_IP_PORT = PointTypeParameter(
            parameter_number=60,
            parameter_name='Table 1 Server 21 IP Port',
            parameter_desc='IP port number for Table 1, Server 21',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 21
        """

        TABLE_1_SERVER_22_IP_ADDRESS = PointTypeParameter(
            parameter_number=61,
            parameter_name='Table 1 Server 22 IP Address',
            parameter_desc='IP address for Table 1, Server 22',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 22
        """

        TABLE_1_SERVER_22_IP_PORT = PointTypeParameter(
            parameter_number=62,
            parameter_name='Table 1 Server 22 IP Port',
            parameter_desc='IP port number for Table 1, Server 22',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 22
        """

        TABLE_1_SERVER_23_IP_ADDRESS = PointTypeParameter(
            parameter_number=63,
            parameter_name='Table 1 Server 23 IP Address',
            parameter_desc='IP address for Table 1, Server 23',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 23
        """

        TABLE_1_SERVER_23_IP_PORT = PointTypeParameter(
            parameter_number=64,
            parameter_name='Table 1 Server 23 IP Port',
            parameter_desc='IP port number for Table 1, Server 23',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 23
        """

        TABLE_1_SERVER_24_IP_ADDRESS = PointTypeParameter(
            parameter_number=65,
            parameter_name='Table 1 Server 24 IP Address',
            parameter_desc='IP address for Table 1, Server 24',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 24
        """

        TABLE_1_SERVER_24_IP_PORT = PointTypeParameter(
            parameter_number=66,
            parameter_name='Table 1 Server 24 IP Port',
            parameter_desc='IP port number for Table 1, Server 24',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        IP port number for Table 1, Server 24
        """

        TABLE_1_SERVER_25_IP_ADDRESS = PointTypeParameter(
            parameter_number=67,
            parameter_name='Table 1 Server 25 IP Address',
            parameter_desc='IP address for Table 1, Server 25',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 1, Server 25
        """

        TABLE_1_SERVER_25_IP_PORT = PointTypeParameter(
            parameter_number=68,
            parameter_name='Table 1 Server 25 IP Port',
            parameter_desc='IP port number for Table 1, Server 25',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 1, Server 25
        """

        TABLE_2_MODBUS_MASTER_TCP_OPTION = PointTypeParameter(
            parameter_number=69,
            parameter_name='Table 2 Modbus Master TCP Option',
            parameter_desc='Specifies the Modbus master TCP option for Master Table 2. Valid values are 0 (TCP Modbus format) and 1 (Modbus wrapped in TCP).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Specifies the Modbus master TCP option for Master Table 2. Valid values are 0 (TCP Modbus format) and 1 (Modbus wrapped in TCP).
        """

        TABLE_2_SERVER_1_IP_ADDRESS = PointTypeParameter(
            parameter_number=70,
            parameter_name='Table 2 Server 1 IP Address',
            parameter_desc='IP address for Table 2, Server 1',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 1
        """

        TABLE_2_SERVER_1_IP_PORT = PointTypeParameter(
            parameter_number=71,
            parameter_name='Table 2 Server 1 IP Port',
            parameter_desc='IP port number for Table 2, Server 1',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 1
        """

        TABLE_2_SERVER_2_IP_ADDRESS = PointTypeParameter(
            parameter_number=72,
            parameter_name='Table 2 Server 2 IP Address',
            parameter_desc='IP address for Table 2, Server 2',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 2
        """

        TABLE_2_SERVER_2_IP_PORT = PointTypeParameter(
            parameter_number=73,
            parameter_name='Table 2 Server 2 IP Port',
            parameter_desc='IP port number for Table 2, Server 2',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 2
        """

        TABLE_2_SERVER_3_IP_ADDRESS = PointTypeParameter(
            parameter_number=74,
            parameter_name='Table 2 Server 3 IP Address',
            parameter_desc='IP address for Table 2, Server 3',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 3
        """

        TABLE_2_SERVER_3_IP_PORT = PointTypeParameter(
            parameter_number=75,
            parameter_name='Table 2 Server 3 IP Port',
            parameter_desc='IP port number for Table 2, Server 3',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 3
        """

        TABLE_2_SERVER_4_IP_ADDRESS = PointTypeParameter(
            parameter_number=76,
            parameter_name='Table 2 Server 4 IP Address',
            parameter_desc='IP address for Table 2, Server 4',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 4
        """

        TABLE_2_SERVER_4_IP_PORT = PointTypeParameter(
            parameter_number=77,
            parameter_name='Table 2 Server 4 IP Port',
            parameter_desc='IP port number for Table 2, Server 4',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 4
        """

        TABLE_2_SERVER_5_IP_ADDRESS = PointTypeParameter(
            parameter_number=78,
            parameter_name='Table 2 Server 5 IP Address',
            parameter_desc='IP address for Table 2, Server 5',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 5
        """

        TABLE_2_SERVER_5_IP_PORT = PointTypeParameter(
            parameter_number=79,
            parameter_name='Table 2 Server 5 IP Port',
            parameter_desc='IP port number for Table 2, Server 5',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 5
        """

        TABLE_2_SERVER_6_IP_ADDRESS = PointTypeParameter(
            parameter_number=80,
            parameter_name='Table 2 Server 6 IP Address',
            parameter_desc='IP address for Table 2, Server 6',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 6
        """

        TABLE_2_SERVER_6_IP_PORT = PointTypeParameter(
            parameter_number=81,
            parameter_name='Table 2 Server 6 IP Port',
            parameter_desc='IP port number for Table 2, Server 6',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 6
        """

        TABLE_2_SERVER_7_IP_ADDRESS = PointTypeParameter(
            parameter_number=82,
            parameter_name='Table 2 Server 7 IP Address',
            parameter_desc='IP address for Table 2, Server 7',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 7
        """

        TABLE_2_SERVER_7_IP_PORT = PointTypeParameter(
            parameter_number=83,
            parameter_name='Table 2 Server 7 IP Port',
            parameter_desc='IP port number for Table 2, Server 7',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 7
        """

        TABLE_2_SERVER_8_IP_ADDRESS = PointTypeParameter(
            parameter_number=84,
            parameter_name='Table 2 Server 8 IP Address',
            parameter_desc='IP address for Table 2, Server 8',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 8
        """

        TABLE_2_SERVER_8_IP_PORT = PointTypeParameter(
            parameter_number=85,
            parameter_name='Table 2 Server 8 IP Port',
            parameter_desc='IP port number for Table 2, Server 8',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 8
        """

        TABLE_2_SERVER_9_IP_ADDRESS = PointTypeParameter(
            parameter_number=86,
            parameter_name='Table 2 Server 9 IP Address',
            parameter_desc='IP address for Table 2, Server 9',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 9
        """

        TABLE_2_SERVER_9_IP_PORT = PointTypeParameter(
            parameter_number=87,
            parameter_name='Table 2 Server 9 IP Port',
            parameter_desc='IP port number for Table 2, Server 9',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 9
        """

        TABLE_2_SERVER_10_IP_ADDRESS = PointTypeParameter(
            parameter_number=88,
            parameter_name='Table 2 Server 10 IP Address',
            parameter_desc='IP address for Table 2, Server 10',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 10
        """

        TABLE_2_SERVER_10_IP_PORT = PointTypeParameter(
            parameter_number=89,
            parameter_name='Table 2 Server 10 IP Port',
            parameter_desc='IP port number for Table 2, Server 10',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 10
        """

        TABLE_2_SERVER_11_IP_ADDRESS = PointTypeParameter(
            parameter_number=90,
            parameter_name='Table 2 Server 11 IP Address',
            parameter_desc='IP address for Table 2, Server 11',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 11
        """

        TABLE_2_SERVER_11_IP_PORT = PointTypeParameter(
            parameter_number=91,
            parameter_name='Table 2 Server 11 IP Port',
            parameter_desc='IP port number for Table 2, Server 11',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 11
        """

        TABLE_2_SERVER_12_IP_ADDRESS = PointTypeParameter(
            parameter_number=92,
            parameter_name='Table 2 Server 12 IP Address',
            parameter_desc='IP address for Table 2, Server 12',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 12
        """

        TABLE_2_SERVER_12_IP_PORT = PointTypeParameter(
            parameter_number=93,
            parameter_name='Table 2 Server 12 IP Port',
            parameter_desc='IP port number for Table 2, Server 12',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 12
        """

        TABLE_2_SERVER_13_IP_ADDRESS = PointTypeParameter(
            parameter_number=94,
            parameter_name='Table 2 Server 13 IP Address',
            parameter_desc='IP address for Table 2, Server 13',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 13
        """

        TABLE_2_SERVER_13_IP_PORT = PointTypeParameter(
            parameter_number=95,
            parameter_name='Table 2 Server 13 IP Port',
            parameter_desc='IP port number for Table 2, Server 13',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 13
        """

        TABLE_2_SERVER_14_IP_ADDRESS = PointTypeParameter(
            parameter_number=96,
            parameter_name='Table 2 Server 14 IP Address',
            parameter_desc='IP address for Table 2, Server 14',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 14
        """

        TABLE_2_SERVER_14_IP_PORT = PointTypeParameter(
            parameter_number=97,
            parameter_name='Table 2 Server 14 IP Port',
            parameter_desc='IP port number for Table 2, Server 14',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 14
        """

        TABLE_2_SERVER_15_IP_ADDRESS = PointTypeParameter(
            parameter_number=98,
            parameter_name='Table 2 Server 15 IP Address',
            parameter_desc='IP address for Table 2, Server 15',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 15
        """

        TABLE_2_SERVER_15_IP_PORT = PointTypeParameter(
            parameter_number=99,
            parameter_name='Table 2 Server 15 IP Port',
            parameter_desc='IP port number for Table 2, Server 15',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 15
        """

        TABLE_2_SERVER_16_IP_ADDRESS = PointTypeParameter(
            parameter_number=100,
            parameter_name='Table 2 Server 16 IP Address',
            parameter_desc='IP address for Table 2, Server 16',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 16
        """

        TABLE_2_SERVER_16_IP_PORT = PointTypeParameter(
            parameter_number=101,
            parameter_name='Table 2 Server 16 IP Port',
            parameter_desc='IP port number for Table 2, Server 16',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 16
        """

        TABLE_2_SERVER_17_IP_ADDRESS = PointTypeParameter(
            parameter_number=102,
            parameter_name='Table 2 Server 17 IP Address',
            parameter_desc='IP address for Table 2, Server 17',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 17
        """

        TABLE_2_SERVER_17_IP_PORT = PointTypeParameter(
            parameter_number=103,
            parameter_name='Table 2 Server 17 IP Port',
            parameter_desc='IP port number for Table 2, Server 17',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 17
        """

        TABLE_2_SERVER_18_IP_ADDRESS = PointTypeParameter(
            parameter_number=104,
            parameter_name='Table 2 Server 18 IP Address',
            parameter_desc='IP address for Table 2, Server 18',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 18
        """

        TABLE_2_SERVER_18_IP_PORT = PointTypeParameter(
            parameter_number=105,
            parameter_name='Table 2 Server 18 IP Port',
            parameter_desc='IP port number for Table 2, Server 18',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 18
        """

        TABLE_2_SERVER_19_IP_ADDRESS = PointTypeParameter(
            parameter_number=106,
            parameter_name='Table 2 Server 19 IP Address',
            parameter_desc='IP address for Table 2, Server 19',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 19
        """

        TABLE_2_SERVER_19_IP_PORT = PointTypeParameter(
            parameter_number=107,
            parameter_name='Table 2 Server 19 IP Port',
            parameter_desc='IP port number for Table 2, Server 19',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 19
        """

        TABLE_2_SERVER_20_IP_ADDRESS = PointTypeParameter(
            parameter_number=108,
            parameter_name='Table 2 Server 20 IP Address',
            parameter_desc='IP address for Table 2, Server 20',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 20
        """

        TABLE_2_SERVER_20_IP_PORT = PointTypeParameter(
            parameter_number=109,
            parameter_name='Table 2 Server 20 IP Port',
            parameter_desc='IP port number for Table 2, Server 20',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 20
        """

        TABLE_2_SERVER_21_IP_ADDRESS = PointTypeParameter(
            parameter_number=110,
            parameter_name='Table 2 Server 21 IP Address',
            parameter_desc='IP address for Table 2, Server 21',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 21
        """

        TABLE_2_SERVER_21_IP_PORT = PointTypeParameter(
            parameter_number=111,
            parameter_name='Table 2 Server 21 IP Port',
            parameter_desc='IP port number for Table 2, Server 21',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 21
        """

        TABLE_2_SERVER_22_IP_ADDRESS = PointTypeParameter(
            parameter_number=112,
            parameter_name='Table 2 Server 22 IP Address',
            parameter_desc='IP address for Table 2, Server 22',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 22
        """

        TABLE_2_SERVER_22_IP_PORT = PointTypeParameter(
            parameter_number=113,
            parameter_name='Table 2 Server 22 IP Port',
            parameter_desc='IP port number for Table 2, Server 22',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 22
        """

        TABLE_2_SERVER_23_IP_ADDRESS = PointTypeParameter(
            parameter_number=114,
            parameter_name='Table 2 Server 23 IP Address',
            parameter_desc='IP address for Table 2, Server 23',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 23
        """

        TABLE_2_SERVER_23_IP_PORT = PointTypeParameter(
            parameter_number=115,
            parameter_name='Table 2 Server 23 IP Port',
            parameter_desc='IP port number for Table 2, Server 23',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 23
        """

        TABLE_2_SERVER_24_IP_ADDRESS = PointTypeParameter(
            parameter_number=116,
            parameter_name='Table 2 Server 24 IP Address',
            parameter_desc='IP address for Table 2, Server 24',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 24
        """

        TABLE_2_SERVER_24_IP_PORT = PointTypeParameter(
            parameter_number=117,
            parameter_name='Table 2 Server 24 IP Port',
            parameter_desc='IP port number for Table 2, Server 24',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 24
        """

        TABLE_2_SERVER_25_IP_ADDRESS = PointTypeParameter(
            parameter_number=118,
            parameter_name='Table 2 Server 25 IP Address',
            parameter_desc='IP address for Table 2, Server 25',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 2, Server 25
        """

        TABLE_2_SERVER_25_IP_PORT = PointTypeParameter(
            parameter_number=119,
            parameter_name='Table 2 Server 25 IP Port',
            parameter_desc='IP port number for Table 2, Server 25',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 2, Server 25
        """

        TABLE_3_MODBUS_MASTER_TCP_OPTION = PointTypeParameter(
            parameter_number=120,
            parameter_name='Table 3 Modbus Master TCP Option',
            parameter_desc='Specifies the Modbus master TCP option for Master Table 3. Valid values are 0 (TCP Modbus format) and 1 (Modbus wrapped in TCP).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Specifies the Modbus master TCP option for Master Table 3. Valid values are 0 (TCP Modbus format) and 1 (Modbus wrapped in TCP).
        """

        TABLE_3_SERVER_1_IP_ADDRESS = PointTypeParameter(
            parameter_number=121,
            parameter_name='Table 3 Server 1 IP Address',
            parameter_desc='IP address for Table 3, Server 1',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 1
        """

        TABLE_3_SERVER_1_IP_PORT = PointTypeParameter(
            parameter_number=122,
            parameter_name='Table 3 Server 1 IP Port',
            parameter_desc='IP port number for Table 3, Server 1',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 1
        """

        TABLE_3_SERVER_2_IP_ADDRESS = PointTypeParameter(
            parameter_number=123,
            parameter_name='Table 3 Server 2 IP Address',
            parameter_desc='IP address for Table 3, Server 2',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 2
        """

        TABLE_3_SERVER_2_IP_PORT = PointTypeParameter(
            parameter_number=124,
            parameter_name='Table 3 Server 2 IP Port',
            parameter_desc='IP port number for Table 3, Server 2',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 2
        """

        TABLE_3_SERVER_3_IP_ADDRESS = PointTypeParameter(
            parameter_number=125,
            parameter_name='Table 3 Server 3 IP Address',
            parameter_desc='IP address for Table 3, Server 3',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 3
        """

        TABLE_3_SERVER_3_IP_PORT = PointTypeParameter(
            parameter_number=126,
            parameter_name='Table 3 Server 3 IP Port',
            parameter_desc='IP port number for Table 3, Server 3',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 3
        """

        TABLE_3_SERVER_4_IP_ADDRESS = PointTypeParameter(
            parameter_number=127,
            parameter_name='Table 3 Server 4 IP Address',
            parameter_desc='IP address for Table 3, Server 4',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 4
        """

        TABLE_3_SERVER_4_IP_PORT = PointTypeParameter(
            parameter_number=128,
            parameter_name='Table 3 Server 4 IP Port',
            parameter_desc='IP port number for Table 3, Server 4',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 4
        """

        TABLE_3_SERVER_5_IP_ADDRESS = PointTypeParameter(
            parameter_number=129,
            parameter_name='Table 3 Server 5 IP Address',
            parameter_desc='IP address for Table 3, Server 5',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 5
        """

        TABLE_3_SERVER_5_IP_PORT = PointTypeParameter(
            parameter_number=130,
            parameter_name='Table 3 Server 5 IP Port',
            parameter_desc='IP port number for Table 3, Server 5',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        IP port number for Table 3, Server 5
        """

        TABLE_3_SERVER_6_IP_ADDRESS = PointTypeParameter(
            parameter_number=131,
            parameter_name='Table 3 Server 6 IP Address',
            parameter_desc='IP address for Table 3, Server 6',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 6
        """

        TABLE_3_SERVER_6_IP_PORT = PointTypeParameter(
            parameter_number=132,
            parameter_name='Table 3 Server 6 IP Port',
            parameter_desc='IP port number for Table 3, Server 6',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 6
        """

        TABLE_3_SERVER_7_IP_ADDRESS = PointTypeParameter(
            parameter_number=133,
            parameter_name='Table 3 Server 7 IP Address',
            parameter_desc='IP address for Table 3, Server 7',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 7
        """

        TABLE_3_SERVER_7_IP_PORT = PointTypeParameter(
            parameter_number=134,
            parameter_name='Table 3 Server 7 IP Port',
            parameter_desc='IP port number for Table 3, Server 7',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 7
        """

        TABLE_3_SERVER_8_IP_ADDRESS = PointTypeParameter(
            parameter_number=135,
            parameter_name='Table 3 Server 8 IP Address',
            parameter_desc='IP address for Table 3, Server 8',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 8
        """

        TABLE_3_SERVER_8_IP_PORT = PointTypeParameter(
            parameter_number=136,
            parameter_name='Table 3 Server 8 IP Port',
            parameter_desc='IP port number for Table 3, Server 8',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 8
        """

        TABLE_3_SERVER_9_IP_ADDRESS = PointTypeParameter(
            parameter_number=137,
            parameter_name='Table 3 Server 9 IP Address',
            parameter_desc='IP address for Table 3, Server 9',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 9
        """

        TABLE_3_SERVER_9_IP_PORT = PointTypeParameter(
            parameter_number=138,
            parameter_name='Table 3 Server 9 IP Port',
            parameter_desc='IP port number for Table 3, Server 9',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 9
        """

        TABLE_3_SERVER_10_IP_ADDRESS = PointTypeParameter(
            parameter_number=139,
            parameter_name='Table 3 Server 10 IP Address',
            parameter_desc='IP address for Table 3, Server 10',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 10
        """

        TABLE_3_SERVER_10_IP_PORT = PointTypeParameter(
            parameter_number=140,
            parameter_name='Table 3 Server 10 IP Port',
            parameter_desc='IP port number for Table 3, Server 10',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 10
        """

        TABLE_3_SERVER_11_IP_ADDRESS = PointTypeParameter(
            parameter_number=141,
            parameter_name='Table 3 Server 11 IP Address',
            parameter_desc='IP address for Table 3, Server 11',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 11
        """

        TABLE_3_SERVER_11_IP_PORT = PointTypeParameter(
            parameter_number=142,
            parameter_name='Table 3 Server 11 IP Port',
            parameter_desc='IP port number for Table 3, Server 11',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 11
        """

        TABLE_3_SERVER_12_IP_ADDRESS = PointTypeParameter(
            parameter_number=143,
            parameter_name='Table 3 Server 12 IP Address',
            parameter_desc='IP address for Table 3, Server 12',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 12
        """

        TABLE_3_SERVER_12_IP_PORT = PointTypeParameter(
            parameter_number=144,
            parameter_name='Table 3 Server 12 IP Port',
            parameter_desc='IP port number for Table 3, Server 12',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 12
        """

        TABLE_3_SERVER_13_IP_ADDRESS = PointTypeParameter(
            parameter_number=145,
            parameter_name='Table 3 Server 13 IP Address',
            parameter_desc='IP address for Table 3, Server 13',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 13
        """

        TABLE_3_SERVER_13_IP_PORT = PointTypeParameter(
            parameter_number=146,
            parameter_name='Table 3 Server 13 IP Port',
            parameter_desc='IP port number for Table 3, Server 13',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 13
        """

        TABLE_3_SERVER_14_IP_ADDRESS = PointTypeParameter(
            parameter_number=147,
            parameter_name='Table 3 Server 14 IP Address',
            parameter_desc='IP address for Table 3, Server 14',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 14
        """

        TABLE_3_SERVER_14_IP_PORT = PointTypeParameter(
            parameter_number=148,
            parameter_name='Table 3 Server 14 IP Port',
            parameter_desc='IP port number for Table 3, Server 14',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 14
        """

        TABLE_3_SERVER_15_IP_ADDRESS = PointTypeParameter(
            parameter_number=149,
            parameter_name='Table 3 Server 15 IP Address',
            parameter_desc='IP address for Table 3, Server 15',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 15
        """

        TABLE_3_SERVER_15_IP_PORT = PointTypeParameter(
            parameter_number=150,
            parameter_name='Table 3 Server 15 IP Port',
            parameter_desc='IP port number for Table 3, Server 15',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 15
        """

        TABLE_3_SERVER_16_IP_ADDRESS = PointTypeParameter(
            parameter_number=151,
            parameter_name='Table 3 Server 16 IP Address',
            parameter_desc='IP address for Table 3, Server 16',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 16
        """

        TABLE_3_SERVER_16_IP_PORT = PointTypeParameter(
            parameter_number=152,
            parameter_name='Table 3 Server 16 IP Port',
            parameter_desc='IP port number for Table 3, Server 16',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 16
        """

        TABLE_3_SERVER_17_IP_ADDRESS = PointTypeParameter(
            parameter_number=153,
            parameter_name='Table 3 Server 17 IP Address',
            parameter_desc='IP address for Table 3, Server 17',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 17
        """

        TABLE_3_SERVER_17_IP_PORT = PointTypeParameter(
            parameter_number=154,
            parameter_name='Table 3 Server 17 IP Port',
            parameter_desc='IP port number for Table 3, Server 17',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 17
        """

        TABLE_3_SERVER_18_IP_ADDRESS = PointTypeParameter(
            parameter_number=155,
            parameter_name='Table 3 Server 18 IP Address',
            parameter_desc='IP address for Table 3, Server 18',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 18
        """

        TABLE_3_SERVER_18_IP_PORT = PointTypeParameter(
            parameter_number=156,
            parameter_name='Table 3 Server 18 IP Port',
            parameter_desc='IP port number for Table 3, Server 18',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 18
        """

        TABLE_3_SERVER_19_IP_ADDRESS = PointTypeParameter(
            parameter_number=157,
            parameter_name='Table 3 Server 19 IP Address',
            parameter_desc='IP address for Table 3, Server 19',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 19
        """

        TABLE_3_SERVER_19_IP_PORT = PointTypeParameter(
            parameter_number=158,
            parameter_name='Table 3 Server 19 IP Port',
            parameter_desc='IP port number for Table 3, Server 19',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 19
        """

        TABLE_3_SERVER_20_IP_ADDRESS = PointTypeParameter(
            parameter_number=159,
            parameter_name='Table 3 Server 20 IP Address',
            parameter_desc='IP address for Table 3, Server 20',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 20
        """

        TABLE_3_SERVER_20_IP_PORT = PointTypeParameter(
            parameter_number=160,
            parameter_name='Table 3 Server 20 IP Port',
            parameter_desc='IP port number for Table 3, Server 20',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 20
        """

        TABLE_3_SERVER_21_IP_ADDRESS = PointTypeParameter(
            parameter_number=161,
            parameter_name='Table 3 Server 21 IP Address',
            parameter_desc='IP address for Table 3, Server 21',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 21
        """

        TABLE_3_SERVER_21_IP_PORT = PointTypeParameter(
            parameter_number=162,
            parameter_name='Table 3 Server 21 IP Port',
            parameter_desc='IP port number for Table 3, Server 21',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 21
        """

        TABLE_3_SERVER_22_IP_ADDRESS = PointTypeParameter(
            parameter_number=163,
            parameter_name='Table 3 Server 22 IP Address',
            parameter_desc='IP address for Table 3, Server 22',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 22
        """

        TABLE_3_SERVER_22_IP_PORT = PointTypeParameter(
            parameter_number=164,
            parameter_name='Table 3 Server 22 IP Port',
            parameter_desc='IP port number for Table 3, Server 22',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 22
        """

        TABLE_3_SERVER_23_IP_ADDRESS = PointTypeParameter(
            parameter_number=165,
            parameter_name='Table 3 Server 23 IP Address',
            parameter_desc='IP address for Table 3, Server 23',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 23
        """

        TABLE_3_SERVER_23_IP_PORT = PointTypeParameter(
            parameter_number=166,
            parameter_name='Table 3 Server 23 IP Port',
            parameter_desc='IP port number for Table 3, Server 23',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 23
        """

        TABLE_3_SERVER_24_IP_ADDRESS = PointTypeParameter(
            parameter_number=167,
            parameter_name='Table 3 Server 24 IP Address',
            parameter_desc='IP address for Table 3, Server 24',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 24
        """

        TABLE_3_SERVER_24_IP_PORT = PointTypeParameter(
            parameter_number=168,
            parameter_name='Table 3 Server 24 IP Port',
            parameter_desc='IP port number for Table 3, Server 24',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        IP port number for Table 3, Server 24
        """

        TABLE_3_SERVER_25_IP_ADDRESS = PointTypeParameter(
            parameter_number=169,
            parameter_name='Table 3 Server 25 IP Address',
            parameter_desc='IP address for Table 3, Server 25',
            data_type=dt.UINT32,
            access='R/W',
            value_range='N/A'
        )
        """
        IP address for Table 3, Server 25
        """

        TABLE_3_SERVER_25_IP_PORT = PointTypeParameter(
            parameter_number=170,
            parameter_name='Table 3 Server 25 IP Port',
            parameter_desc='IP port number for Table 3, Server 25',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        IP port number for Table 3, Server 25
        """

        TABLE_4_MODBUS_MASTER_TCP_CONNECTION_TIMEOUT = PointTypeParameter(
            parameter_number=171,
            parameter_name='Table 4 Modbus Master TCP Connection Timeout',
            parameter_desc='Specifices the number of seconds to wait for a successful connection.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Specifices the number of seconds to wait for a successful connection.
        """

        TEST_IP_ADDRESS = PointTypeParameter(
            parameter_number=172,
            parameter_name='Test IP Address',
            parameter_desc='Indicates the IP address to use when testing a connection.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='NA'
        )
        """
        Indicates the IP address to use when testing a connection.
        """

        TEST_IP_PORT = PointTypeParameter(
            parameter_number=173,
            parameter_name='Test IP Port',
            parameter_desc='Indicates the IP port to use when testing a connection.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Indicates the IP port to use when testing a connection.
        """

        TEST_IP_START = PointTypeParameter(
            parameter_number=174,
            parameter_name='Test IP Start',
            parameter_desc='Indicates when to test the IP connection. Valid values are 0 (Test connection complete/nothing) and 1 (Start connection test).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates when to test the IP connection. Valid values are 0 (Test connection complete/nothing) and 1 (Start connection test).
        """

        TEST_IP_STATUS = PointTypeParameter(
            parameter_number=175,
            parameter_name='Test IP Status',
            parameter_desc='Indicates the status of the test connection. Valid values are: 0 = Success 1 = In Progress 2 = Failed 3 Busy',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-3'
        )
        """
        Indicates the status of the test connection. Valid values are: 0 = Success 1 = In Progress 2 = Failed 3 Busy
        """





class USER_C_HOST_PARAMETERS(PointType):
    """User C++ Host Parameters"""

    point_type_number: int = 138
    """Point Type ID"""

    point_type_desc: str = 'User C++ Host Parameters'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        HOST_LIBRARY_VERSION = PointTypeParameter(
            parameter_number=0,
            parameter_name='Host Library Version',
            parameter_desc='The library version supported by the ROC.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        The library version supported by the ROC.
        """

        HOST_SRAM_USED = PointTypeParameter(
            parameter_number=1,
            parameter_name='Host SRAM Used',
            parameter_desc='The amount of SRAM consumed by User Defined Points.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 0xFFFFFFFF'
        )
        """
        The amount of SRAM consumed by User Defined Points.
        """

        HOST_SRAM_FREE = PointTypeParameter(
            parameter_number=2,
            parameter_name='Host SRAM Free',
            parameter_desc='The amount of SRAM available for User Defined Points.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 0xFFFFFFFF'
        )
        """
        The amount of SRAM available for User Defined Points.
        """

        HOST_DRAM_USED = PointTypeParameter(
            parameter_number=3,
            parameter_name='Host DRAM Used',
            parameter_desc='The amount of DRAM consumed by User C++ Programs.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 0xFFFFFFFF'
        )
        """
        The amount of DRAM consumed by User C++ Programs.
        """

        HOST_DRAM_FREE = PointTypeParameter(
            parameter_number=4,
            parameter_name='Host DRAM Free',
            parameter_desc='The amount of DRAM available for User C++ Programs.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 0xFFFFFFFF'
        )
        """
        The amount of DRAM available for User C++ Programs.
        """





class SMART_IO_MODULE_INFO(PointType):
    """Smart I/O Module Information"""

    point_type_number: int = 139
    """Point Type ID"""

    point_type_desc: str = 'Smart I/O Module Information'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        MODULE_TYPE = PointTypeParameter(
            parameter_number=0,
            parameter_name='Module Type',
            parameter_desc='Indicates module type. Valid values are: 0 = No Module 1 = AC I/O 2 = PI 4-Point 3 = APM 26 = Smart MVS 28 = RTD 3-point 30 = DO Relay 6-point 33 = HART 2 Module 34 = Thermocouple 4-point 36 = IEC 62591 Module 50 = Unknown Aux I/O module',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0 3, 26, 28, 30, 33, 34, 50'
        )
        """
        Indicates module type. Valid values are: 0 = No Module 1 = AC I/O 2 = PI 4-Point 3 = APM 26 = Smart MVS 28 = RTD 3-point 30 = DO Relay 6-point 33 = HART 2
        Module 34 = Thermocouple 4-point 36 = IEC 62591 Module 50 = Unknown Aux I/O module
        """

        SYSTEM_MODE = PointTypeParameter(
            parameter_number=1,
            parameter_name='System Mode',
            parameter_desc='States the run mode of the module. Valid values are: 0 = Run Mode 1 = Boot Mode (extremely limited functionality is available) 2 = Module Failure Note: If in Boot Mode then only parameters 0 - 4, 8, and 9 are valid.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        States the run mode of the module. Valid values are: 0 = Run Mode 1 = Boot Mode (extremely limited functionality is available) 2 = Module Failure Note: If in
        Boot Mode then only parameters 0 - 4, 8, and 9 are valid.
        """

        BOARD_HEALTH = PointTypeParameter(
            parameter_number=2,
            parameter_name='Board Health',
            parameter_desc='Indicates the health of the module. Valid values are: 0 OK 1 = Module not Installed 2 = Communications lost',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-2'
        )
        """
        Indicates the health of the module. Valid values are: 0 OK 1 = Module not Installed 2 = Communications lost
        """

        BOOT_VERSION = PointTypeParameter(
            parameter_number=3,
            parameter_name='Boot Version',
            parameter_desc='Software version of boot Image',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Software version of boot Image
        """

        BOOT_PART_NUMBER = PointTypeParameter(
            parameter_number=4,
            parameter_name='Boot Part Number',
            parameter_desc='Part number of boot firmware',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Part number of boot firmware
        """

        BOOT_BUILD_DATE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Boot Build Date',
            parameter_desc='The time and date stamp the boot firmware was created.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        The time and date stamp the boot firmware was created.
        """

        FLASH_VERSION = PointTypeParameter(
            parameter_number=6,
            parameter_name='Flash Version',
            parameter_desc='Software version of flash image',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Software version of flash image
        """

        FLASH_PART_NUMBER = PointTypeParameter(
            parameter_number=7,
            parameter_name='Flash Part Number',
            parameter_desc='Part number of flash firmware',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Part number of flash firmware
        """

        FLASH_BUILD_DATE = PointTypeParameter(
            parameter_number=8,
            parameter_name='Flash Build Date',
            parameter_desc='The time and date stamp the flash firmware was created.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        The time and date stamp the flash firmware was created.
        """

        MODULE_SPECIFIC_DATA = PointTypeParameter(
            parameter_number=9,
            parameter_name='Module Specific Data',
            parameter_desc='General data that is specific for each module type.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        General data that is specific for each module type.
        """

        SERIAL_NUMBER = PointTypeParameter(
            parameter_number=10,
            parameter_name='Serial Number',
            parameter_desc='Serial Number',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Serial Number
        """

        FLASH_DESCRIPTION = PointTypeParameter(
            parameter_number=11,
            parameter_name='Flash Description',
            parameter_desc='Description that is specific for each module type',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Description that is specific for each module type
        """

        MODULE_SPECIFIC_PARAMETER_1 = PointTypeParameter(
            parameter_number=12,
            parameter_name='Module Specific Parameter #1',
            parameter_desc='Indicates, for Smart Application modules, the modules subtype.Valid values are: 0=No subtype 10=Modbus Master subtype For IEC 62591 Network ID (V3.40): Bits 0-15: Network ID Bits 16-31: Unused For NRM (v3.50): Bits 16-31: Reserved Bits 8-15: Frequency Hop Key (valid range 1- 15) Bits 0-7: Network ID (valid range is 0-255)',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4.294,967,296'
        )
        """
        Indicates, for Smart Application modules, the modules subtype.Valid values are: 0=No subtype 10=Modbus Master subtype For IEC 62591 Network ID (V3.40): Bits
        0-15: Network ID Bits 16-31: Unused For NRM (v3.50): Bits 16-31: Reserved Bits 8-15: Frequency Hop Key (valid range 1- 15) Bits 0-7: Network ID (valid range is
        0-255)
        """

        MODULE_SPECIFIC_PARAMETER_2 = PointTypeParameter(
            parameter_number=13,
            parameter_name='Module Specific Parameter #2',
            parameter_desc='Indicates, for Smart Application modules, a module conflict substate, and sets when the board health is Module Conflict. (v3.30) 0=No Conflict 1=Too many application modules (maximum of 3) 2=Duplicate application module installed (only one of each application module subtype allowed) 3=Display Conflict (a user display or User C display is already loaded into a display slot used by a Smart Application module) For IEC 62591: Join Key (bytes 0-> 3 (v3.40) For Network Radio Module (v3.50): Network Access Point selection 0 = Slave Device 1 = Access Point 3 = Access Point tye System Time Sync enabled The Network Radio module value is preserved through cold starts and factory defaults but reverts to defaults on module slot change..',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 > 4.294,967,296'
        )
        """
        Indicates, for Smart Application modules, a module conflict substate, and sets when the board health is Module Conflict. (v3.30) 0=No Conflict 1=Too many
        application modules (maximum of 3) 2=Duplicate application module installed (only one of each application module subtype allowed) 3=Display Conflict (a user
        display or User C display is already loaded into a display slot used by a Smart Application module) For IEC 62591: Join Key (bytes 0-> 3 (v3.40) For Network
        Radio Module (v3.50): Network Access Point selection 0 = Slave Device 1 = Access Point 3 = Access Point tye System Time Sync enabled The Network Radio module
        value is preserved through cold starts and factory defaults but reverts to defaults on module slot change..
        """

        MODULE_SPECIFIC_PARAMETER_3 = PointTypeParameter(
            parameter_number=14,
            parameter_name='Module Specific Parameter #3',
            parameter_desc='IEC 62591 Join Key (Bytes 4->7)(v3.40) Network Radio module (v3.50) (see Note 1) Network Module 0 = 1-12 devices 1 = 1-24 devices The Network Radio module value is preserved through cold starts and factory defaults but reverts to defaults on module slot change. Note: This parameter is writable only when the NRM is the access point. The slave devices report back to the parameter the currently access point.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 > 4.294,967,296'
        )
        """
        IEC 62591 Join Key (Bytes 4->7)(v3.40) Network Radio module (v3.50) (see Note 1) Network Module 0 = 1-12 devices 1 = 1-24 devices The Network Radio module value
        is preserved through cold starts and factory defaults but reverts to defaults on module slot change. Note: This parameter is writable only when the NRM is the
        access point. The slave devices report back to the parameter the currently access point.
        """

        MODULE_SPECIFIC_PARAMETER_4 = PointTypeParameter(
            parameter_number=15,
            parameter_name='Module Specific Parameter #4',
            parameter_desc='IEC 62591 Join Key (Bytes 8->11)(v3.40) Network Radio module (v3.50) (see Note 1) Bits 8-31=reserved; set to 0 Bits 0-7=Radio Transmit Power in dBm. The Network Radio module value is preserved through cold starts and factory defaults but reverts to defaults on module slot change. Minimum value is 10 and maximum value is either 20 or 27, depending on parameter 15, Maximum Radio Power.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4.294,967,296'
        )
        """
        IEC 62591 Join Key (Bytes 8->11)(v3.40) Network Radio module (v3.50) (see Note 1) Bits 8-31=reserved; set to 0 Bits 0-7=Radio Transmit Power in dBm. The Network
        Radio module value is preserved through cold starts and factory defaults but reverts to defaults on module slot change. Minimum value is 10 and maximum value is
        either 20 or 27, depending on parameter 15, Maximum Radio Power.
        """

        MODULE_SPECIFIC_PARAMETER_5 = PointTypeParameter(
            parameter_number=16,
            parameter_name='Module Specific Parameter #5',
            parameter_desc='IEC 62591 Join Key (Bytes 12->15)(v3.40) Network Radio module (v3.50) Network Configuration Revision 0-65535 Set by host and is sent via Network Live Llist Updates',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4.294,967,296'
        )
        """
        IEC 62591 Join Key (Bytes 12->15)(v3.40) Network Radio module (v3.50) Network Configuration Revision 0-65535 Set by host and is sent via Network Live Llist
        Updates
        """

        MODULE_SPECIFIC_PARAMETER_6 = PointTypeParameter(
            parameter_number=17,
            parameter_name='Module Specific Parameter #6',
            parameter_desc='IEC 62591 Status (v3.40) Status Bit 7: 1= Radio Failure Bit 6: 1=Server Failure State Bits 0-5: 0=Initialized 1=Detecting Radio 2=Setting Network Configuration 3=Waiting to Join Network 4=Online Bits 8-31: Unused It is R/O. A write does not return an error but is ignored. Network Radio Module (v3.50) Noise Level 0-30 = Good 31-40 = Marginal 41-127= Poor',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4.294,967,296'
        )
        """
        IEC 62591 Status (v3.40) Status Bit 7: 1= Radio Failure Bit 6: 1=Server Failure State Bits 0-5: 0=Initialized 1=Detecting Radio 2=Setting Network Configuration
        3=Waiting to Join Network 4=Online Bits 8-31: Unused It is R/O. A write does not return an error but is ignored. Network Radio Module (v3.50) Noise Level 0-30 =
        Good 31-40 = Marginal 41-127= Poor
        """

        MODULE_SPECIFIC_PARAMETER_7 = PointTypeParameter(
            parameter_number=18,
            parameter_name='Module Specific Parameter #7',
            parameter_desc='IEC 62591 Interface ID (v3.40) Bits 0-31: Inteface ID It is R/O. A write does not return an error but is ignored. Network Radio Module (v3.50) Signal Strength 0-127: Higher is better',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4.294,967,296'
        )
        """
        IEC 62591 Interface ID (v3.40) Bits 0-31: Inteface ID It is R/O. A write does not return an error but is ignored. Network Radio Module (v3.50) Signal Strength
        0-127: Higher is better
        """

        MODULE_SPECIFIC_PARAMETER_8 = PointTypeParameter(
            parameter_number=19,
            parameter_name='Module Specific Parameter #8',
            parameter_desc='IEC 62591 Interface Type (v3.40) Bits 0-15: Interface Type Bits 16-31: Unused It is R/O. A write does not return an error but is ignored. Network Radio Module (v3.50) Percent Good Packets',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 > 4.294,967,296'
        )
        """
        IEC 62591 Interface Type (v3.40) Bits 0-15: Interface Type Bits 16-31: Unused It is R/O. A write does not return an error but is ignored. Network Radio Module
        (v3.50) Percent Good Packets
        """

        MODULE_SPECIFIC_PARAMETER_9 = PointTypeParameter(
            parameter_number=20,
            parameter_name='Module Specific Parameter #9',
            parameter_desc='Network Radio Module (v3.50) Start Auto Discovery Sequence: 0=Idle 1= Start 2=Stop Note: The ROC800 automatically clears this parameter after the Auto Discovery Sequence completes.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 > 4.294,967,296'
        )
        """
        Network Radio Module (v3.50) Start Auto Discovery Sequence: 0=Idle 1= Start 2=Stop Note: The ROC800 automatically clears this parameter after the Auto Discovery
        Sequence completes.
        """

        MODULE_SPECIFIC_PARAMETER_10 = PointTypeParameter(
            parameter_number=21,
            parameter_name='Module Specific Parameter #10',
            parameter_desc='The time in seconds the system allows for the IEC module to re-initialize in case of a time sync or warm start. If the IEC module remains in an initializing state after the elapsed time  the system declares all commissioned devices in Comm fail.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4.294,967,296'
        )
        """
        The time in seconds the system allows for the IEC module to re-initialize in case of a time sync or warm start. If the IEC module remains in an initializing
        state after the elapsed time the system declares all commissioned devices in Comm fail.
        """

        MODULE_SPECIFIC_PARAMETER_11 = PointTypeParameter(
            parameter_number=22,
            parameter_name='Module Specific Parameter #11',
            parameter_desc='Network Radio Module (v3.50) Initialize Network Import and Export Lists 0=Idle 1=Initialize ROC800 automatically clears parameter',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4.294.967,296 (1)'
        )
        """
        Network Radio Module (v3.50) Initialize Network Import and Export Lists 0=Idle 1=Initialize ROC800 automatically clears parameter
        """

        MODULE_SPECIFIC_PARAMETER_12 = PointTypeParameter(
            parameter_number=23,
            parameter_name='Module Specific Parameter #12',
            parameter_desc='Network Radio Module (v3.50) Network Status: 0 = Initializing 1 = Not Joined to Network 2 = Joined to Network - not commissioned 3 = Joined to Network and commissioned 128 = Radio Failure 129 = Invalid Network Configuration',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4.294,967,296 (Not user-writeable)'
        )
        """
        Network Radio Module (v3.50) Network Status: 0 = Initializing 1 = Not Joined to Network 2 = Joined to Network - not commissioned 3 = Joined to Network and
        commissioned 128 = Radio Failure 129 = Invalid Network Configuration
        """

        MODULE_SPECIFIC_PARAMETER_13 = PointTypeParameter(
            parameter_number=24,
            parameter_name='Module Specific Parameter #13',
            parameter_desc='Network Radio Module (v3.50) Force Time Synchronization: 0 Idle 1 = Force Tim e Sync',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4.294,967,296 (1)'
        )
        """
        Network Radio Module (v3.50) Force Time Synchronization: 0 Idle 1 = Force Tim e Sync
        """

        MODULE_SPECIFIC_PARAMETER_14 = PointTypeParameter(
            parameter_number=25,
            parameter_name='Module Specific Parameter #14',
            parameter_desc='Network Radio Module (v3.50) Radio Address of the NRM',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4.294,967,296 (1)'
        )
        """
        Network Radio Module (v3.50) Radio Address of the NRM
        """

        MODULE_SPECIFIC_PARAMETER_15 = PointTypeParameter(
            parameter_number=26,
            parameter_name='Module Specific Parameter #15',
            parameter_desc='Network Radio Module (v3.50) Passthru Lock Address Bits 16-31: Reserved Bits 8-15: Address Bits 0-7: Group',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4.294,967,296 (1)'
        )
        """
        Network Radio Module (v3.50) Passthru Lock Address Bits 16-31: Reserved Bits 8-15: Address Bits 0-7: Group
        """

        MODULE_SPECIFIC_PARAMETER_16 = PointTypeParameter(
            parameter_number=27,
            parameter_name='Module Specific Parameter #16',
            parameter_desc='Network Radio Module (v3.61) Stale Data Timeout in seconds (valid range is 10-3600)',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0->4,294,967,296'
        )
        """
        Network Radio Module (v3.61) Stale Data Timeout in seconds (valid range is 10-3600)
        """

        MODULE_SPECIFIC_PARAMETER_17 = PointTypeParameter(
            parameter_number=28,
            parameter_name='Module Specific Parameter #17',
            parameter_desc='Network Radio Module (v3.70) Encryption Key 1',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0->4,294,967,296'
        )
        """
        Network Radio Module (v3.70) Encryption Key 1
        """

        MODULE_SPECIFIC_PARAMETER_18 = PointTypeParameter(
            parameter_number=29,
            parameter_name='Module Specific Parameter #18',
            parameter_desc='Network Radio Module (v3.70) Encryption Key 2',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0->4,294,967,296'
        )
        """
        Network Radio Module (v3.70) Encryption Key 2
        """

        MODULE_SPECIFIC_PARAMETER_19 = PointTypeParameter(
            parameter_number=30,
            parameter_name='Module Specific Parameter #19',
            parameter_desc='Network Radio Module (v3.70) Encryption Key 3',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0->4,294,967,296'
        )
        """
        Network Radio Module (v3.70) Encryption Key 3
        """

        MODULE_SPECIFIC_PARAMETER_20 = PointTypeParameter(
            parameter_number=31,
            parameter_name='Module Specific Parameter #20',
            parameter_desc='Network Radio Module (v3.70) Encryption Key 4',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0->4,294,967,296'
        )
        """
        Network Radio Module (v3.70) Encryption Key 4
        """

        MODULE_SPECIFIC_PARAMETER_21 = PointTypeParameter(
            parameter_number=32,
            parameter_name='Module Specific Parameter #21',
            parameter_desc='Network Radio Module (v3.70) Encryption Key 5',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0->4,294,967,296'
        )
        """
        Network Radio Module (v3.70) Encryption Key 5
        """

        MODULE_SPECIFIC_PARAMETER_22 = PointTypeParameter(
            parameter_number=33,
            parameter_name='Module Specific Parameter #22',
            parameter_desc='Network Radio Module (v3.70) Encryption Key 6',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0->4,294,967,296'
        )
        """
        Network Radio Module (v3.70) Encryption Key 6
        """

        MODULE_SPECIFIC_PARAMETER_23 = PointTypeParameter(
            parameter_number=34,
            parameter_name='Module Specific Parameter #23',
            parameter_desc='Network Radio Module (v3.70) Encryption Key 7',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0->4,294,967,296'
        )
        """
        Network Radio Module (v3.70) Encryption Key 7
        """

        MODULE_SPECIFIC_PARAMETER_24 = PointTypeParameter(
            parameter_number=35,
            parameter_name='Module Specific Parameter #24',
            parameter_desc='Network Radio Module (v3.70) Encryption Key 8',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0->4,294,967,296'
        )
        """
        Network Radio Module (v3.70) Encryption Key 8
        """





class ALTERNATING_CURRENT_IO(PointType):
    """Alternating Current Input / Output"""

    point_type_number: int = 140
    """Point Type ID"""

    point_type_desc: str = 'Alternating Current Input / Output'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='A 10-character description of the channel',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20->0x7E for each ASCII character'
        )
        """
        A 10-character description of the channel
        """

        POWER_IN = PointTypeParameter(
            parameter_number=1,
            parameter_name='Power In',
            parameter_desc='Module power indicator - same for every channel. Valid values are 0 (AC power off) and 1 (AC power detected).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Module power indicator - same for every channel. Valid values are 0 (AC power off) and 1 (AC power detected).
        """

        CHANNEL_MODE = PointTypeParameter(
            parameter_number=2,
            parameter_name='Channel Mode',
            parameter_desc='Channel mode is set via hardware DIP switch. Valid values are 0 (channel set as input) and 1 (channel set as output).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Channel mode is set via hardware DIP switch. Valid values are 0 (channel set as input) and 1 (channel set as output).
        """

        SCANNING_INPUT = PointTypeParameter(
            parameter_number=3,
            parameter_name='Scanning Input',
            parameter_desc='Valid values are 0 (Disabled) and 1 (Enabled). If disabled, system ignores field inputs and no changes occur unless manually entered. Note: This parameter functions the same as Scanning in Point type 101 (parameter 1).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Valid values are 0 (Disabled) and 1 (Enabled). If disabled, system ignores field inputs and no changes occur unless manually entered. Note: This parameter
        functions the same as Scanning in Point type 101 (parameter 1).
        """

        FILTER = PointTypeParameter(
            parameter_number=4,
            parameter_name='Filter',
            parameter_desc='Number of seconds that a DI must remain in the ON state before it is recognized as valid and the Status (parameter #5) is changed. Note: This parameter functions the same as Filter in Point type 101 (parameter 2).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.00 43,200.0'
        )
        """
        Number of seconds that a DI must remain in the ON state before it is recognized as valid and the Status (parameter #5) is changed. Note: This parameter
        functions the same as Filter in Point type 101 (parameter 2).
        """

        STATUS_INPUT = PointTypeParameter(
            parameter_number=5,
            parameter_name='Status Input',
            parameter_desc='Indicates the current state of the DI. Valid values are 0 (inactive) and 1 (input signal). Note: This parameter functions the same as Status in Point type 101 (parameter 3).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 1'
        )
        """
        Indicates the current state of the DI. Valid values are 0 (inactive) and 1 (input signal). Note: This parameter functions the same as Status in Point type 101
        (parameter 3).
        """

        PHYSICAL_INPUT = PointTypeParameter(
            parameter_number=6,
            parameter_name='Physical Input',
            parameter_desc='Indicates the current state of the hardware. Valid values are 1 (On) and 0 (Off). Note: This parameter functions the same as Physical Status in Point type 101 (parameter 15).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Indicates the current state of the hardware. Valid values are 1 (On) and 0 (Off). Note: This parameter functions the same as Physical Status in Point type 101
        (parameter 15).
        """

        SCAN_PERIOD = PointTypeParameter(
            parameter_number=7,
            parameter_name='Scan Period',
            parameter_desc='Indicates scan period in seconds. Due to limitations on the ROC 827, slots 4- 27 have a lower limit of 50mS. All other slots (1-3, 809) have a minimum limit of 20mS.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.02->43,200.0 (Slots 1-3 827 & 809) 0.05->43,200.0 (Slots 4-27 827)'
        )
        """
        Indicates scan period in seconds. Due to limitations on the ROC 827, slots 4- 27 have a lower limit of 50mS. All other slots (1-3, 809) have a minimum limit of
        20mS.
        """

        ACTUAL_SCAN_TIME = PointTypeParameter(
            parameter_number=8,
            parameter_name='Actual Scan Time',
            parameter_desc='Actual number of seconds between updates of the DI. Note: This parameter functions the same as Actual Scan Time in Point type 101 (parameter 14).',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0 43,200.0'
        )
        """
        Actual number of seconds between updates of the DI. Note: This parameter functions the same as Actual Scan Time in Point type 101 (parameter 14).
        """

        INPUT_INVERT_MODE = PointTypeParameter(
            parameter_number=9,
            parameter_name='Input Invert Mode',
            parameter_desc='If enabled, the field input will be inverted in the Status (parameter #5 - ON becomes OFF and vice-versa). Valid values are 0 (Invert Status Disabled) and 1 (Invert Status Enabled). Note: This parameter functions the same as Invert Mode in Point type 101 (parameter 4).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, the field input will be inverted in the Status (parameter #5 - ON becomes OFF and vice-versa). Valid values are 0 (Invert Status Disabled) and 1
        (Invert Status Enabled). Note: This parameter functions the same as Invert Mode in Point type 101 (parameter 4).
        """

        LATCH_MODE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Latch Mode',
            parameter_desc='If enabled, then, on an active transition of the input, the Status (parameter #5) will change to ON and remain in the ON state until it is cleared manually. 0 = Latch Status Disabled, 1 = Latch Status Enabled. Note: This parameter functions the same as Latch Mode in Point type 101 (parameter 5).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, then, on an active transition of the input, the Status (parameter #5) will change to ON and remain in the ON state until it is cleared manually. 0 =
        Latch Status Disabled, 1 = Latch Status Enabled. Note: This parameter functions the same as Latch Mode in Point type 101 (parameter 5).
        """

        INPUT_ACCUMULATED_VALUE = PointTypeParameter(
            parameter_number=11,
            parameter_name='Input Accumulated Value',
            parameter_desc='Indicates the number of times the Status (parameter 5) goes from OFF to ON. Note: This parameter functions the same as Accumulated Value in Point type 101 (parameter 6).',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0-4,294,967,295'
        )
        """
        Indicates the number of times the Status (parameter 5) goes from OFF to ON. Note: This parameter functions the same as Accumulated Value in Point type 101
        (parameter 6).
        """

        CUMULATIVE_ON_TIME = PointTypeParameter(
            parameter_number=12,
            parameter_name='Cumulative On Time',
            parameter_desc='Number of seconds when the Status (parameter #5) is in the ON state. Note: This parameter functions the same as Cumulative On Time in Point type 101 (parameter 7).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Number of seconds when the Status (parameter #5) is in the ON state. Note: This parameter functions the same as Cumulative On Time in Point type 101 (parameter
        7).
        """

        CUMULATIVE_OFF_TIME = PointTypeParameter(
            parameter_number=13,
            parameter_name='Cumulative Off Time',
            parameter_desc='Indicates the number of seconds when the Status (parameter #5) is in the OFF state. Note: This parameter functions the same as Cumulative Off Time in Point type 101 (parameter 8).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0-Any positive valid IEEE 754 float'
        )
        """
        Indicates the number of seconds when the Status (parameter #5) is in the OFF state. Note: This parameter functions the same as Cumulative Off Time in Point type
        101 (parameter 8).
        """

        INPUT_ALARMING = PointTypeParameter(
            parameter_number=14,
            parameter_name='Input Alarming',
            parameter_desc='If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled). Note: This parameter functions the same as Alarming in Point type 101 (parameter 9).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled). Note: This parameter functions the same as
        Alarming in Point type 101 (parameter 9).
        """

        INPUT_ALARM_CODE = PointTypeParameterBinary(
            parameter_number=15,
            parameter_name='Input Alarm Code',
            parameter_desc='Input Alarm Code',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Status On Alarm',
                    bit_desc='If set, the Status (parameter #5 is ON. If clear, the Status (parameter #5) is OFF. Note: This parameter functions the same as "Status On Alarm in Point type 101."'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Input Scanning Disabled Alarm',
                    bit_desc='If set, the Scanning (parameter #3) has been disabled. If clear, the Scanning (parameter #3) has been set to Enable. Note: This parameter functions the same as "Scanning Disabled Alarm in Point type 101."'
                )
            ]
        )
        """
        Input Alarm Code
        """

        INPUT_SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=16,
            parameter_name='Input SRBX on Clear',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled). Note: This parameter functions the same as SRBX on Clear in Point type 101.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled). Note: This parameter
        functions the same as SRBX on Clear in Point type 101.
        """

        INPUT_SRBX_ON_SET = PointTypeParameter(
            parameter_number=17,
            parameter_name='Input SRBX on Set',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition occurs. 0 = SRBX on Set Disabled, 1 = SRBX on Set Enabled. Note: This parameter functions the same as SRBX on Clear in Point type 101.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition occurs. 0 = SRBX on Set Disabled, 1 = SRBX on Set Enabled. Note: This parameter functions the same as
        SRBX on Clear in Point type 101.
        """

        SCANNING_OUTPUT = PointTypeParameter(
            parameter_number=18,
            parameter_name='Scanning Output',
            parameter_desc='Indicates what may change the DO values. Valid values are: 0 = Disabled (no changes to the output can occur) 1 = Automatic (anything can change the DO values) 2 = Manual (only the user can change the DO values) Note: This parameter functions the same as Scanning Mode in Point type 102).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        Indicates what may change the DO values. Valid values are: 0 = Disabled (no changes to the output can occur) 1 = Automatic (anything can change the DO values) 2
        = Manual (only the user can change the DO values) Note: This parameter functions the same as Scanning Mode in Point type 102).
        """

        AUTO_OUTPUT = PointTypeParameter(
            parameter_number=19,
            parameter_name='Auto Output',
            parameter_desc='Controls the state of the DO when Scanning (parameter #5) is in auto mode. In other words, the physical output gets this status when Scanning (parameter # 18) is set to Automatic. (Parameter functions the same as Auto Output in Point type 102). 0 = Off 1 = On',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Controls the state of the DO when Scanning (parameter #5) is in auto mode. In other words, the physical output gets this status when Scanning (parameter # 18)
        is set to Automatic. (Parameter functions the same as Auto Output in Point type 102). 0 = Off 1 = On
        """

        MANUAL_OUTPUT = PointTypeParameter(
            parameter_number=20,
            parameter_name='Manual Output',
            parameter_desc='Controls the state of the DO when Scanning (parameter #18) is in manual mode. In other words, the physical output gets this status when Scanning (parameter # 18) is set to Manual. 0 = Off, 1 = On (Parameter functions the same as Manual Output in Point type 102)',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Controls the state of the DO when Scanning (parameter #18) is in manual mode. In other words, the physical output gets this status when Scanning (parameter #
        18) is set to Manual. 0 = Off, 1 = On (Parameter functions the same as Manual Output in Point type 102)
        """

        FAILSAFE_OUTPUT = PointTypeParameter(
            parameter_number=21,
            parameter_name='Failsafe Output',
            parameter_desc='The state the output is placed in when the unit is started and the Failsafe on Reset Parameter (Parameter #24) = 1 (Use Failsafe value on reset). Valid values are 0 (Off) and 1 (On). Note: This paarameter functions the same as Failsafe Output in Point type 102)',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        The state the output is placed in when the unit is started and the Failsafe on Reset Parameter (Parameter #24) = 1 (Use Failsafe value on reset). Valid values
        are 0 (Off) and 1 (On). Note: This paarameter functions the same as Failsafe Output in Point type 102)
        """

        PHYSICAL_OUTPUT = PointTypeParameter(
            parameter_number=22,
            parameter_name='Physical Output',
            parameter_desc='Indicates the DOs current state. Valid values are 0 (Off) and 1 (On). Note: This parameter functions the same as Physical Output in Point type 102)',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Indicates the DOs current state. Valid values are 0 (Off) and 1 (On). Note: This parameter functions the same as Physical Output in Point type 102)
        """

        OUTPUT_ACCUMULATED_VALUE = PointTypeParameter(
            parameter_number=23,
            parameter_name='Output Accumulated Value',
            parameter_desc='Number of times the Physical Output (parameter #22) goes from OFF to ON. Note: this parameter functions the same as Accumulated Value in Point type 102)',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 -> 4,294,967,295'
        )
        """
        Number of times the Physical Output (parameter #22) goes from OFF to ON. Note: this parameter functions the same as Accumulated Value in Point type 102)
        """

        FAILSAFE_ON_RESET_MODE = PointTypeParameter(
            parameter_number=24,
            parameter_name='Failsafe on Reset Mode',
            parameter_desc='Indicates the status on reset mode. Valid values are 0 (Output Last Status on Reset) and 1 (Use Failsafe value on Reset). If enabled, the Status (parameter #19) is set to the status indicated in Failsafe Output (Parameter #21) on a restart of any kind. If disabled the last Status before the restart is used. Note: This parameter functions the same as Failsafe on Reset in Point type 102 (parameter 7).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates the status on reset mode. Valid values are 0 (Output Last Status on Reset) and 1 (Use Failsafe value on Reset). If enabled, the Status (parameter #19)
        is set to the status indicated in Failsafe Output (Parameter #21) on a restart of any kind. If disabled the last Status before the restart is used. Note: This
        parameter functions the same as Failsafe on Reset in Point type 102 (parameter 7).
        """

        MOMENTARY_MODE = PointTypeParameter(
            parameter_number=25,
            parameter_name='Momentary Mode',
            parameter_desc='Valid values are 0 (Momentary Disabled) and 1 (Momentary Enabled). If enabled, the Status (parameter #19) is turned ON for the entered Time On (parameter #30) and then be turned OFF. Note: This parameters functions the same as Momentary Mode in Point type 102 (parameter 10).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 1'
        )
        """
        Valid values are 0 (Momentary Disabled) and 1 (Momentary Enabled). If enabled, the Status (parameter #19) is turned ON for the entered Time On (parameter #30)
        and then be turned OFF. Note: This parameters functions the same as Momentary Mode in Point type 102 (parameter 10).
        """

        MOMENTARY_ACTIVE = PointTypeParameter(
            parameter_number=26,
            parameter_name='Momentary Active',
            parameter_desc='Indicates whether the DO currently has the Momentary ability active. Valid values are 0 (Momentary Not Active) and 1 (Momentary Active). Note: This parameter functions the same as Momentary Active in Point Type 102 (parameter 11).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Indicates whether the DO currently has the Momentary ability active. Valid values are 0 (Momentary Not Active) and 1 (Momentary Active). Note: This parameter
        functions the same as Momentary Active in Point Type 102 (parameter 11).
        """

        TOGGLE_MODE = PointTypeParameter(
            parameter_number=27,
            parameter_name='Toggle Mode',
            parameter_desc='Valid values are 0 (Toggle Disabled) and 1 (Toggle Enabled). If enabled, the Status (parameter #19) is be turned ON for the entered Time On (parameter #30) and then turned OFF for the same Time On. The Status continues to cycle between the ON and OFF states. Note: This parameter functions the same as Toggle Mode in Point type 102 (parameter 12).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Valid values are 0 (Toggle Disabled) and 1 (Toggle Enabled). If enabled, the Status (parameter #19) is be turned ON for the entered Time On (parameter #30) and
        then turned OFF for the same Time On. The Status continues to cycle between the ON and OFF states. Note: This parameter functions the same as Toggle Mode in
        Point type 102 (parameter 12).
        """

        TIMED_DISCRETE_OUTPUT_TDO_MODE = PointTypeParameter(
            parameter_number=28,
            parameter_name='Timed Discrete Output (TDO) Mode',
            parameter_desc='Valid values are 0 (TDO Disabled) and 1 (TDO Enabled). If enabled, the Status (parameter #19) is turned ON for a calculated Time On (parameter #30) based upon the entered EU Value (parameter #37). After the Time On has expired, the Status turns OFF and remains that way until a new EU Value is entered.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Valid values are 0 (TDO Disabled) and 1 (TDO Enabled). If enabled, the Status (parameter #19) is turned ON for a calculated Time On (parameter #30) based upon
        the entered EU Value (parameter #37). After the Time On has expired, the Status turns OFF and remains that way until a new EU Value is entered.
        """

        INVERT_OUTPUT_MODE = PointTypeParameter(
            parameter_number=29,
            parameter_name='Invert Output Mode',
            parameter_desc='Inverts the output of the ACIO channel. Valid values are 0 (Normal) and 1 (Inverted). This allows you to use TDO mode to keep a channel OFF for a set amount of time and then bringing the channel back ON. Note: This always inverts the output; including the Failsafe Output.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Inverts the output of the ACIO channel. Valid values are 0 (Normal) and 1 (Inverted). This allows you to use TDO mode to keep a channel OFF for a set amount of
        time and then bringing the channel back ON. Note: This always inverts the output; including the Failsafe Output.
        """

        TIME_ON = PointTypeParameter(
            parameter_number=30,
            parameter_name='Time On',
            parameter_desc='Indicates the number of seconds for which the Status (parameter #19) is ON if in Toggle or Momentary Mode. Note: This parameter functions the same as Time On in Point type 102 (parameter 14).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.02-> 43,200.0'
        )
        """
        Indicates the number of seconds for which the Status (parameter #19) is ON if in Toggle or Momentary Mode. Note: This parameter functions the same as Time On in
        Point type 102 (parameter 14).
        """

        CYCLE_TIME = PointTypeParameter(
            parameter_number=31,
            parameter_name='Cycle Time',
            parameter_desc='Number of seconds for when Toggle Mode (parameter #27) is selected. The Status (parameter #19) will be ON for the calculated Time On and off for an equal amount of time. Note: Ths parameter functions the same as Cycle Time in Point type 102 (parameter 15).',
            data_type=dt.FL,
            access='R/W',
            value_range='>0.0 43,200.0'
        )
        """
        Number of seconds for when Toggle Mode (parameter #27) is selected. The Status (parameter #19) will be ON for the calculated Time On and off for an equal amount
        of time. Note: Ths parameter functions the same as Cycle Time in Point type 102 (parameter 15).
        """

        UNITS_TAG = PointTypeParameter(
            parameter_number=32,
            parameter_name='Units Tag',
            parameter_desc='Describes the units used by the output parameters. Values must be printable ASCII characters. Note: This parameter functions the same as Units Tag in Point type 102 (parameter 1)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Describes the units used by the output parameters. Values must be printable ASCII characters. Note: This parameter functions the same as Units Tag in Point type
        102 (parameter 1)
        """

        LOW_READING_TIME = PointTypeParameter(
            parameter_number=33,
            parameter_name='Low Reading Time',
            parameter_desc='Minimum number of seconds the calculated Time On (parameter #30) will be when the entered EU Value (parameter #37) is less than or equal to the entered Low Reading EU (parameter #35). Note: This parameter functions the same as Low Reading Time in Point type 102 (parameter 16).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 -> 43,200.0'
        )
        """
        Minimum number of seconds the calculated Time On (parameter #30) will be when the entered EU Value (parameter #37) is less than or equal to the entered Low
        Reading EU (parameter #35). Note: This parameter functions the same as Low Reading Time in Point type 102 (parameter 16).
        """

        HIGH_READING_TIME = PointTypeParameter(
            parameter_number=34,
            parameter_name='High Reading Time',
            parameter_desc='Maximum number of seconds the calculated Time On (parameter #30) will be when the entered EU Value (parameter #37) is greater than or equal to the entered High Reading EU (parameter #36). Note: This parameter functions the same as High Reading Time in Point type 102 (parameter 17).',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 43,200.0'
        )
        """
        Maximum number of seconds the calculated Time On (parameter #30) will be when the entered EU Value (parameter #37) is greater than or equal to the entered High
        Reading EU (parameter #36). Note: This parameter functions the same as High Reading Time in Point type 102 (parameter 17).
        """

        LOW_READING_EU = PointTypeParameter(
            parameter_number=35,
            parameter_name='Low Reading EU',
            parameter_desc='Minimum EU Value (parameter #37) possible. Note: This parameter functions the same as Low Reading EU in Point type 102) (parameter 18).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum EU Value (parameter #37) possible. Note: This parameter functions the same as Low Reading EU in Point type 102) (parameter 18).
        """

        HIGH_READING_EU = PointTypeParameter(
            parameter_number=36,
            parameter_name='High Reading EU',
            parameter_desc='Maximum EU Value (parameter #37) possible. Note: This parameter functions the same as High Reading EU in Point type 102 (paramneter 19).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum EU Value (parameter #37) possible. Note: This parameter functions the same as High Reading EU in Point type 102 (paramneter 19).
        """

        EU_VALUE = PointTypeParameter(
            parameter_number=37,
            parameter_name='EU Value',
            parameter_desc='Value in Engineering Units. Note: This parameter functions the same as EU Value in Point type 102 (parameter 20).',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value in Engineering Units. Note: This parameter functions the same as EU Value in Point type 102 (parameter 20).
        """

        INRUSH_TIME = PointTypeParameter(
            parameter_number=38,
            parameter_name='Inrush Time',
            parameter_desc='Number of seconds that the initial inrush current is allowed to exceed the hardware limiting circuit before de-energizing the circuit. If this time is exceeded, the Fault Reset (parameter #40) is set to 1, scanning is disabled for the channel and if alarming is set, the correct alarm bit will be set.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.02 0.5'
        )
        """
        Number of seconds that the initial inrush current is allowed to exceed the hardware limiting circuit before de-energizing the circuit. If this time is exceeded,
        the Fault Reset (parameter #40) is set to 1, scanning is disabled for the channel and if alarming is set, the correct alarm bit will be set.
        """

        HOLDING_CURRENT = PointTypeParameter(
            parameter_number=39,
            parameter_name='Holding Current',
            parameter_desc='Detected current present in the channel in mA.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0 43,200.0'
        )
        """
        Detected current present in the channel in mA.
        """

        FAULT_RESET = PointTypeParameter(
            parameter_number=40,
            parameter_name='Fault Reset',
            parameter_desc='This value is set to 1 when Holding Current (parameter #39) is above 1500 mA for Inrush Time (parameter #38) seconds. This value is set to 2 when a relay failure has been detected. The module will need to be serviced by the manufacturer to reset this value. When not set to 0 the Scanning output (parameter #18) will be disabled, an alarm (parameter #42.4) will be raised, and the channel relay will be de-energized. Note: User action is required to reset this field to 0. The firmware continually disables scanning as long as this field has a value of 1. Valid values are: 0 Reset 1 Fault 2 = Failure',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        This value is set to 1 when Holding Current (parameter #39) is above 1500 mA for Inrush Time (parameter #38) seconds. This value is set to 2 when a relay
        failure has been detected. The module will need to be serviced by the manufacturer to reset this value. When not set to 0 the Scanning output (parameter #18)
        will be disabled, an alarm (parameter #42.4) will be raised, and the channel relay will be de-energized. Note: User action is required to reset this field to 0.
        The firmware continually disables scanning as long as this field has a value of 1. Valid values are: 0 Reset 1 Fault 2 = Failure
        """

        OUTPUT_ALARMING = PointTypeParameter(
            parameter_number=41,
            parameter_name='Output Alarming',
            parameter_desc='If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled). Note: This parameter functions the same as Alarming in Point type 102 (parameter 3).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled). Note: This parameter functions the same as
        Alarming in Point type 102 (parameter 3).
        """

        OUTPUT_ALARM_CODE = PointTypeParameterBinary(
            parameter_number=42,
            parameter_name='Output Alarm Code',
            parameter_desc='Output Alarm Code',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='Relay Failure Alarm',
                    bit_desc='If set, a relay failure has been detected. This is a hardware failure and cannot be reset by software. This alarm cannot be disabled.'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Fault Current Alarm',
                    bit_desc='If set, the Fault Reset (parameter #33) has been set to Fault. If clear, the Fault Reset (parameter #33) has been set to Reset. This alarm cannot be disabled.'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Scanning Manual Alarm',
                    bit_desc='If set, the Scanning (parameter #5) has been set to Manual. If clear, the Scanning (parameter #5) has been set to either Disable or Automatic. Note: This parameter functions the same as "Scanning Manual Alarm in Point type 102 (parameter 6.5)."'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Point Fail',
                    bit_desc='If set, the ACIO is reporting a malfunction. If clear, the ACIO is operating properly.'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Output Scanning Disabled Alarm',
                    bit_desc='If set, the Scanning (parameter #18) has been disabled. If clear, the Scanning (parameter #18) has been set to either Automatic or Manual. Note: This parameter functions the same as "Scanning Disabled Alarm in Point type 102 (parameter 6.7). )"'
                )
            ]
        )
        """
        Output Alarm Code
        """

        OUTPUT_SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=43,
            parameter_name='Output SRBX on Clear',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled). Note: This parameter functions the same as SRBX on Clear in Point type 102 (parameter 4).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled). Note: This parameter
        functions the same as SRBX on Clear in Point type 102 (parameter 4).
        """

        OUTPUT_SRBX_ON_SET = PointTypeParameter(
            parameter_number=44,
            parameter_name='Output SRBX on Set',
            parameter_desc='Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled). Note: This parameter functions the same as SRBX on Set in Point type 102) (parameter 5).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates a SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled). Note: This parameter
        functions the same as SRBX on Set in Point type 102) (parameter 5).
        """

        AC_FREQUENCY = PointTypeParameter(
            parameter_number=45,
            parameter_name='AC Frequency',
            parameter_desc='The frequency of the AC input. This parameter must be correct for fault detection to function properly.',
            data_type=dt.FL,
            access='R/W',
            value_range='47-63'
        )
        """
        The frequency of the AC input. This parameter must be correct for fault detection to function properly.
        """

        FAILURE_ACTION = PointTypeParameter(
            parameter_number=46,
            parameter_name='Failure Action',
            parameter_desc='Indicates the action to be taken when a failure condition is detected. Valid values are: 0 = Channel Shutdown, alarm logged 1 = No action taken, alarm logged 2 = No action taken, alarm not logged In all cases the Relay Failure Alarm bit (parameter #42.3) is set. WARNING: Changing this parameter can cause relay protection to be disabled.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        Indicates the action to be taken when a failure condition is detected. Valid values are: 0 = Channel Shutdown, alarm logged 1 = No action taken, alarm logged 2
        = No action taken, alarm not logged In all cases the Relay Failure Alarm bit (parameter #42.3) is set. WARNING: Changing this parameter can cause relay
        protection to be disabled.
        """





class ADVANCE_PULSE_MODULE(PointType):
    """Advance Pulse Module"""

    point_type_number: int = 141
    """Point Type ID"""

    point_type_desc: str = 'Advance Pulse Module'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='A 10 character identification name for a specific APM. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        A 10 character identification name for a specific APM. Values must be printable ASCII characters.
        """

        API_LEVEL_CHECK_PAIR_1 = PointTypeParameter(
            parameter_number=1,
            parameter_name='API Level Check Pair 1',
            parameter_desc='Selects the API level to perform for the first check pair. Valid values are: 0 Level A 1 Level B 2 = Level C 3 Level D 4 = Level E 5 = Marker Pulse The output of the API Chapter 5.5 level checks will always be written to the API Pulse Counts Pair 1 (parameter #17)',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-4'
        )
        """
        Selects the API level to perform for the first check pair. Valid values are: 0 Level A 1 Level B 2 = Level C 3 Level D 4 = Level E 5 = Marker Pulse The output
        of the API Chapter 5.5 level checks will always be written to the API Pulse Counts Pair 1 (parameter #17)
        """

        API_LEVEL_CHECK_PAIR_2 = PointTypeParameter(
            parameter_number=2,
            parameter_name='API Level Check Pair 2',
            parameter_desc='Selects the API level to perform for the second check pair. Valid values are: 1 = Level B 2 = Level C 3 = Level D 4 = Level E 5 = Marker Pulse The output of the API Chapter 5.5 level checks is always written to the API Pulse Counts Pair 2 (parameter #19)',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-4'
        )
        """
        Selects the API level to perform for the second check pair. Valid values are: 1 = Level B 2 = Level C 3 = Level D 4 = Level E 5 = Marker Pulse The output of the
        API Chapter 5.5 level checks is always written to the API Pulse Counts Pair 2 (parameter #19)
        """

        METER_INPUT_ON_PROVE = PointTypeParameter(
            parameter_number=3,
            parameter_name='Meter Input on Prove',
            parameter_desc='Indicates which pulse to use for the Meter Prove. Valid values are: 0 Pulse Input 1 1 Pulse Input 2 2 Pulse Input 3 3 Pulse Input 4',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-3'
        )
        """
        Indicates which pulse to use for the Meter Prove. Valid values are: 0 Pulse Input 1 1 Pulse Input 2 2 Pulse Input 3 3 Pulse Input 4
        """

        MASTER_METER_INPUT_ON_PROVE = PointTypeParameter(
            parameter_number=4,
            parameter_name='Master Meter Input on Prove',
            parameter_desc='Indicates which pulse to use for the Master Meter Prove. Valid values are: 0 Pulse Input 1 1 Pulse Input 2 2 Pulse Input 3 3 Pulse Input 4 Note: This function activates only if you enable Software Detector Switch (parameter #42).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-3'
        )
        """
        Indicates which pulse to use for the Master Meter Prove. Valid values are: 0 Pulse Input 1 1 Pulse Input 2 2 Pulse Input 3 3 Pulse Input 4 Note: This function
        activates only if you enable Software Detector Switch (parameter #42).
        """

        RAW_PULSE_COUNT_PI_ONE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Raw Pulse Count PI One',
            parameter_desc='The raw accumulated number of pulses for PI One',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 -> 16,000,000'
        )
        """
        The raw accumulated number of pulses for PI One
        """

        FREQUENCY_PI_ONE = PointTypeParameter(
            parameter_number=6,
            parameter_name='Frequency PI One',
            parameter_desc='Frequency of incoming pulses on PI One in pulses/second.',
            data_type=dt.FL,
            access='R/O',
            value_range='0 -> Any positive IEEE 754 float'
        )
        """
        Frequency of incoming pulses on PI One in pulses/second.
        """

        SCAN_PERIOD_PI_ONE = PointTypeParameter(
            parameter_number=7,
            parameter_name='Scan Period PI One',
            parameter_desc='Time period in seconds in which the parameters associated with the pulse input are evaluated.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.05 60.0'
        )
        """
        Time period in seconds in which the parameters associated with the pulse input are evaluated.
        """

        RAW_PULSE_COUNT_PI_TWO = PointTypeParameter(
            parameter_number=8,
            parameter_name='Raw Pulse Count PI Two',
            parameter_desc='The raw accumulated number of pulses for PI Two',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 -> 16,000,000'
        )
        """
        The raw accumulated number of pulses for PI Two
        """

        FREQUENCY_PI_TWO = PointTypeParameter(
            parameter_number=9,
            parameter_name='Frequency PI Two',
            parameter_desc='Frequency of incoming pulses on PI Two in pulses/second.',
            data_type=dt.FL,
            access='R/O',
            value_range='0 -> Any positive IEEE 754 float'
        )
        """
        Frequency of incoming pulses on PI Two in pulses/second.
        """

        SCAN_PERIOD_PI_TWO = PointTypeParameter(
            parameter_number=10,
            parameter_name='Scan Period PI Two',
            parameter_desc='Time period in seconds in which the parameters associated with the pulse input are evaluated.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.05 60.0'
        )
        """
        Time period in seconds in which the parameters associated with the pulse input are evaluated.
        """

        RAW_PULSE_COUNT_PI_THREE = PointTypeParameter(
            parameter_number=11,
            parameter_name='Raw Pulse Count PI Three',
            parameter_desc='The raw accumulated number of pulses for PI Three',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 -> 16,000,000'
        )
        """
        The raw accumulated number of pulses for PI Three
        """

        FREQUENCY_PI_THREE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Frequency PI Three',
            parameter_desc='Frequency of incoming pulses on PI Three in pulses/second.',
            data_type=dt.FL,
            access='R/O',
            value_range='0 -> Any positive IEEE 754 float'
        )
        """
        Frequency of incoming pulses on PI Three in pulses/second.
        """

        SCAN_PERIOD_PI_THREE = PointTypeParameter(
            parameter_number=13,
            parameter_name='Scan Period PI Three',
            parameter_desc='Time period in seconds in which the parameters associated with the pulse input are evaluated.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.05 60.0'
        )
        """
        Time period in seconds in which the parameters associated with the pulse input are evaluated.
        """

        RAW_PULSE_COUNT_PI_FOUR = PointTypeParameter(
            parameter_number=14,
            parameter_name='Raw Pulse Count PI Four',
            parameter_desc='The raw accumulated number of pulses for PI Four',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 -> 16,000,000'
        )
        """
        The raw accumulated number of pulses for PI Four
        """

        FREQUENCY_PI_FOUR = PointTypeParameter(
            parameter_number=15,
            parameter_name='Frequency PI Four',
            parameter_desc='Frequency of incoming pulses on PI Four in pulses/second.',
            data_type=dt.FL,
            access='R/O',
            value_range='0 -> Any positive IEEE 754 float'
        )
        """
        Frequency of incoming pulses on PI Four in pulses/second.
        """

        SCAN_PERIOD_PI_FOUR = PointTypeParameter(
            parameter_number=16,
            parameter_name='Scan Period PI Four',
            parameter_desc='Time period in seconds in which the parameters associated with the pulse input are evaluated.',
            data_type=dt.FL,
            access='R/W_C NDL',
            value_range='0.05 -> 60.0'
        )
        """
        Time period in seconds in which the parameters associated with the pulse input are evaluated.
        """

        API_PULSE_COUNTS_PAIR_1 = PointTypeParameter(
            parameter_number=17,
            parameter_name='API Pulse Counts Pair 1',
            parameter_desc='The accumulated number of pulses through the API level checks for pulse pair 1. This updates only when you set the API Level Check Pair 1 (parameter #1) to Level A, B, C, or Marker Pulse.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 -> 16,000,000'
        )
        """
        The accumulated number of pulses through the API level checks for pulse pair 1. This updates only when you set the API Level Check Pair 1 (parameter #1) to
        Level A, B, C, or Marker Pulse.
        """

        FREQUENCY_PAIR_1 = PointTypeParameter(
            parameter_number=18,
            parameter_name='Frequency Pair 1',
            parameter_desc='Frequency of incoming pulses on Pair One in pulses/second.',
            data_type=dt.FL,
            access='R/O',
            value_range='0 -> Any positive IEEE 754 float'
        )
        """
        Frequency of incoming pulses on Pair One in pulses/second.
        """

        API_PULSE_COUNTS_PAIR_2 = PointTypeParameter(
            parameter_number=19,
            parameter_name='API Pulse Counts Pair 2',
            parameter_desc='The accumulated number of pulses through the API level checks for pulse pair 2. This updates only when you set the API Level Check Pair 2 (parameter #2) is set to Level A, B, C, or Marker Pulse.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 -> 16,000,000'
        )
        """
        The accumulated number of pulses through the API level checks for pulse pair 2. This updates only when you set the API Level Check Pair 2 (parameter #2) is set
        to Level A, B, C, or Marker Pulse.
        """

        FREQUENCY_PAIR_2 = PointTypeParameter(
            parameter_number=20,
            parameter_name='Frequency Pair 2',
            parameter_desc='Frequency of incoming pulses on Pair Two in pulses/second.',
            data_type=dt.FL,
            access='R/O',
            value_range='0 - Any positive IEEE 754 float'
        )
        """
        Frequency of incoming pulses on Pair Two in pulses/second.
        """

        METER_WHOLE_PULSE_COUNT = PointTypeParameter(
            parameter_number=21,
            parameter_name='Meter Whole Pulse Count',
            parameter_desc='Actual number of whole pulses accumulated between detector switches for a Meter Input (parameter #3). Note: Detector Reset clears this value.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 -> 16,000,000'
        )
        """
        Actual number of whole pulses accumulated between detector switches for a Meter Input (parameter #3). Note: Detector Reset clears this value.
        """

        MASTER_METER_WHOLE_PULSE_COUNT = PointTypeParameter(
            parameter_number=22,
            parameter_name='Master Meter Whole Pulse Count',
            parameter_desc='Actual number of whole pulses accumulated between detector switches for a Master Meter Input (parameter #4). Note: This activates only if you enable the Software Detector Switch Enabled (parameter #42). Detector Reset clears this value.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 -> 16,000,000'
        )
        """
        Actual number of whole pulses accumulated between detector switches for a Master Meter Input (parameter #4). Note: This activates only if you enable the
        Software Detector Switch Enabled (parameter #42). Detector Reset clears this value.
        """

        METER_INTERPOLATED_PULSE_COUNT = PointTypeParameter(
            parameter_number=23,
            parameter_name='Meter Interpolated Pulse Count',
            parameter_desc='Actual number of interpolated pulses accumulated between detector switches for a given meter pulse input.',
            data_type=dt.FL,
            access='R/O',
            value_range='0 Any positive IEEE 754 float'
        )
        """
        Actual number of interpolated pulses accumulated between detector switches for a given meter pulse input.
        """

        MASTER_METER_INTERPOLATED_PULSE_COUNT = PointTypeParameter(
            parameter_number=24,
            parameter_name='Master Meter Interpolated Pulse Count',
            parameter_desc='Actual number of interpolated pulses accumulated between software detector switches for a given master meter pulse input.',
            data_type=dt.FL,
            access='R/O',
            value_range='0 -> Any positive IEEE 754 float'
        )
        """
        Actual number of interpolated pulses accumulated between software detector switches for a given master meter pulse input.
        """

        PI_ALARMING = PointTypeParameter(
            parameter_number=25,
            parameter_name='PI Alarming',
            parameter_desc='Displays whether alarms may be generated and sent to the alarm log for a pulse input. Valid values are 0 (Alarming Disabled) and 1 (Alarming Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Displays whether alarms may be generated and sent to the alarm log for a pulse input. Valid values are 0 (Alarming Disabled) and 1 (Alarming Enabled).
        """

        PI_SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=26,
            parameter_name='PI SRBX on Clear',
            parameter_desc='Indicates an SRBX alarm is desired if an alarm condition clears for a pulse input. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates an SRBX alarm is desired if an alarm condition clears for a pulse input. Valid values are 0 (SRBX on Clear Disabled) and 1 (SRBX on Clear Enabled).
        """

        PI_SRBX_ON_SET = PointTypeParameter(
            parameter_number=27,
            parameter_name='PI SRBX on Set',
            parameter_desc='Indicates an SRBX alarm is desired if an alarm condition occurs for a pulse input. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates an SRBX alarm is desired if an alarm condition occurs for a pulse input. Valid values are 0 (SRBX on Set Disabled) and 1 (SRBX on Set Enabled).
        """

        API_PAIR_1_ALARM_STATUS = PointTypeParameterBinary(
            parameter_number=28,
            parameter_name='API Pair 1 Alarm Status',
            parameter_desc='API Level Alarm Status (Pair 1). Note: These values update in real time.',
            data_type=dt.BIN,
            access='R/O',
            value_range='0-255',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Sequence Out of Order Error',
                    bit_desc='This alarm is present if the sequence of the pulses within the pair become out of order. Valid values are 0 (No Alarm Present) and 1 (Alarm Present).'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Phase Discrepancy Detected',
                    bit_desc='This alarm occurs if the phase of the pulses within the pair becomes skewed. Valid values are 0 (No Alarm Present) and 1 (Alarm Present).'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='Pulse Synchronization Error',
                    bit_desc='This alarm occurs if the synchronization of the pulses fails. Valid values are 0 (No Alarm Present) and 1 (Alarm Present).'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='Frequency Discrepancy Detected',
                    bit_desc='This alarm occurs if the frequencies of the two pulses are not equal. Valid values are 0 (No Alarm Present) and 1 (Alarm Present).'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='PI 1 Failure',
                    bit_desc='This alarm occurs if PI 1 has failures (see bits 0-3). Valid values are 0 (No Alarm Present) and 1 (Alarm Present).'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='PI 2 Failure',
                    bit_desc='This alarm occurs if PI 2 has failures (see bits 0-3). Valid values are 0 (No Alarm Present) and 1 (Alarm Present).'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Level A Bad Pulse Stream',
                    bit_desc='This alarm occurs if the number of bad pulses exceeds the bad pulse threshold in Level A. A bad pulse is either a missing pulse or a duplicate pulse. Valid values are 0 (No Alarm Present) and 1 (Alarm Present).'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Marker Pulse Alarm',
                    bit_desc='This alarm occurs if the flow pulses drift from the expected number of pulses by more than the marker puilse deadband for Pair 1. Valid values are 0 (No Alarm Present) and 1 (Alarm Present).'
                )
            ]
        )
        """
        API Level Alarm Status (Pair 1). Note: These values update in real time.
        """

        API_PAIR_2_ALARM_STATUS = PointTypeParameterBinary(
            parameter_number=29,
            parameter_name='API Pair 2 Alarm Status',
            parameter_desc='API Level Alarm Status (Pair 2). Note: These values update in real time.',
            data_type=dt.BIN,
            access='R/O',
            value_range='0-255',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Sequence Out of Order Error',
                    bit_desc='This alarm occurs if the sequence of the pulses within the pair becomes out of order. Valid values are 0 (No Alarm Present) and 1 (Alarm Present).'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Phase Discrepancy Detected',
                    bit_desc='This alarm occurs if the phase of the pulses within the pair becomes skewed. Valid values are 0 (No Alarm Present) and 1 (Alarm Present).'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='Pulse Synchronization Error',
                    bit_desc='This alarm occurs if the synchronization of the pulses fails. Valid values are 0 (No Alarm Present) and 1 (Alarm Present).'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='Frequency Discrepancy Detected',
                    bit_desc='This alarm occurs if the frequencies of the two pulses are not equal. Valid values are 0 (No Alarm Present) and 1 (Alarm Present).'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='PI 3 Failure',
                    bit_desc='This alarm occurs if PI 3 has failures (see bits 0-3). Valid values are 0 (No Alarm Present) and 1 (Alarm Present).'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='PI 4 Failure',
                    bit_desc='This alarm occurs if PI 4 has failures (see bits 0-3). Valid values are 0 (No Alarm Present) and 1 (Alarm Present).'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Marker Pulse Alarm',
                    bit_desc='This alarm occurs if the flow pulses drift from the expected number of pulses by more than the marker puilse deadband for Pair 1. Valid values are 0 (No Alarm Present) and 1 (Alarm Present).'
                )
            ]
        )
        """
        API Level Alarm Status (Pair 2). Note: These values update in real time.
        """

        API_PHASE_ALARM_COUNT_PAIR_1 = PointTypeParameter(
            parameter_number=30,
            parameter_name='API Phase Alarm Count Pair 1',
            parameter_desc='Indicates the total number of phase alarms',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Indicates the total number of phase alarms
        """

        API_SAME_CHANNEL_ALARM_COUNT_PAIR_1 = PointTypeParameter(
            parameter_number=31,
            parameter_name='API Same Channel Alarm Count Pair 1',
            parameter_desc='Indicates the total number of same channel alarms',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 -> 65535'
        )
        """
        Indicates the total number of same channel alarms
        """

        API_PHASE_ALARM_COUNT_PAIR_2 = PointTypeParameter(
            parameter_number=32,
            parameter_name='API Phase Alarm Count Pair 2',
            parameter_desc='Indicates the total number of phase alarms',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Indicates the total number of phase alarms
        """

        API_SAME_CHANNEL_ALARM_COUNT_PAIR_2 = PointTypeParameter(
            parameter_number=33,
            parameter_name='API Same Channel Alarm Count Pair 2',
            parameter_desc='Indicates the total number of same channel alarms',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Indicates the total number of same channel alarms
        """

        DETECTOR_RESET = PointTypeParameter(
            parameter_number=34,
            parameter_name='Detector Reset',
            parameter_desc='This essentially notifies the APM of the start of a prove. All accumulated pulses clear and all alarms clear. Pulse accumulation starts at the transition of the first detector switch and stops at the transition of the second detector switch. Valid values are 0 (Idle) and 1 (Reset).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        This essentially notifies the APM of the start of a prove. All accumulated pulses clear and all alarms clear. Pulse accumulation starts at the transition of the
        first detector switch and stops at the transition of the second detector switch. Valid values are 0 (Idle) and 1 (Reset).
        """

        DETECTOR_SWITCH_1_STATUS = PointTypeParameter(
            parameter_number=35,
            parameter_name='Detector Switch 1 Status',
            parameter_desc='Indicates the status of the physical detector switch. Valid values are 0 (Closed) and 1 (Open).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Indicates the status of the physical detector switch. Valid values are 0 (Closed) and 1 (Open).
        """

        DETECTOR_SWITCH_2_STATUS = PointTypeParameter(
            parameter_number=36,
            parameter_name='Detector Switch 2 Status',
            parameter_desc='Indicates the status of the physical detector switch. Valid values are 0 (Closed) and 1 (Open).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Indicates the status of the physical detector switch. Valid values are 0 (Closed) and 1 (Open).
        """

        DETECTOR_SWITCH_STATE = PointTypeParameter(
            parameter_number=37,
            parameter_name='Detector Switch State',
            parameter_desc='Indicates the state of the detector switches. Valid values are: 0 = Reset; a reset has been received and the APM is expecting a detector switch transition. 1 = Counting; a detector switch transition has occurred and the APM is currently counting whole pulses. 2 = Complete; another detector switch transition has occurred, the Prove run is complete, and all values are stored until the next reset. 3 = Invalid, the accumulator does not contain good values. (This can be either at a power up or if communications are lost during a prove and the accumulators have reset to zero.)',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-3'
        )
        """
        Indicates the state of the detector switches. Valid values are: 0 = Reset; a reset has been received and the APM is expecting a detector switch transition. 1 =
        Counting; a detector switch transition has occurred and the APM is currently counting whole pulses. 2 = Complete; another detector switch transition has
        occurred, the Prove run is complete, and all values are stored until the next reset. 3 = Invalid, the accumulator does not contain good values. (This can be
        either at a power up or if communications are lost during a prove and the accumulators have reset to zero.)
        """

        FLOW_DIRECTION_PAIR_1 = PointTypeParameter(
            parameter_number=38,
            parameter_name='Flow Direction Pair 1',
            parameter_desc='Identifies the direction of flow, based on 180 degrees out of phase for first pair of pulses. Level B API check must be used (parameter #1). Valid values are 0 (Forward 180 degrees]} and 1 (Reverse 180 degrees]). Note: Forward/Reverse designators assume 90 degrees out of phase',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Identifies the direction of flow, based on 180 degrees out of phase for first pair of pulses. Level B API check must be used (parameter #1). Valid values are 0
        (Forward 180 degrees]} and 1 (Reverse 180 degrees]). Note: Forward/Reverse designators assume 90 degrees out of phase
        """

        FLOW_DIRECTION_PAIR_2 = PointTypeParameter(
            parameter_number=39,
            parameter_name='Flow Direction Pair 2',
            parameter_desc='Identified the direction of flow, based on 180 degrees out of phase for the second pair of pulses. Level B API check must be used (parameter #2). Valid values are 0 (Forward [< 180 degrees]) and 1 (Reverse 180 degrees]). Note: Forward/Reverse designators assume 90 degrees out of phase',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Identified the direction of flow, based on 180 degrees out of phase for the second pair of pulses. Level B API check must be used (parameter #2). Valid values
        are 0 (Forward [< 180 degrees]) and 1 (Reverse 180 degrees]). Note: Forward/Reverse designators assume 90 degrees out of phase
        """

        SOFTWARE_DETECTOR_SWITCH = PointTypeParameter(
            parameter_number=40,
            parameter_name='Software Detector Switch',
            parameter_desc='A 1 triggers the start/stop of counting pulses for a master meter or tank prove. Once the APM receives a trigger  it will set this back to Idle. Valid values are 0 (Idle) and 1 (Detector Switch Triggered). Note: This is valid only if you enable Software Detector Switch (parameter #42) is enabled.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        A 1 triggers the start/stop of counting pulses for a master meter or tank prove. Once the APM receives a trigger it will set this back to Idle. Valid values are
        0 (Idle) and 1 (Detector Switch Triggered). Note: This is valid only if you enable Software Detector Switch (parameter #42) is enabled.
        """

        DETECTOR_SWITCH_FILTER_TIME = PointTypeParameter(
            parameter_number=41,
            parameter_name='Detector Switch Filter Time',
            parameter_desc='Indicates, in milliseconds, the time allotted after a detector switch is triggered and before the next trigger is to occur. This provides a de-bounce filter for the detector switches.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 -> 1500'
        )
        """
        Indicates, in milliseconds, the time allotted after a detector switch is triggered and before the next trigger is to occur. This provides a de-bounce filter for
        the detector switches.
        """

        SOFTWARE_DETECTOR_SWITCH_ENABLED = PointTypeParameter(
            parameter_number=42,
            parameter_name='Software Detector Switch Enabled',
            parameter_desc='Displays whether a master meter or tank prover is to be proved. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Displays whether a master meter or tank prover is to be proved. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        PI4_PO_CONFIGURATION = PointTypeParameter(
            parameter_number=43,
            parameter_name='PI4/PO Configuration',
            parameter_desc='Gives the configuration of the PI4/PO terminal of the APM. Use a hardware switch to configure this. Valid values are 0 (Configured for a Pulse Input) and 1 (Configured for a Pulse Output).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Gives the configuration of the PI4/PO terminal of the APM. Use a hardware switch to configure this. Valid values are 0 (Configured for a Pulse Input) and 1
        (Configured for a Pulse Output).
        """

        PO_SCAN_PERIOD = PointTypeParameter(
            parameter_number=44,
            parameter_name='PO Scan Period',
            parameter_desc='Time period in seconds in which the parameters associated with the pulse output are evaluated. Valid values are 0 (Disabled). All other output pulses are at a 50% duty cycle',
            data_type=dt.FL,
            access='R/W',
            value_range='0, 0.500 43,200.0'
        )
        """
        Time period in seconds in which the parameters associated with the pulse output are evaluated. Valid values are 0 (Disabled). All other output pulses are at a
        50% duty cycle
        """

        INPUT_TLP = PointTypeParameter(
            parameter_number=45,
            parameter_name='Input TLP',
            parameter_desc='Input to be used in calculating output pulses',
            data_type=dt.TLP,
            access='R/W',
            value_range=''
        )
        """
        Input to be used in calculating output pulses
        """

        PO_INPUT_MODE = PointTypeParameter(
            parameter_number=46,
            parameter_name='PO Input Mode',
            parameter_desc='Gives the interpretation of the Input TLP (parameter #45). Valid values are 0 ( Input TLP is a rate) and 1 (Input TLP is an accumulation).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Gives the interpretation of the Input TLP (parameter #45). Valid values are 0 ( Input TLP is a rate) and 1 (Input TLP is an accumulation).
        """

        PO_ACCUMULATOR = PointTypeParameter(
            parameter_number=47,
            parameter_name='PO Accumulator',
            parameter_desc='Indicates the accumulated number of pulses sent out.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 -> 16,000,000'
        )
        """
        Indicates the accumulated number of pulses sent out.
        """

        OUTPUT_SCALING_VALUE = PointTypeParameter(
            parameter_number=48,
            parameter_name='Output Scaling Value',
            parameter_desc='Specifies the value that is applied to the accumulated pulse value.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any positive IEEE 754 float, except 0.0'
        )
        """
        Specifies the value that is applied to the accumulated pulse value.
        """

        BUFFER_WARNING_ALARM_SET_POINT = PointTypeParameter(
            parameter_number=49,
            parameter_name='Buffer Warning Alarm Set Point',
            parameter_desc='Indicates the maximum allowable number of buffered pulses before triggering the buffer warning alarm. Note: This value must be less than the maximum number of allowed buffered pulses (see parameter 50)',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 -> 65535'
        )
        """
        Indicates the maximum allowable number of buffered pulses before triggering the buffer warning alarm. Note: This value must be less than the maximum number of
        allowed buffered pulses (see parameter 50)
        """

        MAXIMUM_BUFFERED_PULSES = PointTypeParameter(
            parameter_number=50,
            parameter_name='Maximum Buffered Pulses',
            parameter_desc='Indicates the maximum number of allowed buffered pulses.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Indicates the maximum number of allowed buffered pulses.
        """

        MAXIMUM_PULSE_OUTPUT_FREQUENCY = PointTypeParameter(
            parameter_number=51,
            parameter_name='Maximum Pulse Output Frequency',
            parameter_desc='The maximum number of pulses per second which can be output by the PO (in Hz). If the calculated number of pulses exceeds this value then those pulses shall be placed in the buffer.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 -> 12000'
        )
        """
        The maximum number of pulses per second which can be output by the PO (in Hz). If the calculated number of pulses exceeds this value then those pulses shall be
        placed in the buffer.
        """

        PO_ALARMING = PointTypeParameter(
            parameter_number=52,
            parameter_name='PO Alarming',
            parameter_desc='Displays whether alarms may be generated and sent to the alarm log for a pulse output. Valid values are 0 (Alarming Disabled) and 1 (Alarming Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Displays whether alarms may be generated and sent to the alarm log for a pulse output. Valid values are 0 (Alarming Disabled) and 1 (Alarming Enabled).
        """

        PO_ALARM_CODE = PointTypeParameterBinary(
            parameter_number=53,
            parameter_name='PO Alarm Code',
            parameter_desc='Defines the alarms for a pulse output',
            data_type=dt.BIN,
            access='R/O',
            value_range='0-255',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Buffer Overrun Alarm',
                    bit_desc='Occurs when the number of buffered pulses has exceeded the max limit (parameter #50). Pulses are now being lost. Valid values are 0 (No Alarm Present) and 1 (Alarm Present).'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='Buffer Warning Alarm',
                    bit_desc='Occurs when the number of buffered pulses reaches the set point (parameter #49). Adjust the scaling factor so that pulses are not lost. Valid values are 0 (No Alarm Present) and 1 (Alarm Present).'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                )
            ]
        )
        """
        Defines the alarms for a pulse output
        """

        PO_SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=54,
            parameter_name='PO SRBX on Clear',
            parameter_desc='Indicates whether an SRBX alarm occurs if an alarm condition clears for a pulse output. Valid values are 0 (Disable SRBX on Clear) and 1 (Enable SRBX on Clear).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether an SRBX alarm occurs if an alarm condition clears for a pulse output. Valid values are 0 (Disable SRBX on Clear) and 1 (Enable SRBX on Clear).
        """

        PO_SRBX_ON_SET = PointTypeParameter(
            parameter_number=55,
            parameter_name='PO SRBX on Set',
            parameter_desc='Indicates whether an SRBX alarm occurs if an alarm condition occurs for a pulse output. Valid values are 0 (Disable SRBX on Set) and 1 (Enable SRBX on Set).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates whether an SRBX alarm occurs if an alarm condition occurs for a pulse output. Valid values are 0 (Disable SRBX on Set) and 1 (Enable SRBX on Set).
        """

        ALARMING = PointTypeParameter(
            parameter_number=56,
            parameter_name='Alarming',
            parameter_desc='If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        ALARM_CODE = PointTypeParameterBinary(
            parameter_number=57,
            parameter_name='Alarm Code',
            parameter_desc='Defines the alarms for the APM.',
            data_type=dt.BIN,
            access='R/O',
            value_range='0-255',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Point Fail Alarm',
                    bit_desc='If set, the APM is reporting a malfunction. If cleared, the APM is operating properly'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Not Used',
                    bit_desc='Not Used'
                )
            ]
        )
        """
        Defines the alarms for the APM.
        """

        SRBX_ON_SET = PointTypeParameter(
            parameter_number=58,
            parameter_name='SRBX on Set',
            parameter_desc='Indicates an SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (Disable SRBX on Set) and 1 (SRBX on Set Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates an SRBX alarm is desired if an alarm condition occurs. Valid values are 0 (Disable SRBX on Set) and 1 (SRBX on Set Enabled).
        """

        SRBX_ON_CLEAR = PointTypeParameter(
            parameter_number=59,
            parameter_name='SRBX on Clear',
            parameter_desc='Indicates an SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (Enable SRBX on Clear).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates an SRBX alarm is desired if an alarm condition clears. Valid values are 0 (SRBX on Clear Disabled) and 1 (Enable SRBX on Clear).
        """

        API_REVERSE_PULSE_COUNTS_PAIR_1 = PointTypeParameter(
            parameter_number=60,
            parameter_name='API Reverse Pulse Counts Pair 1',
            parameter_desc='Indicates the accumulated number of reverse pulses through the API level checks for pulse pair 1. The system updates this value only when the API Level Check Pair 1 (parameter #1) is set to either Level B or C.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-16,000,000'
        )
        """
        Indicates the accumulated number of reverse pulses through the API level checks for pulse pair 1. The system updates this value only when the API Level Check
        Pair 1 (parameter #1) is set to either Level B or C.
        """

        API_REVERSE_PULSE_COUNTS_PAIR_2 = PointTypeParameter(
            parameter_number=61,
            parameter_name='API Reverse Pulse Counts Pair 2',
            parameter_desc='Indicates the accumulated number of reverse pulses through the API level checks for pulse pair 2. The system updates this value only when the API Level Check Pair 2 (parameter #2) is set to either Level B or C.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 -> 16,000,000'
        )
        """
        Indicates the accumulated number of reverse pulses through the API level checks for pulse pair 2. The system updates this value only when the API Level Check
        Pair 2 (parameter #2) is set to either Level B or C.
        """

        PULSE_INPUT_1_TAG = PointTypeParameter(
            parameter_number=62,
            parameter_name='Pulse Input 1 Tag',
            parameter_desc='A 20 character identification name for a specific APM Pulse Input. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        A 20 character identification name for a specific APM Pulse Input. Values must be printable ASCII characters.
        """

        PULSE_INPUT_2_TAG = PointTypeParameter(
            parameter_number=63,
            parameter_name='Pulse Input 2 Tag',
            parameter_desc='A 20 character identification name for a specific APM Pulse Input. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        A 20 character identification name for a specific APM Pulse Input. Values must be printable ASCII characters.
        """

        PULSE_INPUT_3_TAG = PointTypeParameter(
            parameter_number=64,
            parameter_name='Pulse Input 3 Tag',
            parameter_desc='A 20 character identification name for a specific APM Pulse Input. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        A 20 character identification name for a specific APM Pulse Input. Values must be printable ASCII characters.
        """

        PULSE_INPUT_4_TAG = PointTypeParameter(
            parameter_number=65,
            parameter_name='Pulse Input 4 Tag',
            parameter_desc='A 20 character identification name for a specific APM Pulse Input. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        A 20 character identification name for a specific APM Pulse Input. Values must be printable ASCII characters.
        """

        METER_INTERPOLATION_TIMER_T1 = PointTypeParameter(
            parameter_number=66,
            parameter_name='Meter Interpolation Timer T1',
            parameter_desc='Indicates the time interval, in seconds, over which the whole flowmeter pulses were accumulated.',
            data_type=dt.FL,
            access='R/O',
            value_range='0 -> Any positive IEEE 754 float'
        )
        """
        Indicates the time interval, in seconds, over which the whole flowmeter pulses were accumulated.
        """

        METER_INTERPOLATION_TIMER_T2 = PointTypeParameter(
            parameter_number=67,
            parameter_name='Meter Interpolation Timer T2',
            parameter_desc='Indicates the time interval, in seconds, between the first and second detector switch being triggered.',
            data_type=dt.FL,
            access='R/O',
            value_range='0 Any positive IEEE 754 float'
        )
        """
        Indicates the time interval, in seconds, between the first and second detector switch being triggered.
        """

        MASTER_METER_INTERPOLATION_TIMER_T1 = PointTypeParameter(
            parameter_number=68,
            parameter_name='Master Meter Interpolation Timer T1',
            parameter_desc='Indicates the time interval, in seconds, over which the whole flowmeter pulses were accumulated on the master meter..',
            data_type=dt.FL,
            access='R/O',
            value_range='0 -> Any positive IEEE 754 float'
        )
        """
        Indicates the time interval, in seconds, over which the whole flowmeter pulses were accumulated on the master meter..
        """

        MASTER_METER_INTERPOLATION_TIMER_T2 = PointTypeParameter(
            parameter_number=69,
            parameter_name='Master Meter Interpolation Timer T2',
            parameter_desc='Indicates the time interval, in seconds, between the first and second detector switch being triggered for the master meter.',
            data_type=dt.FL,
            access='R/O',
            value_range='0 -> Any positive IEEE 754 float'
        )
        """
        Indicates the time interval, in seconds, between the first and second detector switch being triggered for the master meter.
        """

        API_FORWARD_PULSE_COUNTS_PAIR_1 = PointTypeParameter(
            parameter_number=70,
            parameter_name='API Forward Pulse Counts Pair 1',
            parameter_desc='Indicates the accumulated number of forward pulses through the API level checks for pulse pair 1. The system updates this value only when the API Level Check Pair 1 (parameter #1) is set to either Level B or C.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 -> 16,000,000'
        )
        """
        Indicates the accumulated number of forward pulses through the API level checks for pulse pair 1. The system updates this value only when the API Level Check
        Pair 1 (parameter #1) is set to either Level B or C.
        """

        API_FORWARD_PULSE_COUNTS_PAIR_2 = PointTypeParameter(
            parameter_number=71,
            parameter_name='API Forward Pulse Counts Pair 2',
            parameter_desc='Indicates the accumulated number of forward pulses through the API level checks for pulse pair 2. The system updates this value only when the API Level Check Pair 2 (parameter #2) is set to either Level B or C.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 -> 16,000,000'
        )
        """
        Indicates the accumulated number of forward pulses through the API level checks for pulse pair 2. The system updates this value only when the API Level Check
        Pair 2 (parameter #2) is set to either Level B or C.
        """

        API_TOTAL_ALARM_COUNT_PAIR_1 = PointTypeParameter(
            parameter_number=72,
            parameter_name='API Total Alarm Count Pair 1',
            parameter_desc='Indicates the total number of alarms on pair 1.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 -> 4,294,967,295'
        )
        """
        Indicates the total number of alarms on pair 1.
        """

        API_BAD_PULSE_THRESHOLD_PAIR_1 = PointTypeParameter(
            parameter_number=73,
            parameter_name='API Bad Pulse Threshold Pair 1',
            parameter_desc='Indicates the number of bad pulse pairs received before setting the API Pair 1 alarm status whe using API Level A.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 -> 4,294,967,295'
        )
        """
        Indicates the number of bad pulse pairs received before setting the API Pair 1 alarm status whe using API Level A.
        """

        API_GOOD_PULSE_THRESHOLD_PAIR_1 = PointTypeParameter(
            parameter_number=74,
            parameter_name='API Good Pulse Threshold Pair 1',
            parameter_desc='Indicates the number of good pulse pairs received before clearing the API Pair 1 alarm status when using API Level A.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 -> 4,294,967,295'
        )
        """
        Indicates the number of good pulse pairs received before clearing the API Pair 1 alarm status when using API Level A.
        """

        API_LOW_FREQUENCY_CUTOFF_PAIR_1 = PointTypeParameter(
            parameter_number=75,
            parameter_name='API Low Frequency Cutoff Pair 1',
            parameter_desc='Sets the frequency below which the Pair 1 alarm status no longer sets. Existing alarms clear if the Pair 1 bad pulse reset mode is set to 1 (Clear) or the number of good pulse pairs received below the threshold is greater than the API good pulse threshold for Pair 1. Note: Applies only when using API Level A.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any positive IEEE 754 float.'
        )
        """
        Sets the frequency below which the Pair 1 alarm status no longer sets. Existing alarms clear if the Pair 1 bad pulse reset mode is set to 1 (Clear) or the
        number of good pulse pairs received below the threshold is greater than the API good pulse threshold for Pair 1. Note: Applies only when using API Level A.
        """

        API_BAD_PULSE_RESET_MODE_PAIR_1 = PointTypeParameter(
            parameter_number=76,
            parameter_name='API Bad Pulse Reset Mode Pair 1',
            parameter_desc='Determines whether the system clears the number of bad pulse pairs (contributing towards the Pair 1 bad pulse threshold and the existing alarm bits) when the frequency falls below the low frequency cutoff for Pair 1. Valid values are 0 (Retain) and 1 (Clear). Note: Applies only when using API Level A.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Determines whether the system clears the number of bad pulse pairs (contributing towards the Pair 1 bad pulse threshold and the existing alarm bits) when the
        frequency falls below the low frequency cutoff for Pair 1. Valid values are 0 (Retain) and 1 (Clear). Note: Applies only when using API Level A.
        """

        MARKER_PULSE_ALARM_DEADBAND_PAIR_1 = PointTypeParameter(
            parameter_number=77,
            parameter_name='Marker Pulse Alarm Deadband Pair 1',
            parameter_desc='Indicates the allowed deviation of flow pulses from expected pulses at a marker pulse before setting the Marker Pulse Alarm bit. Note: Applies only when using Marker Pulse level checking.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Indicates the allowed deviation of flow pulses from expected pulses at a marker pulse before setting the Marker Pulse Alarm bit. Note: Applies only when using
        Marker Pulse level checking.
        """

        FLOW_PULSES_PER_MARKER_PULSE_PAIR_1 = PointTypeParameter(
            parameter_number=78,
            parameter_name='Flow Pulses per Marker Pulse Pair 1',
            parameter_desc='Indicates the number of flow pulses expected between each marker pulse. Note: Applies only when using Marker Pulse level checking.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 -> 65535'
        )
        """
        Indicates the number of flow pulses expected between each marker pulse. Note: Applies only when using Marker Pulse level checking.
        """

        FLOW_PULSE_ACCUMULATION_AT_MARKER_PULSE_PAIR_1 = PointTypeParameter(
            parameter_number=79,
            parameter_name='Flow Pulse Accumulation at Marker Pulse Pair 1',
            parameter_desc='Indicates the accumulation of flow pulses, updated when a marker pulse is received. Note: Applies only when using Marker Pulse level checking.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 -> 16,000,000'
        )
        """
        Indicates the accumulation of flow pulses, updated when a marker pulse is received. Note: Applies only when using Marker Pulse level checking.
        """

        FLOW_PULSE_DRIFT_FROM_EXPECTED_PAIR_1 = PointTypeParameter(
            parameter_number=80,
            parameter_name='Flow Pulse Drift from Expected Pair 1',
            parameter_desc='Indicates the drift from expected flow pulse value, updated when a marker pulse is received. Note: Applies only when using Marker Pulse level checking.',
            data_type=dt.INT32,
            access='R/O',
            value_range='-2,147,483,648-2,147,483,647'
        )
        """
        Indicates the drift from expected flow pulse value, updated when a marker pulse is received. Note: Applies only when using Marker Pulse level checking.
        """

        MARKER_PULSE_RESET_PAIR_1 = PointTypeParameter(
            parameter_number=81,
            parameter_name='Marker Pulse Reset Pair 1',
            parameter_desc='Resets the flow pulse accumulation and flow pulse drift for Pair 1. Valid values are 0 (Idle) and 1 (Reset). Note: Applies only when using Marker Pulse level checking.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Resets the flow pulse accumulation and flow pulse drift for Pair 1. Valid values are 0 (Idle) and 1 (Reset). Note: Applies only when using Marker Pulse level
        checking.
        """

        MARKER_PULSE_ALARM_DEADBAND_PAIR_2 = PointTypeParameter(
            parameter_number=82,
            parameter_name='Marker Pulse Alarm Deadband Pair 2',
            parameter_desc='Indicates the allowed deviation of flow pulses from expected pulses at a marker pulse before setting the Marker Pulse Alarm bit. Note: Applies only when using Marker Pulse level checking.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Indicates the allowed deviation of flow pulses from expected pulses at a marker pulse before setting the Marker Pulse Alarm bit. Note: Applies only when using
        Marker Pulse level checking.
        """

        FLOW_PULSES_PER_MARKER_PULSE_PAIR_2 = PointTypeParameter(
            parameter_number=83,
            parameter_name='Flow Pulses per Marker Pulse Pair 2',
            parameter_desc='Indicates the number of flow pulses expected between each marker pulse. Note: Applies only when using Marker Pulse level checking.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 -> 65535'
        )
        """
        Indicates the number of flow pulses expected between each marker pulse. Note: Applies only when using Marker Pulse level checking.
        """

        FLOW_PULSE_ACCUMULATION_AT_MARKER_PULSE_PAIR_2 = PointTypeParameter(
            parameter_number=84,
            parameter_name='Flow Pulse Accumulation at Marker Pulse Pair 2',
            parameter_desc='Indicates the accumulation of flow pulses, updated when a marker pulse is received. Note: Applies only when using Marker Pulse level checking.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 -> 16,000,000'
        )
        """
        Indicates the accumulation of flow pulses, updated when a marker pulse is received. Note: Applies only when using Marker Pulse level checking.
        """

        FLOW_PULSE_DRIFT_FROM_EXPECTED_PAIR_2 = PointTypeParameter(
            parameter_number=85,
            parameter_name='Flow Pulse Drift from Expected Pair 2',
            parameter_desc='Indicates the drift from expected flow pulse value, updated when a marker pulse is received. Note: Applies only when using Marker Pulse level checking.',
            data_type=dt.INT32,
            access='R/O',
            value_range='-2,147,483,648-2,147,483,647'
        )
        """
        Indicates the drift from expected flow pulse value, updated when a marker pulse is received. Note: Applies only when using Marker Pulse level checking.
        """

        MARKER_PULSE_RESET_PAIR_2 = PointTypeParameter(
            parameter_number=86,
            parameter_name='Marker Pulse Reset Pair 2',
            parameter_desc='Resets the flow pulse accumulation and flow pulse drift for Pair 1. Valid values are 0 (Idle) and 1 (Reset). Note: Applies only when using Marker Pulse level checking.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Resets the flow pulse accumulation and flow pulse drift for Pair 1. Valid values are 0 (Idle) and 1 (Reset). Note: Applies only when using Marker Pulse level
        checking.
        """

        CONTRACT_HOUR = PointTypeParameter(
            parameter_number=87,
            parameter_name='Contract Hour',
            parameter_desc='Hour, in 24-hour format, that represents the end of the day for the APM Pls.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 -> 0x7E for each ASCII character'
        )
        """
        Hour, in 24-hour format, that represents the end of the day for the APM Pls.
        """

        CURRENT_RATE_PERIOD = PointTypeParameter(
            parameter_number=88,
            parameter_name='Current Rate Period',
            parameter_desc='Determines the calculation of the Current Rate (parameters 105-108). Valid values are: 0 = EU/second 1 = EU/minute 2= EU/hour 3 EU/day',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-3'
        )
        """
        Determines the calculation of the Current Rate (parameters 105-108). Valid values are: 0 = EU/second 1 = EU/minute 2= EU/hour 3 EU/day
        """

        PULSE_INPUT_1_UNITS_TAG = PointTypeParameter(
            parameter_number=89,
            parameter_name='Pulse Input 1 Units Tag',
            parameter_desc='Defines the units P1 uses. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Defines the units P1 uses. Values must be printable ASCII characters.
        """

        PULSE_INPUT_2UNITS_TAG = PointTypeParameter(
            parameter_number=90,
            parameter_name='Pulse Input 2Units Tag',
            parameter_desc='Defines the units P2 uses. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Defines the units P2 uses. Values must be printable ASCII characters.
        """

        PULSE_INPUT_3_UNITS_TAG = PointTypeParameter(
            parameter_number=91,
            parameter_name='Pulse Input 3 Units Tag',
            parameter_desc='Defines the units P3 uses. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Defines the units P3 uses. Values must be printable ASCII characters.
        """

        PULSE_INPUT_4UNITS_TAG = PointTypeParameter(
            parameter_number=92,
            parameter_name='Pulse Input 4Units Tag',
            parameter_desc='Defines the units P4 uses. Values must be printable ASCII characters.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Defines the units P4 uses. Values must be printable ASCII characters.
        """

        PULSE_INPUT_1_PULSES_FOR_DAY = PointTypeParameter(
            parameter_number=93,
            parameter_name='Pulse Input 1 Pulses for Day',
            parameter_desc='Total number of pulses P1 has received for the contract day.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-4,294,967,295'
        )
        """
        Total number of pulses P1 has received for the contract day.
        """

        PULSE_INPUT_2_PULSES_FOR_DAY = PointTypeParameter(
            parameter_number=94,
            parameter_name='Pulse Input 2 Pulses for Day',
            parameter_desc='Total number of pulses P2 has received for the contract day.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-4,294,967,295'
        )
        """
        Total number of pulses P2 has received for the contract day.
        """

        PULSE_INPUT_3_PULSES_FOR_DAY = PointTypeParameter(
            parameter_number=95,
            parameter_name='Pulse Input 3 Pulses for Day',
            parameter_desc='Total number of pulses P3 has received for the contract day.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-4,294,967,295'
        )
        """
        Total number of pulses P3 has received for the contract day.
        """

        PULSE_INPUT_4_PULSES_FOR_DAY = PointTypeParameter(
            parameter_number=96,
            parameter_name='Pulse Input 4 Pulses for Day',
            parameter_desc='Total number of pulses P4 has received for the contract day.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-4,294,967,295'
        )
        """
        Total number of pulses P4 has received for the contract day.
        """

        PULSE_INPUT_1_EU_TODAY = PointTypeParameter(
            parameter_number=97,
            parameter_name='Pulse Input 1 EU Today',
            parameter_desc='Accumulated value foir Pulse 1 in Engineering Units for this contract hou. Calculated using the conversion value for this PI and based on Pulses/EU',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Accumulated value foir Pulse 1 in Engineering Units for this contract hou. Calculated using the conversion value for this PI and based on Pulses/EU
        """

        PULSE_INPUT_2_EU_TODAY = PointTypeParameter(
            parameter_number=98,
            parameter_name='Pulse Input 2 EU Today',
            parameter_desc='Accumulated value foir Pulse 2 in Engineering Units for this contract hou. Calculated using the conversion value for this PI and based on Pulses/EU',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Accumulated value foir Pulse 2 in Engineering Units for this contract hou. Calculated using the conversion value for this PI and based on Pulses/EU
        """

        PULSE_INPUT_3_EU_TODAY = PointTypeParameter(
            parameter_number=99,
            parameter_name='Pulse Input 3 EU Today',
            parameter_desc='Accumulated value foir Pulse 3 in Engineering Units for this contract hou. Calculated using the conversion value for this PI and based on Pulses/EU',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Accumulated value foir Pulse 3 in Engineering Units for this contract hou. Calculated using the conversion value for this PI and based on Pulses/EU
        """

        PULSE_INPUT_4_EU_TODAY = PointTypeParameter(
            parameter_number=100,
            parameter_name='Pulse Input 4 EU Today',
            parameter_desc='Accumulated value foir Pulse 4 in Engineering Units for this contract hou. Calculated using the conversion value for this PI and based on Pulses/EU',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Accumulated value foir Pulse 4 in Engineering Units for this contract hou. Calculated using the conversion value for this PI and based on Pulses/EU
        """

        PULSE_INPUT_1_EU_YESTERDAY = PointTypeParameter(
            parameter_number=101,
            parameter_name='Pulse Input 1 EU Yesterday',
            parameter_desc='Previous contract days EU total for PI1.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Previous contract days EU total for PI1.
        """

        PULSE_INPUT_2_EU_YESTERDAY = PointTypeParameter(
            parameter_number=102,
            parameter_name='Pulse Input 2 EU Yesterday',
            parameter_desc='Previous contract days EU total for PI2.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Previous contract days EU total for PI2.
        """

        PULSE_INPUT_3_EU_YESTERDAY = PointTypeParameter(
            parameter_number=103,
            parameter_name='Pulse Input 3 EU Yesterday',
            parameter_desc='Previous contract days EU total for PI3.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Previous contract days EU total for PI3.
        """

        PULSE_INPUT_4_EU_YESTERDAY = PointTypeParameter(
            parameter_number=104,
            parameter_name='Pulse Input 4 EU Yesterday',
            parameter_desc='Previous contract days EU total for PI4.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Previous contract days EU total for PI4.
        """

        PULSE_INPUT_1_EU_RATE = PointTypeParameter(
            parameter_number=105,
            parameter_name='Pulse Input 1 EU Rate',
            parameter_desc='Calculated rate of the pulses for PI1. Based on the EUP value and the Rate Pieor for the module (parameter 88).',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Calculated rate of the pulses for PI1. Based on the EUP value and the Rate Pieor for the module (parameter 88).
        """

        PULSE_INPUT_2_EU_RATE = PointTypeParameter(
            parameter_number=106,
            parameter_name='Pulse Input 2 EU Rate',
            parameter_desc='Calculated rate of the pulses for PI2. Based on the EUP value and the Rate Pieor for the module (parameter 88).',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Calculated rate of the pulses for PI2. Based on the EUP value and the Rate Pieor for the module (parameter 88).
        """

        PULSE_INPUT_3_EU_RATE = PointTypeParameter(
            parameter_number=107,
            parameter_name='Pulse Input 3 EU Rate',
            parameter_desc='Calculated rate of the pulses for PI3. Based on the EUP value and the Rate Pieor for the module (parameter 88).',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Calculated rate of the pulses for PI3. Based on the EUP value and the Rate Pieor for the module (parameter 88).
        """

        PULSE_INPUT_4_EU_RATE = PointTypeParameter(
            parameter_number=108,
            parameter_name='Pulse Input 4 EU Rate',
            parameter_desc='Calculated rate of the pulses for PI4. Based on the EUP value and the Rate Pieor for the module (parameter 88).',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Calculated rate of the pulses for PI4. Based on the EUP value and the Rate Pieor for the module (parameter 88).
        """

        PULSE_INPUT_1_CONVERSION_VALUE = PointTypeParameter(
            parameter_number=109,
            parameter_name='Pulse Input 1 Conversion Value',
            parameter_desc='Used to calculate the units of the EU values for PI1.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float except 0.0'
        )
        """
        Used to calculate the units of the EU values for PI1.
        """

        PULSE_INPUT_2_CONVERSION_VALUE = PointTypeParameter(
            parameter_number=110,
            parameter_name='Pulse Input 2 Conversion Value',
            parameter_desc='Used to calculate the units of the EU values for PI2.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float except 0.0'
        )
        """
        Used to calculate the units of the EU values for PI2.
        """

        PULSE_INPUT_3_CONVERSION_VALUE = PointTypeParameter(
            parameter_number=111,
            parameter_name='Pulse Input 3 Conversion Value',
            parameter_desc='Used to calculate the units of the EU values for PI3.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float except 0.0'
        )
        """
        Used to calculate the units of the EU values for PI3.
        """

        PULSE_INPUT_4_CONVERSION_VALUE = PointTypeParameter(
            parameter_number=112,
            parameter_name='Pulse Input 4 Conversion Value',
            parameter_desc='Used to calculate the units of the EU values for PI4.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float except 0.0'
        )
        """
        Used to calculate the units of the EU values for PI4.
        """





class HISTORY_SEGMENT_11_POINT_CONFIGURATION(PointType):
    """History Segment 11 Point Configuration"""

    point_type_number: int = 142
    """Point Type ID"""

    point_type_desc: str = 'History Segment 11 Point Configuration'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Same value as the Point Tag of the Point Type in which the history log resides.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Same value as the Point Tag of the Point Type in which the history log resides.
        """

        PARAMETER_DESCRIPTION = PointTypeParameter(
            parameter_number=1,
            parameter_name='Parameter Description',
            parameter_desc='User-supplied text string used to identify the parameter being logged in the history point.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        User-supplied text string used to identify the parameter being logged in the history point.
        """

        HISTORY_PONT_LOG = PointTypeParameter(
            parameter_number=2,
            parameter_name='History Pont Log',
            parameter_desc='TLP points to a value to be archived by history.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any parameter may be logged except parameters of Data Type TLP or AC'
        )
        """
        TLP points to a value to be archived by history.
        """

        ARCHIVE_TYPE = PointTypeParameter(
            parameter_number=3,
            parameter_name='Archive Type',
            parameter_desc='See note 1',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 1'
        )
        """
        See note 1
        """

        AVERAGING_RATE_TYPE = PointTypeParameter(
            parameter_number=4,
            parameter_name='Averaging/Rate Type',
            parameter_desc='See note 2',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 2'
        )
        """
        See note 2
        """

        CURRENT_VALUE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Current Value',
            parameter_desc='Current value of parameter being logged.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current value of parameter being logged.
        """

        LAST_DAILY_VALUE = PointTypeParameter(
            parameter_number=6,
            parameter_name='Last Daily Value',
            parameter_desc='Value logged to the daily archive at the last contract hour.',
            data_type=dt.FL,
            access='R/)',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value logged to the daily archive at the last contract hour.
        """

        TODAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=7,
            parameter_name='Today Minimum Time',
            parameter_desc='Time at which the minimum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0 -> 4294967296'
        )
        """
        Time at which the minimum value was reached today.
        """

        TODAY_MINIMIUM_VALUE = PointTypeParameter(
            parameter_number=8,
            parameter_name='Today Minimium Value',
            parameter_desc='Minimum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed today.
        """

        TODAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=9,
            parameter_name='Today Maximum Time',
            parameter_desc='Time at which the maximum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0 -> 4294967296'
        )
        """
        Time at which the maximum value was reached today.
        """

        TODAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Today Maximum Value',
            parameter_desc='Maximum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed today.
        """

        YESTERDAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=11,
            parameter_name='Yesterday Minimum Time',
            parameter_desc='Time at which the minimum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0 -> 4294967296'
        )
        """
        Time at which the minimum value was reached yesterday.
        """

        YESTERDAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Yesterday Minimum Value',
            parameter_desc='Minimum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed yesterday.
        """

        YESTERDAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=13,
            parameter_name='Yesterday Maximum Time',
            parameter_desc='Time at which the maximum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0 -> 4294967296'
        )
        """
        Time at which the maximum value was reached yesterday.
        """

        YESTERDAY_MAXIMUMN_VALUE = PointTypeParameter(
            parameter_number=14,
            parameter_name='Yesterday Maximumn Value',
            parameter_desc='Maximum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed yesterday.
        """





class HISTORY_SEGMENT_12_POINT_CONFIGURATION(PointType):
    """History Segment 12 Point Configuration"""

    point_type_number: int = 143
    """Point Type ID"""

    point_type_desc: str = 'History Segment 12 Point Configuration'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='Same value as the Point Tag of the Point Type in which the history log resides.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Same value as the Point Tag of the Point Type in which the history log resides.
        """

        PARAMETER_DESCRIPTION = PointTypeParameter(
            parameter_number=1,
            parameter_name='Parameter Description',
            parameter_desc='User-supplied text string used to identify the parameter being logged in the history point.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 -> 0x7E for each byte'
        )
        """
        User-supplied text string used to identify the parameter being logged in the history point.
        """

        HISTORY_PONT_LOG = PointTypeParameter(
            parameter_number=2,
            parameter_name='History Pont Log',
            parameter_desc='TLP points to a value to be archived by history.',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any parameter may be logged except parameters of Data Type TLP or AC'
        )
        """
        TLP points to a value to be archived by history.
        """

        ARCHIVE_TYPE = PointTypeParameter(
            parameter_number=3,
            parameter_name='Archive Type',
            parameter_desc='This parameter defines how a data point is archived to history. Valid values are: 0 = None (History point not defined) 1 = User C/C++ Data (Ver. 1.20) 2 = User C/C++ Time (Ver. 1.20) 65 = FST Data History 67 = FST Time 128 = Average 129 = Accumulate 130 = Current Value 134 = Totalize',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 1'
        )
        """
        This parameter defines how a data point is archived to history. Valid values are: 0 = None (History point not defined) 1 = User C/C++ Data (Ver. 1.20) 2 = User
        C/C++ Time (Ver. 1.20) 65 = FST Data History 67 = FST Time 128 = Average 129 = Accumulate 130 = Current Value 134 = Totalize
        """

        AVERAGING_RATE_TYPE = PointTypeParameter(
            parameter_number=4,
            parameter_name='Averaging/Rate Type',
            parameter_desc='This field is used in conjunction with the Archive Type parameter to further define how history data is archived. This parameter defines the rate of accumulation of the averaging technique. Accumulation Rate (Archive Type = 129): 10 = Per Second 11 = Per Minute 12 = Per Hour 13 = Per Day Averaging Type (Archive Type = 128): 0 = None (History point not defined) 1 = Flow Dependent Time Weighted Linear 2 = Flow Dependent Time Weighted Formulaic 3 = Flow Weighted Linear 4 = Flow Weighted Formulaic 5 = Linear Averaging 6 = User Weighted Averaging (Version 3.60)',
            data_type=dt.UINT8,
            access='R/W',
            value_range='See note 2'
        )
        """
        This field is used in conjunction with the Archive Type parameter to further define how history data is archived. This parameter defines the rate of
        accumulation of the averaging technique. Accumulation Rate (Archive Type = 129): 10 = Per Second 11 = Per Minute 12 = Per Hour 13 = Per Day Averaging Type
        (Archive Type = 128): 0 = None (History point not defined) 1 = Flow Dependent Time Weighted Linear 2 = Flow Dependent Time Weighted Formulaic 3 = Flow Weighted
        Linear 4 = Flow Weighted Formulaic 5 = Linear Averaging 6 = User Weighted Averaging (Version 3.60)
        """

        CURRENT_VALUE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Current Value',
            parameter_desc='Current value of parameter being logged.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current value of parameter being logged.
        """

        LAST_DAILY_VALUE = PointTypeParameter(
            parameter_number=6,
            parameter_name='Last Daily Value',
            parameter_desc='Value logged to the daily archive at the last contract hour.',
            data_type=dt.FL,
            access='R/)',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value logged to the daily archive at the last contract hour.
        """

        TODAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=7,
            parameter_name='Today Minimum Time',
            parameter_desc='Time at which the minimum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0 -> 4294967296'
        )
        """
        Time at which the minimum value was reached today.
        """

        TODAY_MINIMIUM_VALUE = PointTypeParameter(
            parameter_number=8,
            parameter_name='Today Minimium Value',
            parameter_desc='Minimum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed today.
        """

        TODAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=9,
            parameter_name='Today Maximum Time',
            parameter_desc='Time at which the maximum value was reached today.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0 -> 4294967296'
        )
        """
        Time at which the maximum value was reached today.
        """

        TODAY_MAXIMUM_VALUE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Today Maximum Value',
            parameter_desc='Maximum value of logged parameter observed today.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed today.
        """

        YESTERDAY_MINIMUM_TIME = PointTypeParameter(
            parameter_number=11,
            parameter_name='Yesterday Minimum Time',
            parameter_desc='Time at which the minimum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0 -> 4294967296'
        )
        """
        Time at which the minimum value was reached yesterday.
        """

        YESTERDAY_MINIMUM_VALUE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Yesterday Minimum Value',
            parameter_desc='Minimum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Minimum value of logged parameter observed yesterday.
        """

        YESTERDAY_MAXIMUM_TIME = PointTypeParameter(
            parameter_number=13,
            parameter_name='Yesterday Maximum Time',
            parameter_desc='Time at which the maximum value was reached yesterday.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0 -> 4294967296'
        )
        """
        Time at which the maximum value was reached yesterday.
        """

        YESTERDAY_MAXIMUMN_VALUE = PointTypeParameter(
            parameter_number=14,
            parameter_name='Yesterday Maximumn Value',
            parameter_desc='Maximum value of logged parameter observed yesterday.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Maximum value of logged parameter observed yesterday.
        """





class TRANSACTIONAL_HISTORY_CONFIG(PointType):
    """Transactional History Configuration Point Type"""

    point_type_number: int = 144
    """Point Type ID"""

    point_type_desc: str = 'Transactional History Configuration Point Type'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        NUM_TRANSACTIONS_ALLOCATED = PointTypeParameter(
            parameter_number=0,
            parameter_name='Num Transactions Allocated',
            parameter_desc='The tag for the remote RTU',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 [max based on memory usage]'
        )
        """
        The tag for the remote RTU
        """

        NUM_TRANSACTIONS_STORED = PointTypeParameter(
            parameter_number=1,
            parameter_name='Num Transactions Stored',
            parameter_desc='Unique ID for the remote RTU',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0-4,294,967,296'
        )
        """
        Unique ID for the remote RTU
        """

        SPACE_RESERVED = PointTypeParameter(
            parameter_number=2,
            parameter_name='Space Reserved',
            parameter_desc='Logical number of the commissioned list poilnt type assigned to this remote RTU',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-12 or 0-24 (based upon the network model, parm 139,x,15)'
        )
        """
        Logical number of the commissioned list poilnt type assigned to this remote RTU
        """

        TOTAL_SPACE_REMAINING = PointTypeParameter(
            parameter_number=3,
            parameter_name='Total Space Remaining',
            parameter_desc='Indicates the space remaining for all transactions. This value can be negative if more data is allocated than space available. However, logical cannot be locked when this value is negative.',
            data_type=dt.INT32,
            access='R/O',
            value_range='-2,147,483,6480-105,480'
        )
        """
        Indicates the space remaining for all transactions. This value can be negative if more data is allocated than space available. However, logical cannot be locked
        when this value is negative.
        """

        OVERWRITE_SETTING = PointTypeParameter(
            parameter_number=4,
            parameter_name='Overwrite Setting',
            parameter_desc='Indicates how the system acts when the transaction limit is reached.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates how the system acts when the transaction limit is reached.
        """

        RESET_SWITCH = PointTypeParameter(
            parameter_number=5,
            parameter_name='Reset Switch',
            parameter_desc='Clears all transactions for this logical.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Clears all transactions for this logical.
        """

        LOCK_SETTINGS = PointTypeParameter(
            parameter_number=6,
            parameter_name='Lock Settings',
            parameter_desc='Indicates the lock setting for the logical. All transactions are cleared for this logical on unlock. Valid values are 0 (Unlocked) and 1 (Locked).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates the lock setting for the logical. All transactions are cleared for this logical on unlock. Valid values are 0 (Unlocked) and 1 (Locked).
        """

        LAST_TRANSACTION_LOGGED = PointTypeParameter(
            parameter_number=7,
            parameter_name='Last Transaction Logged',
            parameter_desc='Last transaction number logged',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0-65535'
        )
        """
        Last transaction number logged
        """

        STATUS = PointTypeParameter(
            parameter_number=8,
            parameter_name='Status',
            parameter_desc='Indicates the status of the last action on this logical. Valid values are: 0 = No Error 1 = Invalid CRC when retrieving data 2 = Error getting transaction data to log 3 = Segment full',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-3'
        )
        """
        Indicates the status of the last action on this logical. Valid values are: 0 = No Error 1 = Invalid CRC when retrieving data 2 = Error getting transaction data
        to log 3 = Segment full
        """





class TRANSACTIONAL_HISTORY_POINT_CONFIG(PointType):
    """Transactional History Point Configuration Point Type"""

    point_type_number: int = 145
    """Point Type ID"""

    point_type_desc: str = 'Transactional History Point Configuration Point Type'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        WRITE_TRIGGER = PointTypeParameter(
            parameter_number=0,
            parameter_name='Write Trigger',
            parameter_desc='Indicates the write trigger for a transaction. Valid values are 0 (Idle) and 1 (write transaction).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates the write trigger for a transaction. Valid values are 0 (Idle) and 1 (write transaction).
        """

        TRANSACTION_DESCRIPTION = PointTypeParameter(
            parameter_number=1,
            parameter_name='Transaction Description',
            parameter_desc='Transaction description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Transaction description (can be changed without changing transactional history)
        """

        POINT_DESCRIPTION_1 = PointTypeParameter(
            parameter_number=2,
            parameter_name='Point Description 1',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_1 = PointTypeParameter(
            parameter_number=3,
            parameter_name='Point to Log 1',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_2 = PointTypeParameter(
            parameter_number=4,
            parameter_name='Point Description 2',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_2 = PointTypeParameter(
            parameter_number=5,
            parameter_name='Point to Log 2',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_3 = PointTypeParameter(
            parameter_number=6,
            parameter_name='Point Description 3',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_3 = PointTypeParameter(
            parameter_number=7,
            parameter_name='Point to Log 3',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_4 = PointTypeParameter(
            parameter_number=8,
            parameter_name='Point Description 4',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_4 = PointTypeParameter(
            parameter_number=9,
            parameter_name='Point to Log 4',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_5 = PointTypeParameter(
            parameter_number=10,
            parameter_name='Point Description 5',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_5 = PointTypeParameter(
            parameter_number=11,
            parameter_name='Point to Log 5',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_6 = PointTypeParameter(
            parameter_number=12,
            parameter_name='Point Description 6',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_6 = PointTypeParameter(
            parameter_number=13,
            parameter_name='Point to Log 6',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_7 = PointTypeParameter(
            parameter_number=14,
            parameter_name='Point Description 7',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_7 = PointTypeParameter(
            parameter_number=15,
            parameter_name='Point to Log 7',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_8 = PointTypeParameter(
            parameter_number=16,
            parameter_name='Point Description 8',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_8 = PointTypeParameter(
            parameter_number=17,
            parameter_name='Point to Log 8',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_9 = PointTypeParameter(
            parameter_number=18,
            parameter_name='Point Description 9',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_9 = PointTypeParameter(
            parameter_number=19,
            parameter_name='Point to Log 9',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_10 = PointTypeParameter(
            parameter_number=20,
            parameter_name='Point Description 10',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_10 = PointTypeParameter(
            parameter_number=21,
            parameter_name='Point to Log 10',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_11 = PointTypeParameter(
            parameter_number=22,
            parameter_name='Point Description 11',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_11 = PointTypeParameter(
            parameter_number=23,
            parameter_name='Point to Log 11',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_12 = PointTypeParameter(
            parameter_number=24,
            parameter_name='Point Description 12',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_12 = PointTypeParameter(
            parameter_number=25,
            parameter_name='Point to Log 12',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_13 = PointTypeParameter(
            parameter_number=26,
            parameter_name='Point Description 13',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_13 = PointTypeParameter(
            parameter_number=27,
            parameter_name='Point to Log 13',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_14 = PointTypeParameter(
            parameter_number=28,
            parameter_name='Point Description 14',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_14 = PointTypeParameter(
            parameter_number=29,
            parameter_name='Point to Log 14',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_15 = PointTypeParameter(
            parameter_number=30,
            parameter_name='Point Description 15',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_15 = PointTypeParameter(
            parameter_number=31,
            parameter_name='Point to Log 15',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_16 = PointTypeParameter(
            parameter_number=32,
            parameter_name='Point Description 16',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_16 = PointTypeParameter(
            parameter_number=33,
            parameter_name='Point to Log 16',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_17 = PointTypeParameter(
            parameter_number=34,
            parameter_name='Point Description 17',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_17 = PointTypeParameter(
            parameter_number=35,
            parameter_name='Point to Log 17',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_18 = PointTypeParameter(
            parameter_number=36,
            parameter_name='Point Description 18',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_18 = PointTypeParameter(
            parameter_number=37,
            parameter_name='Point to Log 18',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_19 = PointTypeParameter(
            parameter_number=38,
            parameter_name='Point Description 19',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_19 = PointTypeParameter(
            parameter_number=39,
            parameter_name='Point to Log 19',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_20 = PointTypeParameter(
            parameter_number=40,
            parameter_name='Point Description 20',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_20 = PointTypeParameter(
            parameter_number=41,
            parameter_name='Point to Log 20',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_21 = PointTypeParameter(
            parameter_number=42,
            parameter_name='Point Description 21',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_21 = PointTypeParameter(
            parameter_number=43,
            parameter_name='Point to Log 21',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_22 = PointTypeParameter(
            parameter_number=44,
            parameter_name='Point Description 22',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_22 = PointTypeParameter(
            parameter_number=45,
            parameter_name='Point to Log 22',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_23 = PointTypeParameter(
            parameter_number=46,
            parameter_name='Point Description 23',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_23 = PointTypeParameter(
            parameter_number=47,
            parameter_name='Point to Log 23',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_24 = PointTypeParameter(
            parameter_number=48,
            parameter_name='Point Description 24',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_24 = PointTypeParameter(
            parameter_number=49,
            parameter_name='Point to Log 24',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_25 = PointTypeParameter(
            parameter_number=50,
            parameter_name='Point Description 25',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_25 = PointTypeParameter(
            parameter_number=51,
            parameter_name='Point to Log 25',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_26 = PointTypeParameter(
            parameter_number=52,
            parameter_name='Point Description 26',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_26 = PointTypeParameter(
            parameter_number=53,
            parameter_name='Point to Log 26',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_27 = PointTypeParameter(
            parameter_number=54,
            parameter_name='Point Description 27',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_27 = PointTypeParameter(
            parameter_number=55,
            parameter_name='Point to Log 27',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_28 = PointTypeParameter(
            parameter_number=56,
            parameter_name='Point Description 28',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_28 = PointTypeParameter(
            parameter_number=57,
            parameter_name='Point to Log 28',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_29 = PointTypeParameter(
            parameter_number=58,
            parameter_name='Point Description 29',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_29 = PointTypeParameter(
            parameter_number=59,
            parameter_name='Point to Log 29',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_30 = PointTypeParameter(
            parameter_number=60,
            parameter_name='Point Description 30',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_30 = PointTypeParameter(
            parameter_number=61,
            parameter_name='Point to Log 30',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_31 = PointTypeParameter(
            parameter_number=62,
            parameter_name='Point Description 31',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_31 = PointTypeParameter(
            parameter_number=63,
            parameter_name='Point to Log 31',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_32 = PointTypeParameter(
            parameter_number=64,
            parameter_name='Point Description 32',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_32 = PointTypeParameter(
            parameter_number=65,
            parameter_name='Point to Log 32',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_33 = PointTypeParameter(
            parameter_number=66,
            parameter_name='Point Description 33',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_33 = PointTypeParameter(
            parameter_number=67,
            parameter_name='Point to Log 33',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_34 = PointTypeParameter(
            parameter_number=68,
            parameter_name='Point Description 34',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_34 = PointTypeParameter(
            parameter_number=69,
            parameter_name='Point to Log 34',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_35 = PointTypeParameter(
            parameter_number=70,
            parameter_name='Point Description 35',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_35 = PointTypeParameter(
            parameter_number=71,
            parameter_name='Point to Log 35',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_36 = PointTypeParameter(
            parameter_number=72,
            parameter_name='Point Description 36',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_36 = PointTypeParameter(
            parameter_number=73,
            parameter_name='Point to Log 36',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_37 = PointTypeParameter(
            parameter_number=74,
            parameter_name='Point Description 37',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_37 = PointTypeParameter(
            parameter_number=75,
            parameter_name='Point to Log 37',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_38 = PointTypeParameter(
            parameter_number=76,
            parameter_name='Point Description 38',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_38 = PointTypeParameter(
            parameter_number=77,
            parameter_name='Point to Log 38',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_39 = PointTypeParameter(
            parameter_number=78,
            parameter_name='Point Description 39',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_39 = PointTypeParameter(
            parameter_number=79,
            parameter_name='Point to Log 39',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_40 = PointTypeParameter(
            parameter_number=80,
            parameter_name='Point Description 40',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_40 = PointTypeParameter(
            parameter_number=81,
            parameter_name='Point to Log 40',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_41 = PointTypeParameter(
            parameter_number=82,
            parameter_name='Point Description 41',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_41 = PointTypeParameter(
            parameter_number=83,
            parameter_name='Point to Log 41',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_42 = PointTypeParameter(
            parameter_number=84,
            parameter_name='Point Description 42',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_42 = PointTypeParameter(
            parameter_number=85,
            parameter_name='Point to Log 42',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_43 = PointTypeParameter(
            parameter_number=86,
            parameter_name='Point Description 43',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_43 = PointTypeParameter(
            parameter_number=87,
            parameter_name='Point to Log 43',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_44 = PointTypeParameter(
            parameter_number=88,
            parameter_name='Point Description 44',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_44 = PointTypeParameter(
            parameter_number=89,
            parameter_name='Point to Log 44',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_45 = PointTypeParameter(
            parameter_number=90,
            parameter_name='Point Description 45',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_45 = PointTypeParameter(
            parameter_number=91,
            parameter_name='Point to Log 45',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_46 = PointTypeParameter(
            parameter_number=92,
            parameter_name='Point Description 46',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_46 = PointTypeParameter(
            parameter_number=93,
            parameter_name='Point to Log 46',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_47 = PointTypeParameter(
            parameter_number=94,
            parameter_name='Point Description 47',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_47 = PointTypeParameter(
            parameter_number=95,
            parameter_name='Point to Log 47',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_48 = PointTypeParameter(
            parameter_number=96,
            parameter_name='Point Description 48',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_48 = PointTypeParameter(
            parameter_number=97,
            parameter_name='Point to Log 48',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_49 = PointTypeParameter(
            parameter_number=98,
            parameter_name='Point Description 49',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_49 = PointTypeParameter(
            parameter_number=99,
            parameter_name='Point to Log 49',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_50 = PointTypeParameter(
            parameter_number=100,
            parameter_name='Point Description 50',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_50 = PointTypeParameter(
            parameter_number=101,
            parameter_name='Point to Log 50',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_51 = PointTypeParameter(
            parameter_number=102,
            parameter_name='Point Description 51',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_51 = PointTypeParameter(
            parameter_number=103,
            parameter_name='Point to Log 51',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_52 = PointTypeParameter(
            parameter_number=104,
            parameter_name='Point Description 52',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_52 = PointTypeParameter(
            parameter_number=105,
            parameter_name='Point to Log 52',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_53 = PointTypeParameter(
            parameter_number=106,
            parameter_name='Point Description 53',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_53 = PointTypeParameter(
            parameter_number=107,
            parameter_name='Point to Log 53',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_54 = PointTypeParameter(
            parameter_number=108,
            parameter_name='Point Description 54',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_54 = PointTypeParameter(
            parameter_number=109,
            parameter_name='Point to Log 54',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_55 = PointTypeParameter(
            parameter_number=110,
            parameter_name='Point Description 55',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_55 = PointTypeParameter(
            parameter_number=111,
            parameter_name='Point to Log 55',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_56 = PointTypeParameter(
            parameter_number=112,
            parameter_name='Point Description 56',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_56 = PointTypeParameter(
            parameter_number=113,
            parameter_name='Point to Log 56',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_57 = PointTypeParameter(
            parameter_number=114,
            parameter_name='Point Description 57',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_57 = PointTypeParameter(
            parameter_number=115,
            parameter_name='Point to Log 57',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_58 = PointTypeParameter(
            parameter_number=116,
            parameter_name='Point Description 58',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_58 = PointTypeParameter(
            parameter_number=117,
            parameter_name='Point to Log 58',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_59 = PointTypeParameter(
            parameter_number=118,
            parameter_name='Point Description 59',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_59 = PointTypeParameter(
            parameter_number=119,
            parameter_name='Point to Log 59',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_60 = PointTypeParameter(
            parameter_number=120,
            parameter_name='Point Description 60',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_60 = PointTypeParameter(
            parameter_number=121,
            parameter_name='Point to Log 60',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_61 = PointTypeParameter(
            parameter_number=122,
            parameter_name='Point Description 61',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_61 = PointTypeParameter(
            parameter_number=123,
            parameter_name='Point to Log 61',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_62 = PointTypeParameter(
            parameter_number=124,
            parameter_name='Point Description 62',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_62 = PointTypeParameter(
            parameter_number=125,
            parameter_name='Point to Log 62',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_63 = PointTypeParameter(
            parameter_number=126,
            parameter_name='Point Description 63',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_63 = PointTypeParameter(
            parameter_number=127,
            parameter_name='Point to Log 63',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_64 = PointTypeParameter(
            parameter_number=128,
            parameter_name='Point Description 64',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_64 = PointTypeParameter(
            parameter_number=129,
            parameter_name='Point to Log 64',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_65 = PointTypeParameter(
            parameter_number=130,
            parameter_name='Point Description 65',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_65 = PointTypeParameter(
            parameter_number=131,
            parameter_name='Point to Log 65',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_66 = PointTypeParameter(
            parameter_number=132,
            parameter_name='Point Description 66',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_66 = PointTypeParameter(
            parameter_number=133,
            parameter_name='Point to Log 66',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_67 = PointTypeParameter(
            parameter_number=134,
            parameter_name='Point Description 67',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_67 = PointTypeParameter(
            parameter_number=135,
            parameter_name='Point to Log 67',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_68 = PointTypeParameter(
            parameter_number=136,
            parameter_name='Point Description 68',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_68 = PointTypeParameter(
            parameter_number=137,
            parameter_name='Point to Log 68',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_69 = PointTypeParameter(
            parameter_number=138,
            parameter_name='Point Description 69',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_69 = PointTypeParameter(
            parameter_number=139,
            parameter_name='Point to Log 69',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_70 = PointTypeParameter(
            parameter_number=140,
            parameter_name='Point Description 70',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_70 = PointTypeParameter(
            parameter_number=141,
            parameter_name='Point to Log 70',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_71 = PointTypeParameter(
            parameter_number=142,
            parameter_name='Point Description 71',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_71 = PointTypeParameter(
            parameter_number=143,
            parameter_name='Point to Log 71',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_72 = PointTypeParameter(
            parameter_number=144,
            parameter_name='Point Description 72',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_72 = PointTypeParameter(
            parameter_number=145,
            parameter_name='Point to Log 72',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_73 = PointTypeParameter(
            parameter_number=146,
            parameter_name='Point Description 73',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_73 = PointTypeParameter(
            parameter_number=147,
            parameter_name='Point to Log 73',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_74 = PointTypeParameter(
            parameter_number=148,
            parameter_name='Point Description 74',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_74 = PointTypeParameter(
            parameter_number=149,
            parameter_name='Point to Log 74',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_75 = PointTypeParameter(
            parameter_number=150,
            parameter_name='Point Description 75',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_75 = PointTypeParameter(
            parameter_number=151,
            parameter_name='Point to Log 75',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_76 = PointTypeParameter(
            parameter_number=152,
            parameter_name='Point Description 76',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_76 = PointTypeParameter(
            parameter_number=153,
            parameter_name='Point to Log 76',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_77 = PointTypeParameter(
            parameter_number=154,
            parameter_name='Point Description 77',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_77 = PointTypeParameter(
            parameter_number=155,
            parameter_name='Point to Log 77',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_78 = PointTypeParameter(
            parameter_number=156,
            parameter_name='Point Description 78',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_78 = PointTypeParameter(
            parameter_number=157,
            parameter_name='Point to Log 78',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_79 = PointTypeParameter(
            parameter_number=158,
            parameter_name='Point Description 79',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_79 = PointTypeParameter(
            parameter_number=159,
            parameter_name='Point to Log 79',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_80 = PointTypeParameter(
            parameter_number=160,
            parameter_name='Point Description 80',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_80 = PointTypeParameter(
            parameter_number=161,
            parameter_name='Point to Log 80',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_81 = PointTypeParameter(
            parameter_number=162,
            parameter_name='Point Description 81',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_81 = PointTypeParameter(
            parameter_number=163,
            parameter_name='Point to Log 81',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_82 = PointTypeParameter(
            parameter_number=164,
            parameter_name='Point Description 82',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_82 = PointTypeParameter(
            parameter_number=165,
            parameter_name='Point to Log 82',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_83 = PointTypeParameter(
            parameter_number=166,
            parameter_name='Point Description 83',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_83 = PointTypeParameter(
            parameter_number=167,
            parameter_name='Point to Log 83',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_84 = PointTypeParameter(
            parameter_number=168,
            parameter_name='Point Description 84',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_84 = PointTypeParameter(
            parameter_number=169,
            parameter_name='Point to Log 84',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_85 = PointTypeParameter(
            parameter_number=170,
            parameter_name='Point Description 85',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_85 = PointTypeParameter(
            parameter_number=171,
            parameter_name='Point to Log 85',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_86 = PointTypeParameter(
            parameter_number=172,
            parameter_name='Point Description 86',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_86 = PointTypeParameter(
            parameter_number=173,
            parameter_name='Point to Log 86',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_87 = PointTypeParameter(
            parameter_number=174,
            parameter_name='Point Description 87',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_87 = PointTypeParameter(
            parameter_number=175,
            parameter_name='Point to Log 87',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_88 = PointTypeParameter(
            parameter_number=176,
            parameter_name='Point Description 88',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_88 = PointTypeParameter(
            parameter_number=177,
            parameter_name='Point to Log 88',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_89 = PointTypeParameter(
            parameter_number=178,
            parameter_name='Point Description 89',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_89 = PointTypeParameter(
            parameter_number=179,
            parameter_name='Point to Log 89',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_90 = PointTypeParameter(
            parameter_number=180,
            parameter_name='Point Description 90',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_90 = PointTypeParameter(
            parameter_number=181,
            parameter_name='Point to Log 90',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_91 = PointTypeParameter(
            parameter_number=182,
            parameter_name='Point Description 91',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_91 = PointTypeParameter(
            parameter_number=183,
            parameter_name='Point to Log 91',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_92 = PointTypeParameter(
            parameter_number=184,
            parameter_name='Point Description 92',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_92 = PointTypeParameter(
            parameter_number=185,
            parameter_name='Point to Log 92',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_93 = PointTypeParameter(
            parameter_number=186,
            parameter_name='Point Description 93',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_93 = PointTypeParameter(
            parameter_number=187,
            parameter_name='Point to Log 93',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_94 = PointTypeParameter(
            parameter_number=188,
            parameter_name='Point Description 94',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_94 = PointTypeParameter(
            parameter_number=189,
            parameter_name='Point to Log 94',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_95 = PointTypeParameter(
            parameter_number=190,
            parameter_name='Point Description 95',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_95 = PointTypeParameter(
            parameter_number=191,
            parameter_name='Point to Log 95',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_96 = PointTypeParameter(
            parameter_number=192,
            parameter_name='Point Description 96',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_96 = PointTypeParameter(
            parameter_number=193,
            parameter_name='Point to Log 96',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_97 = PointTypeParameter(
            parameter_number=194,
            parameter_name='Point Description 97',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_97 = PointTypeParameter(
            parameter_number=195,
            parameter_name='Point to Log 97',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_98 = PointTypeParameter(
            parameter_number=196,
            parameter_name='Point Description 98',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_98 = PointTypeParameter(
            parameter_number=197,
            parameter_name='Point to Log 98',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_99 = PointTypeParameter(
            parameter_number=198,
            parameter_name='Point Description 99',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_99 = PointTypeParameter(
            parameter_number=199,
            parameter_name='Point to Log 99',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """

        POINT_DESCRIPTION_100 = PointTypeParameter(
            parameter_number=200,
            parameter_name='Point Description 100',
            parameter_desc='Point description (can be changed without changing transactional history)',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Point description (can be changed without changing transactional history)
        """

        POINT_TO_LOG_100 = PointTypeParameter(
            parameter_number=201,
            parameter_name='Point to Log 100',
            parameter_desc='Point to log',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP value'
        )
        """
        Point to log
        """





class RTU_NETWORK_DICOVERY_LIST(PointType):
    """RTU Network Discovery List Point Type"""

    point_type_number: int = 172
    """Point Type ID"""

    point_type_desc: str = 'RTU Network Discovery List Point Type'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        TAG = PointTypeParameter(
            parameter_number=0,
            parameter_name='Tag',
            parameter_desc='Tag for the Remote RTU',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Tag for the Remote RTU
        """

        ROC_DEVICE_IC = PointTypeParameter(
            parameter_number=1,
            parameter_name='ROC Device IC',
            parameter_desc='Unique ID for the Remote RTU',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0-4,294,967,296'
        )
        """
        Unique ID for the Remote RTU
        """

        COMMISSION_LIST_INDEX = PointTypeParameter(
            parameter_number=2,
            parameter_name='Commission List Index',
            parameter_desc='Logical number of the commissioned list point type assigned to this Remote RTU, based upon the network modle (parameter 139,x,15)',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-12 or 0-24'
        )
        """
        Logical number of the commissioned list point type assigned to this Remote RTU, based upon the network modle (parameter 139,x,15)
        """

        COMMISSION_FLAG = PointTypeParameter(
            parameter_number=3,
            parameter_name='Commission Flag',
            parameter_desc='When reading, this parameter indicates if this live list slot is occupied with a live non-commissioned device. Vaid values are 0 (Empty) and 1 (Occupied). When writing, this parameter commissions this device to the specified Commissioned List Index. Valid value is 255 (Commission Device)',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 1, 255'
        )
        """
        When reading, this parameter indicates if this live list slot is occupied with a live non-commissioned device. Vaid values are 0 (Empty) and 1 (Occupied). When
        writing, this parameter commissions this device to the specified Commissioned List Index. Valid value is 255 (Commission Device)
        """





class NETWORK_COMMISSIONED_LIST(PointType):
    """Network Commissioned List Point Type"""

    point_type_number: int = 173
    """Point Type ID"""

    point_type_desc: str = 'Network Commissioned List Point Type'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        TAG = PointTypeParameter(
            parameter_number=0,
            parameter_name='Tag',
            parameter_desc='Device tag',
            data_type=dt.AC,
            access='R/O R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Device tag
        """

        ROC_DEVICE_ID = PointTypeParameter(
            parameter_number=1,
            parameter_name='ROC Device ID',
            parameter_desc='Unique ID of the commissioned device',
            data_type=dt.UINT32,
            access='R/O R/W',
            value_range='0-4,294,967,296'
        )
        """
        Unique ID of the commissioned device
        """

        NETWORK_ID = PointTypeParameter(
            parameter_number=2,
            parameter_name='Network ID',
            parameter_desc='Network ID',
            data_type=dt.UINT8,
            access='R/O R/W',
            value_range='0-255'
        )
        """
        Network ID
        """

        ROC_GROUP_ADDRESS = PointTypeParameter(
            parameter_number=3,
            parameter_name='ROC Group Address',
            parameter_desc='ROC Group Address',
            data_type=dt.UINT8,
            access='R/O R/W',
            value_range='0-255'
        )
        """
        ROC Group Address
        """

        ROC_UNIT_ADDRESS = PointTypeParameter(
            parameter_number=4,
            parameter_name='ROC Unit Address',
            parameter_desc='ROC Unit Address',
            data_type=dt.UINT8,
            access='R/O R/W',
            value_range='0-255'
        )
        """
        ROC Unit Address
        """

        ROC_TYPE = PointTypeParameter(
            parameter_number=5,
            parameter_name='ROC Type',
            parameter_desc='ROC type',
            data_type=dt.UINT8,
            access='R/O R/W',
            value_range='0 65535'
        )
        """
        ROC type
        """

        RTU_BACKPLANCE_TYPE_AND_SLOT_USAGE = PointTypeParameter(
            parameter_number=6,
            parameter_name='RTU Backplance Type and Slot usage',
            parameter_desc='RTU backplane type and slot usage. For bits 0-2: For the FloBoss 107: 0 4-slot 1 = 8-slot For the ROC800-Series: 0 3-slot 1 9-slot 2 = 15-slot 3 21-slot 4 = 27-slot For bits 3-31: Slot in use for slots 0-27',
            data_type=dt.UINT32,
            access='R/O R/W',
            value_range='0-4,294,967,296'
        )
        """
        RTU backplane type and slot usage. For bits 0-2: For the FloBoss 107: 0 4-slot 1 = 8-slot For the ROC800-Series: 0 3-slot 1 9-slot 2 = 15-slot 3 21-slot 4 =
        27-slot For bits 3-31: Slot in use for slots 0-27
        """

        DEVICE_STATUS = PointTypeParameter(
            parameter_number=7,
            parameter_name='Device Status',
            parameter_desc='Integrity summary. Valid values are: 0 = Good Bit 1 :1 = I/O Integrity fault Bit 2: 1 = I/O Alarm fault Bit 3: 1 = State data on device Bit 7: 1 = Identifier Note: Device status for ROC800s reports only the Device Status Good bit, the Stale Data on Device bit, and the identifying bit.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Integrity summary. Valid values are: 0 = Good Bit 1 :1 = I/O Integrity fault Bit 2: 1 = I/O Alarm fault Bit 3: 1 = State data on device Bit 7: 1 = Identifier
        Note: Device status for ROC800s reports only the Device Status Good bit, the Stale Data on Device bit, and the identifying bit.
        """

        COMM_STATUS = PointTypeParameter(
            parameter_number=8,
            parameter_name='Comm Status',
            parameter_desc='Indicates the communication status. Valid values are 0 (Good) and 1 (Comm Failure).',
            data_type=dt.UINT8,
            access='R./O',
            value_range='0-255'
        )
        """
        Indicates the communication status. Valid values are 0 (Good) and 1 (Comm Failure).
        """

        BATTERY_VOLTAGE = PointTypeParameter(
            parameter_number=9,
            parameter_name='Battery Voltage',
            parameter_desc='ROC battery voltage.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        ROC battery voltage.
        """

        SIGNAL_STRENGTH = PointTypeParameter(
            parameter_number=10,
            parameter_name='Signal Strength',
            parameter_desc='Radio signal strength. Units in FreeWave J, from 0 to 127.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-127'
        )
        """
        Radio signal strength. Units in FreeWave J, from 0 to 127.
        """

        NOISE_LEVEL = PointTypeParameter(
            parameter_number=11,
            parameter_name='Noise Level',
            parameter_desc='Noise Level. Units in FreeWave J, from 0 to 127.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-127'
        )
        """
        Noise Level. Units in FreeWave J, from 0 to 127.
        """

        PERCENT_PACKETS_GOOD_FROM_MASTER = PointTypeParameter(
            parameter_number=12,
            parameter_name='Percent Packets Good from Master',
            parameter_desc='Percentage of packets received good from master radio.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-127'
        )
        """
        Percentage of packets received good from master radio.
        """

        NETWORK_CONFIGURATION_REVISION = PointTypeParameter(
            parameter_number=13,
            parameter_name='Network Configuration Revision',
            parameter_desc='Revision of the Network Configurator',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Revision of the Network Configurator
        """

        DECOMMISSION_FLAG = PointTypeParameter(
            parameter_number=14,
            parameter_name='Decommission Flag',
            parameter_desc='Indicates the commissioned status of the device. When reading, valid values are 0 (Not Commissioned) and 1 (Commissioned). When writing, valid values are 0 (Not Commissioned) and 1 (Commissioned). Writing a value of 255 to the device decommissions it.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0,1, 255'
        )
        """
        Indicates the commissioned status of the device. When reading, valid values are 0 (Not Commissioned) and 1 (Commissioned). When writing, valid values are 0 (Not
        Commissioned) and 1 (Commissioned). Writing a value of 255 to the device decommissions it.
        """

        REFLECTED_POWER_FROM_RADIO = PointTypeParameter(
            parameter_number=15,
            parameter_name='Reflected Power from Radio',
            parameter_desc='Reflected power from radio in dBm.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Reflected power from radio in dBm.
        """

        PASSTHRU_ENABLED = PointTypeParameter(
            parameter_number=16,
            parameter_name='Passthru Enabled',
            parameter_desc='Enables passthru to the remote node. Valid values are 0 (disable passthru) and 1 (enable passthru).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Enables passthru to the remote node. Valid values are 0 (disable passthru) and 1 (enable passthru).
        """

        PASSTHRU_OUTGOING_MESSAGE_COUNT = PointTypeParameter(
            parameter_number=17,
            parameter_name='Passthru Outgoing Message Count',
            parameter_desc='Count of outgoing passthru messages. The parameter resets to 0 after any type of restart.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0-4,294,967,296'
        )
        """
        Count of outgoing passthru messages. The parameter resets to 0 after any type of restart.
        """





class NETWORK_EXPORT_DATA(PointType):
    """Network Export Data Point Type"""

    point_type_number: int = 174
    """Point Type ID"""

    point_type_desc: str = 'Network Export Data Point Type'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        TAG = PointTypeParameter(
            parameter_number=0,
            parameter_name='Tag',
            parameter_desc='Tag of the selected export TLP',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Tag of the selected export TLP
        """

        EXPORT_TLP = PointTypeParameter(
            parameter_number=1,
            parameter_name='Export TLP',
            parameter_desc='TLP of the parameter to be exported',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        TLP of the parameter to be exported
        """

        NETWORK_ID = PointTypeParameter(
            parameter_number=2,
            parameter_name='Network ID',
            parameter_desc='Network ID',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-127'
        )
        """
        Network ID
        """

        DATA_ID = PointTypeParameter(
            parameter_number=3,
            parameter_name='Data ID',
            parameter_desc='Unique ID associated with this TLP used to map the value on the import side. Note: Zero indicates the logical is empty',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Unique ID associated with this TLP used to map the value on the import side. Note: Zero indicates the logical is empty
        """

        VALUE = PointTypeParameter(
            parameter_number=4,
            parameter_name='Value',
            parameter_desc='Current value of the export TLP. The program updates this parameter at the time of the export.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current value of the export TLP. The program updates this parameter at the time of the export.
        """





class NETWORK_IMPORT_DATA(PointType):
    """Network Import Data Point Type"""

    point_type_number: int = 175
    """Point Type ID"""

    point_type_desc: str = 'Network Import Data Point Type'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        TAG = PointTypeParameter(
            parameter_number=0,
            parameter_name='Tag',
            parameter_desc='Tag of the selected imported value',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Tag of the selected imported value
        """

        NETWORK_ID = PointTypeParameter(
            parameter_number=1,
            parameter_name='Network ID',
            parameter_desc='Network ID',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Network ID
        """

        DATA_ID = PointTypeParameter(
            parameter_number=2,
            parameter_name='Data ID',
            parameter_desc='Unique ID associated with this TLP used to map the value on the export side',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Unique ID associated with this TLP used to map the value on the export side
        """

        VALUE = PointTypeParameter(
            parameter_number=3,
            parameter_name='Value',
            parameter_desc='Current value of import.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current value of import.
        """

        HEALTH_STATUS = PointTypeParameter(
            parameter_number=4,
            parameter_name='Health Status',
            parameter_desc='Health status of the importe value. Valid values are: 0 Good 1 = Data not updated (Stale) 2 = Remote Point Fail 3 = Point in Alarm',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Health status of the importe value. Valid values are: 0 Good 1 = Data not updated (Stale) 2 = Remote Point Fail 3 = Point in Alarm
        """

        FAULT_VALUE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Fault Value',
            parameter_desc='Value the program sets as the imported value if a fault condition occurs. Fault condition is defined as a status other than Good  in the Health Status parameter (175x4)',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value the program sets as the imported value if a fault condition occurs. Fault condition is defined as a status other than Good in the Health Status parameter
        (175x4)
        """

        FAULT_ENABLE = PointTypeParameter(
            parameter_number=6,
            parameter_name='Fault Enable',
            parameter_desc='Enables the fault value. Valid values are 0 (Disabled) and 1 (Enabled)',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Enables the fault value. Valid values are 0 (Disabled) and 1 (Enabled)
        """

        SOURCE_R_RTU = PointTypeParameter(
            parameter_number=8,
            parameter_name='Source (R) RTU',
            parameter_desc='Indicates the Network ID of the remote RTU that is the source of the imported TLP',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Indicates the Network ID of the remote RTU that is the source of the imported TLP
        """

        FORWARD_TLP = PointTypeParameter(
            parameter_number=9,
            parameter_name='Forward TLP',
            parameter_desc='Indicates the TLP to which to program writes the imported data',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        Indicates the TLP to which to program writes the imported data
        """





class IEC62591_LIVE_LIST(PointType):
    """IEC62591 Live List Point Type"""

    point_type_number: int = 176
    """Point Type ID"""

    point_type_desc: str = 'IEC62591 Live List Point Type'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        DEVICE_TAG = PointTypeParameter(
            parameter_number=0,
            parameter_name='Device Tag',
            parameter_desc='Device Tag',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Device Tag
        """

        DEVICE_ID = PointTypeParameter(
            parameter_number=1,
            parameter_name='Device ID',
            parameter_desc='Device ID',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 65535'
        )
        """
        Device ID
        """

        MANUFACTURING_ID = PointTypeParameter(
            parameter_number=2,
            parameter_name='Manufacturing ID',
            parameter_desc='Manufacturing ID',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Manufacturing ID
        """

        DEVICE_TYPE = PointTypeParameter(
            parameter_number=3,
            parameter_name='Device Type',
            parameter_desc='Device Type',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Device Type
        """

        COMMISSIONED_LIST_INDEX = PointTypeParameter(
            parameter_number=4,
            parameter_name='Commissioned List Index',
            parameter_desc='Logical number of the commissioned list point type assigned to this wireless device',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-59'
        )
        """
        Logical number of the commissioned list point type assigned to this wireless device
        """

        COMMISSION_FLAT = PointTypeParameter(
            parameter_number=5,
            parameter_name='Commission Flat',
            parameter_desc='Indicates: When reading, indicates if this live list slot is occupied with a live non-commissioned device. Valid values are 0 (Empty) and 1 (Occupied). When writing, this parameter commissions this device to the specified Commissioned List index. Valid values are 254 (Commission as a new device) and 255 (Commission as a replacement device)',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0,1,254,255'
        )
        """
        Indicates: When reading, indicates if this live list slot is occupied with a live non-commissioned device. Valid values are 0 (Empty) and 1 (Occupied). When
        writing, this parameter commissions this device to the specified Commissioned List index. Valid values are 254 (Commission as a new device) and 255 (Commission
        as a replacement device)
        """

        ADAPTER_ID = PointTypeParameter(
            parameter_number=6,
            parameter_name='Adapter ID',
            parameter_desc='Adapter ID',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-4,294,967,295'
        )
        """
        Adapter ID
        """

        ADAPTER_TYPE = PointTypeParameter(
            parameter_number=7,
            parameter_name='Adapter Type',
            parameter_desc='Adapter Type',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Adapter Type
        """





class IEC62591_COMMISSIONED_LIST(PointType):
    """IEC62591 Commissioned List Point Type"""

    point_type_number: int = 177
    """Point Type ID"""

    point_type_desc: str = 'IEC62591 Commissioned List Point Type'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        DEVICE_TAG = PointTypeParameter(
            parameter_number=0,
            parameter_name='Device Tag',
            parameter_desc='Tag that resides in device.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Tag that resides in device.
        """

        DEVICE_MESSAGE = PointTypeParameter(
            parameter_number=1,
            parameter_name='Device Message',
            parameter_desc='Device message.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Device message.
        """

        DEVICE_DESCRIPTOR = PointTypeParameter(
            parameter_number=2,
            parameter_name='Device Descriptor',
            parameter_desc='Device descriptor',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Device descriptor
        """

        TRANSDUCER_SERIAL_NUMBER = PointTypeParameter(
            parameter_number=3,
            parameter_name='Transducer Serial Number',
            parameter_desc='Device serial number',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-4,294,967,296'
        )
        """
        Device serial number
        """

        DEVICE_ID = PointTypeParameter(
            parameter_number=4,
            parameter_name='Device ID',
            parameter_desc='Device ID',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-4,294,967,296'
        )
        """
        Device ID
        """

        MANUFACTURER_ID = PointTypeParameter(
            parameter_number=5,
            parameter_name='Manufacturer ID',
            parameter_desc='Manufacturer ID',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Manufacturer ID
        """

        DEVICE_TYPE = PointTypeParameter(
            parameter_number=6,
            parameter_name='Device Type',
            parameter_desc='Device Type',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Device Type
        """

        ADAPTER_ID = PointTypeParameter(
            parameter_number=7,
            parameter_name='Adapter ID',
            parameter_desc='Adapter ID',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-4,294,967,296'
        )
        """
        Adapter ID
        """

        ADAPTER_TYPE = PointTypeParameter(
            parameter_number=8,
            parameter_name='Adapter Type',
            parameter_desc='Adapter Type',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Adapter Type
        """

        DE_COMMISSION_FLAG = PointTypeParameter(
            parameter_number=9,
            parameter_name='De-commission Flag',
            parameter_desc='Either indicates the commissioned status (READ) or decommissions a device (WRITE). If Read, valid values are 0 (Not commissioned) or 1 (commissioned). If Write, 255 decommissions a device.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0,1,233'
        )
        """
        Either indicates the commissioned status (READ) or decommissions a device (WRITE). If Read, valid values are 0 (Not commissioned) or 1 (commissioned). If Write,
        255 decommissions a device.
        """

        BATTERY_LIFE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Battery Life',
            parameter_desc='Indicates the battery life remaining in days. Of the device does not have a battery or another emergy storage component, then the device may return 0xFFFF',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Indicates the battery life remaining in days. Of the device does not have a battery or another emergy storage component, then the device may return 0xFFFF
        """

        RESPONSE_CODE_STATUS = PointTypeParameter(
            parameter_number=11,
            parameter_name='Response Code/Status',
            parameter_desc='Response Code/Status',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Response Code/Status
        """

        POLL_MODE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Poll Mode',
            parameter_desc='Indicates the devices poll mode. Valid values are 0 (normal polling of dynamic and slot variables) and 1 (update all static and dynamic device parameters. After the update completes, the WirelessHART device automatically sets this parameter back to 0).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates the devices poll mode. Valid values are 0 (normal polling of dynamic and slot variables) and 1 (update all static and dynamic device parameters. After
        the update completes, the WirelessHART device automatically sets this parameter back to 0).
        """

        BURST_RATE = PointTypeParameter(
            parameter_number=13,
            parameter_name='Burst Rate',
            parameter_desc='Indicates the burst rate (in seconds) used for polling process variables.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 6553'
        )
        """
        Indicates the burst rate (in seconds) used for polling process variables.
        """

        COMMUNICATION_STATUS = PointTypeParameter(
            parameter_number=14,
            parameter_name='Communication Status',
            parameter_desc='Indicates the devices communication status. Valid values are 0 (OK) and 1 (Communications failure).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Indicates the devices communication status. Valid values are 0 (OK) and 1 (Communications failure).
        """

        LOOP_CURRENT = PointTypeParameter(
            parameter_number=15,
            parameter_name='Loop Current',
            parameter_desc='Indicates the loop current of the device in mA.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Indicates the loop current of the device in mA.
        """

        PRIMARY_VARIABLE_VALUE = PointTypeParameter(
            parameter_number=16,
            parameter_name='Primary Variable Value',
            parameter_desc='Value of primary variable.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of primary variable.
        """

        PRIMARY_VARIABLE_UNITS = PointTypeParameter(
            parameter_number=17,
            parameter_name='Primary Variable Units',
            parameter_desc='Units code of primary variable.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code of primary variable.
        """

        SECONDARY_VARIABLE_VALUE = PointTypeParameter(
            parameter_number=18,
            parameter_name='Secondary Variable Value',
            parameter_desc='Value of secondary variable',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of secondary variable
        """

        SECONDARY_VARIABLE_UNITS = PointTypeParameter(
            parameter_number=19,
            parameter_name='Secondary Variable Units',
            parameter_desc='Units code of secondary variable.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code of secondary variable.
        """

        TERTIARY_VARIABLE_VALUE = PointTypeParameter(
            parameter_number=20,
            parameter_name='Tertiary Variable Value',
            parameter_desc='Value of tertiary variable',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of tertiary variable
        """

        TERTIARY_VARIABLE_UNIT = PointTypeParameter(
            parameter_number=21,
            parameter_name='Tertiary Variable Unit',
            parameter_desc='Units code of tertiary variable',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code of tertiary variable
        """

        QUATERNARY_VARIABLE_VALUE = PointTypeParameter(
            parameter_number=22,
            parameter_name='Quaternary Variable Value',
            parameter_desc='Value of quaternary variable',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of quaternary variable
        """

        QUATERNARY_VARIABLE_UNITS = PointTypeParameter(
            parameter_number=23,
            parameter_name='Quaternary Variable Units',
            parameter_desc='Units code of quaternary variable',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code of quaternary variable
        """

        DEVICE_COMMISION_STATUS = PointTypeParameter(
            parameter_number=24,
            parameter_name='Device Commision Status',
            parameter_desc='Device Commission Status 0 Idle 1 = Configuring Burst Message 2 = Configuring Burst Variables 3 = Configuring Burst Rate 4 = Enabling Bursting 5 = Bursting 6 = Values Stale 7 = Communication Failure 8 = Disabling Bursting 9 = Bursting: Delayed Response 10=Comminssion Failure',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-8'
        )
        """
        Device Commission Status 0 Idle 1 = Configuring Burst Message 2 = Configuring Burst Variables 3 = Configuring Burst Rate 4 = Enabling Bursting 5 = Bursting 6 =
        Values Stale 7 = Communication Failure 8 = Disabling Bursting 9 = Bursting: Delayed Response 10=Comminssion Failure
        """

        SLOT_0_VARIABLE_ASSIGNMENT = PointTypeParameter(
            parameter_number=25,
            parameter_name='Slot 0 Variable Assignment',
            parameter_desc='Slot 0 variable to request',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 0 variable to request
        """

        SLOT_0_UNITS = PointTypeParameter(
            parameter_number=26,
            parameter_name='Slot 0 Units',
            parameter_desc='Units of slot 0 variable',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 0 variable
        """

        SLOT_0_VALUE = PointTypeParameter(
            parameter_number=27,
            parameter_name='Slot 0 Value',
            parameter_desc='Value of slot 0 variable',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 0 variable
        """

        SLOT1_VARIABLE_ASSIGNMENT = PointTypeParameter(
            parameter_number=28,
            parameter_name='Slot1 Variable Assignment',
            parameter_desc='Slot 1 variable to request',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 1 variable to request
        """

        SLOT1_UNITS = PointTypeParameter(
            parameter_number=29,
            parameter_name='Slot1 Units',
            parameter_desc='Units of slot 1 variable',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 1 variable
        """

        SLOT1_VALUE = PointTypeParameter(
            parameter_number=30,
            parameter_name='Slot1 Value',
            parameter_desc='Value of slot 1 variable',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 1 variable
        """

        SLOT_2_VARIABLE_ASSIGNMENT = PointTypeParameter(
            parameter_number=31,
            parameter_name='Slot 2 Variable Assignment',
            parameter_desc='Slot 2 variable to request',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 2 variable to request
        """

        SLOT_2_UNITS = PointTypeParameter(
            parameter_number=32,
            parameter_name='Slot 2 Units',
            parameter_desc='Units of slot 2 variable',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 2 variable
        """

        SLOT_2_VALUE = PointTypeParameter(
            parameter_number=33,
            parameter_name='Slot 2 Value',
            parameter_desc='Value of slot 2 variable',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 2 variable
        """

        SLOT_3_VARIABLE_ASSIGNMENT = PointTypeParameter(
            parameter_number=34,
            parameter_name='Slot 3 Variable Assignment',
            parameter_desc='Slot 3 variable to request',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 3 variable to request
        """

        SLOT_3_UNITS = PointTypeParameter(
            parameter_number=35,
            parameter_name='Slot 3 Units',
            parameter_desc='Units of slot 3 variable',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 3 variable
        """

        SLOT_3_VALUE = PointTypeParameter(
            parameter_number=36,
            parameter_name='Slot 3 Value',
            parameter_desc='Value of slot 3 variable',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 3 variable
        """

        NUMBER_DISCRETE_CHANNELS = PointTypeParameter(
            parameter_number=37,
            parameter_name='Number Discrete Channels',
            parameter_desc='Number of Discrete Channels',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-4'
        )
        """
        Number of Discrete Channels
        """

        DISCRETE_CHAN_1_SET_CLASS = PointTypeParameter(
            parameter_number=38,
            parameter_name='Discrete Chan 1 Set Class',
            parameter_desc='Discrete Channel 1 classification for the setpoint.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Discrete Channel 1 classification for the setpoint.
        """

        DISCRETE_CHAN_1_LIVE_CLASS = PointTypeParameter(
            parameter_number=39,
            parameter_name='Discrete Chan 1 Live Class',
            parameter_desc='Discrete channel 1 classification of the device for the live value',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Discrete channel 1 classification of the device for the live value
        """

        DISCRETE_CHAN_1_SET_POINT = PointTypeParameter(
            parameter_number=40,
            parameter_name='Discrete Chan 1 Set Point',
            parameter_desc='Discrete channel 1 setpoint',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Discrete channel 1 setpoint
        """

        DISCRETE_CHAN_1_LIVE_VALUE = PointTypeParameter(
            parameter_number=41,
            parameter_name='Discrete Chan 1 Live Value',
            parameter_desc='Discrete channel 1 live value',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Discrete channel 1 live value
        """

        DISCRETE_CHAN_2_SET_CLASS = PointTypeParameter(
            parameter_number=42,
            parameter_name='Discrete Chan 2 Set Class',
            parameter_desc='Discrete Channel 2 classification for the setpoint.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Discrete Channel 2 classification for the setpoint.
        """

        DISCRETE_CHAN_2_LIVE_CLASS = PointTypeParameter(
            parameter_number=43,
            parameter_name='Discrete Chan 2 Live Class',
            parameter_desc='Discrete channel 2 classification of the device for the live value',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Discrete channel 2 classification of the device for the live value
        """

        DISCRETE_CHAN_2_SET_POINT = PointTypeParameter(
            parameter_number=44,
            parameter_name='Discrete Chan 2 Set Point',
            parameter_desc='Discrete channel 2 setpoint',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Discrete channel 2 setpoint
        """

        DISCRETE_CHAN_2_LIVE_VALUE = PointTypeParameter(
            parameter_number=45,
            parameter_name='Discrete Chan 2 Live Value',
            parameter_desc='Discrete channel 2 live value',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Discrete channel 2 live value
        """

        DISCRETE_CHAN_3_SET_CLASS = PointTypeParameter(
            parameter_number=46,
            parameter_name='Discrete Chan 3 Set Class',
            parameter_desc='Discrete Channel 3 classification for the setpoint.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Discrete Channel 3 classification for the setpoint.
        """

        DISCRETE_CHAN_3_LIVE_CLASS = PointTypeParameter(
            parameter_number=47,
            parameter_name='Discrete Chan 3 Live Class',
            parameter_desc='Discrete channel 3 classfication for the live value',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Discrete channel 3 classfication for the live value
        """

        DISCRETE_CHAN_3_SET_POINT = PointTypeParameter(
            parameter_number=48,
            parameter_name='Discrete Chan 3 Set Point',
            parameter_desc='Discrete channel 3 setpoint',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Discrete channel 3 setpoint
        """

        DISCRETE_CHAN_3_LIVE_VALUE = PointTypeParameter(
            parameter_number=49,
            parameter_name='Discrete Chan 3 Live Value',
            parameter_desc='Discrete channel 3 live value',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Discrete channel 3 live value
        """

        DISCRETE_CHAN_4_SET_CLASS = PointTypeParameter(
            parameter_number=50,
            parameter_name='Discrete Chan 4 Set Class',
            parameter_desc='Discrete Channel 4 classification for the setpoint.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Discrete Channel 4 classification for the setpoint.
        """

        DISCRETE_CHAN_4_LIVE_CLASS = PointTypeParameter(
            parameter_number=51,
            parameter_name='Discrete Chan 4 Live Class',
            parameter_desc='Discrete channel 4 classification for the live value',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Discrete channel 4 classification for the live value
        """

        DISCRETE_CHAN_4_SET_POINT = PointTypeParameter(
            parameter_number=52,
            parameter_name='Discrete Chan 4 Set Point',
            parameter_desc='Discrete channel 4 setpoint',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Discrete channel 4 setpoint
        """

        DISCRETE_CHAN_4_LIVE_VALUE = PointTypeParameter(
            parameter_number=53,
            parameter_name='Discrete Chan 4 Live Value',
            parameter_desc='Discrete channel 4 live value',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Discrete channel 4 live value
        """

        DEVICE_FAILSAFE_MODE = PointTypeParameter(
            parameter_number=54,
            parameter_name='Device Failsafe Mode',
            parameter_desc='Indicates the failsafe mode. Valid values are 0 (Hold Last) and 1 (Use Failsafe).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates the failsafe mode. Valid values are 0 (Hold Last) and 1 (Use Failsafe).
        """

        PV_FAULT_VALUE = PointTypeParameter(
            parameter_number=55,
            parameter_name='PV Fault Value',
            parameter_desc='Value set for PV if the Comm Status indicates Comm Failure, the NaN flag for the PV is set, or the Field Device Status indicates the PV is out of range.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value set for PV if the Comm Status indicates Comm Failure, the NaN flag for the PV is set, or the Field Device Status indicates the PV is out of range.
        """

        SV_FAULT_VALUE = PointTypeParameter(
            parameter_number=56,
            parameter_name='SV Fault Value',
            parameter_desc='Value set for SV if the Comm Status indicates Comm Failure, the NaN flag for the SV is set, or the Field Device Status indicates the SV is out of range.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value set for SV if the Comm Status indicates Comm Failure, the NaN flag for the SV is set, or the Field Device Status indicates the SV is out of range.
        """

        TV_FAULT_VALUE = PointTypeParameter(
            parameter_number=57,
            parameter_name='TV Fault Value',
            parameter_desc='Value set for TV if the Comm Status indicates Comm Failure, the NaN flag for the TV is set, or the Field Device Status indicates the TV is out of range.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value set for TV if the Comm Status indicates Comm Failure, the NaN flag for the TV is set, or the Field Device Status indicates the TV is out of range.
        """

        QV_FAULT_VALUE = PointTypeParameter(
            parameter_number=58,
            parameter_name='QV Fault Value',
            parameter_desc='Value set for QV if the Comm Status indicates Comm Failure, the NaN flag for the QV is set, or the Field Device Status indicates the QV is out of range.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value set for QV if the Comm Status indicates Comm Failure, the NaN flag for the QV is set, or the Field Device Status indicates the QV is out of range.
        """

        NAN_FLAG = PointTypeParameterBinary(
            parameter_number=59,
            parameter_name='NaN Flag',
            parameter_desc='NaN Flag',
            data_type=dt.BIN,
            access='R/O',
            value_range='0-15',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='PV NaN Flag',
                    bit_desc='Indicates the PV value is NaN at the device.'
                ),
                BitDescriptor(
                    bit_number=1,
                    bit_name='SV NaN Flag',
                    bit_desc='Indicates the SV value is NaN at the device.'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='TV NaN Flag',
                    bit_desc='Indicates the TV value is NaN at the device.'
                ),
                BitDescriptor(
                    bit_number=3,
                    bit_name='QV NaN Flag',
                    bit_desc='Indicates the QV value is NaN at the device.'
                ),
                BitDescriptor(
                    bit_number=4,
                    bit_name='Slot 1 NaN Flag',
                    bit_desc='Indicates the Slot 1 value is NaN at the device.'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='Slot 2 NaN Flag',
                    bit_desc='Indicates the Slot 2 value is NaN at the device.'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Slot 3 NaN Flag',
                    bit_desc='Indicates the Slot 3 value is NaN at the device.'
                ),
                BitDescriptor(
                    bit_number=7,
                    bit_name='Slot 4 NaN Flag',
                    bit_desc='Indicates the Slot 4 value is NaN at the device.'
                )
            ]
        )
        """
        NaN Flag
        """

        PV_DEVICE_VARIABLE_STATUS = PointTypeParameterBinary(
            parameter_number=60,
            parameter_name='PV Device Variable Status',
            parameter_desc='PV Device Variable Status byte, which indicates for the primary variable: Bit 0-2 - Device Family Specific Status Bit 3 - More Device Variable Status Available Bits 4-5 Limit Status 00 = Not Limited 01 = Low Limited 10 = High Limited 11 = Constant Bits 6-7 - Process Data Status 00 = Bad 01 = Poor Accuracy 10 = Manual / Fixed 11 = Good',
            data_type=dt.BIN,
            access='R/O',
            value_range='0-255',
            bits=[
            ]
        )
        """
        PV Device Variable Status byte, which indicates for the primary variable: Bit 0-2 - Device Family Specific Status Bit 3 - More Device Variable Status Available
        Bits 4-5 Limit Status 00 = Not Limited 01 = Low Limited 10 = High Limited 11 = Constant Bits 6-7 - Process Data Status 00 = Bad 01 = Poor Accuracy 10 = Manual /
        Fixed 11 = Good
        """

        SV_DEVICE_VARIABLE_STATUS = PointTypeParameterBinary(
            parameter_number=61,
            parameter_name='SV Device Variable Status',
            parameter_desc='SV Device Variable Status byte, which indicates for the secondary variable: Bit 0-2 - Device Family Specific Status Bit 3 - More Device Variable Status Available Bits 4-5 Limit Status 00 = Not Limited 01 = Low Limited 10 = High Limited 11 = Constant Bits 6-7 - Process Data Status 00 = Bad 01 = Poor Accuracy 10 = Manual / Fixed 11 = Good',
            data_type=dt.BIN,
            access='R/O',
            value_range='0-255',
            bits=[
            ]
        )
        """
        SV Device Variable Status byte, which indicates for the secondary variable: Bit 0-2 - Device Family Specific Status Bit 3 - More Device Variable Status
        Available Bits 4-5 Limit Status 00 = Not Limited 01 = Low Limited 10 = High Limited 11 = Constant Bits 6-7 - Process Data Status 00 = Bad 01 = Poor Accuracy 10
        = Manual / Fixed 11 = Good
        """

        TV_DEVICE_VARIABLE_STATUS = PointTypeParameterBinary(
            parameter_number=62,
            parameter_name='TV Device Variable Status',
            parameter_desc='TV Device Variable Status byte, which indicates for the tertiary variable: Bit 0-2 - Device Family Specific Status Bit 3 - More Device Variable Status Available Bits 4-5 Limit Status 00 = Not Limited 01 = Low Limited 10 = High Limited 11 = Constant Bits 6-7 - Process Data Status 00 = Bad 01 = Poor Accuracy 10 = Manual / Fixed 11 = Good',
            data_type=dt.BIN,
            access='R/O',
            value_range='0-255',
            bits=[
            ]
        )
        """
        TV Device Variable Status byte, which indicates for the tertiary variable: Bit 0-2 - Device Family Specific Status Bit 3 - More Device Variable Status Available
        Bits 4-5 Limit Status 00 = Not Limited 01 = Low Limited 10 = High Limited 11 = Constant Bits 6-7 - Process Data Status 00 = Bad 01 = Poor Accuracy 10 = Manual /
        Fixed 11 = Good
        """

        QV_DEVICE_VARIABLE_STATUS = PointTypeParameterBinary(
            parameter_number=63,
            parameter_name='QV Device Variable Status',
            parameter_desc='QV Device Variable Status byte, which indicates for the quaternary variable: Bit 0-2 - Device Family Specific Status Bit 3 - More Device Variable Status Available Bits 4-5 Limit Status 00 = Not Limited 01 = Low Limited 10 = High Limited 11 = Constant Bits 6-7 - Process Data Status 00 = Bad 01 = Poor Accuracy 10 = Manual / Fixed 11 = Good',
            data_type=dt.BIN,
            access='R/O',
            value_range='0-255',
            bits=[
            ]
        )
        """
        QV Device Variable Status byte, which indicates for the quaternary variable: Bit 0-2 - Device Family Specific Status Bit 3 - More Device Variable Status
        Available Bits 4-5 Limit Status 00 = Not Limited 01 = Low Limited 10 = High Limited 11 = Constant Bits 6-7 - Process Data Status 00 = Bad 01 = Poor Accuracy 10
        = Manual / Fixed 11 = Good
        """

        DISCRETE_VARIABLE_STATUS_1 = PointTypeParameterBinary(
            parameter_number=64,
            parameter_name='Discrete Variable Status 1',
            parameter_desc='Bitwise field indicating statuses of the discrete variables. Bit 0 - Discrete variable in Simulation or Local Override Bit 1 - Discrete variable in Fault Mode Bit 2-7 - Reserved',
            data_type=dt.BIN,
            access='R/O',
            value_range='0-3',
            bits=[
            ]
        )
        """
        Bitwise field indicating statuses of the discrete variables. Bit 0 - Discrete variable in Simulation or Local Override Bit 1 - Discrete variable in Fault Mode
        Bit 2-7 - Reserved
        """

        DISCRETE_VARIABLE_STATUS_2 = PointTypeParameterBinary(
            parameter_number=65,
            parameter_name='Discrete Variable Status 2',
            parameter_desc='Bitwise field indicating statuses of the discrete variables. Bit 0 - Discrete variable in Simulation or Local Override Bit 1 - Discrete variable in Fault Mode Bit 2-7 - Reserved',
            data_type=dt.BIN,
            access='R/O',
            value_range='0-3',
            bits=[
            ]
        )
        """
        Bitwise field indicating statuses of the discrete variables. Bit 0 - Discrete variable in Simulation or Local Override Bit 1 - Discrete variable in Fault Mode
        Bit 2-7 - Reserved
        """

        DISCRETE_VARIABLE_STATUS_3 = PointTypeParameterBinary(
            parameter_number=66,
            parameter_name='Discrete Variable Status 3',
            parameter_desc='Bitwise field indicating statuses of the discrete variables. Bit 0 - Discrete variable in Simulation or Local Override Bit 1 - Discrete variable in Fault Mode Bit 2-7 - Reserved',
            data_type=dt.BIN,
            access='R/O',
            value_range='0-3',
            bits=[
            ]
        )
        """
        Bitwise field indicating statuses of the discrete variables. Bit 0 - Discrete variable in Simulation or Local Override Bit 1 - Discrete variable in Fault Mode
        Bit 2-7 - Reserved
        """

        DISCRETE_VARIABLE_STATUS_4 = PointTypeParameterBinary(
            parameter_number=67,
            parameter_name='Discrete Variable Status 4',
            parameter_desc='Bitwise field indicating statuses of the discrete variables. Bit 0 - Discrete variable in Simulation or Local Override Bit 1 - Discrete variable in Fault Mode Bit 2-7 - Reserved',
            data_type=dt.BIN,
            access='R/O',
            value_range='0-3',
            bits=[
            ]
        )
        """
        Bitwise field indicating statuses of the discrete variables. Bit 0 - Discrete variable in Simulation or Local Override Bit 1 - Discrete variable in Fault Mode
        Bit 2-7 - Reserved
        """

        BURST_TRIGGER_MODE_MESSAGE_0 = PointTypeParameter(
            parameter_number=69,
            parameter_name='Burst Trigger Mode Message 0',
            parameter_desc='Trigger setting for burst mode. 0 = Continuous - Bursts continually at the configured Burst Rate 1 = Windowed - Burst is triggered when source deviates more than the trigger value 2 = Rising - Burst is triggered when source rises above specified value 3 = Falling - Burst is triggered when source falls below specified value 4 = On-Change - Burst is triggered when any value changes',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-4'
        )
        """
        Trigger setting for burst mode. 0 = Continuous - Bursts continually at the configured Burst Rate 1 = Windowed - Burst is triggered when source deviates more
        than the trigger value 2 = Rising - Burst is triggered when source rises above specified value 3 = Falling - Burst is triggered when source falls below
        specified value 4 = On-Change - Burst is triggered when any value changes
        """

        BURST_TRIGGER_LEVEL_MESSAGE_0 = PointTypeParameter(
            parameter_number=70,
            parameter_name='Burst Trigger Level Message 0',
            parameter_desc='Trigger Mode supplementary data for Window, Rising, or Falling selections. See parameter 69.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Trigger Mode supplementary data for Window, Rising, or Falling selections. See parameter 69.
        """

        DEVICE_VARIABLE_CLASSIFICATION_MESSAGE_0 = PointTypeParameter(
            parameter_number=71,
            parameter_name='Device Variable Classification Message 0',
            parameter_desc='The device variable classification code that is read at the time of device discovery (See HCF Spec 183 table 21 for list of codes)',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        The device variable classification code that is read at the time of device discovery (See HCF Spec 183 table 21 for list of codes)
        """

        UNIT_CODE_MESSAGE_0 = PointTypeParameter(
            parameter_number=72,
            parameter_name='Unit Code Message 0',
            parameter_desc='The device engineering unit code that is read at the time of device discovery (HCF Spec 183 table 2 for list of codes)',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        The device engineering unit code that is read at the time of device discovery (HCF Spec 183 table 2 for list of codes)
        """

        UPDATE_PERIOD_MESSAGE_0 = PointTypeParameter(
            parameter_number=73,
            parameter_name='Update Period Message 0',
            parameter_desc='The time interval (in seconds) at which the device communicates. Determined by the Physical Layer and Data Link Layer requirements as well as the process and application requirements.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='1 3600'
        )
        """
        The time interval (in seconds) at which the device communicates. Determined by the Physical Layer and Data Link Layer requirements as well as the process and
        application requirements.
        """

        EVENT_NOTIFICATION_RETRY_TIME = PointTypeParameter(
            parameter_number=74,
            parameter_name='Event Notification Retry Time',
            parameter_desc='The time interval (in seconds) at which a device will publish its events. Must be less than or equal to Maximum Update Time (parameter 75).',
            data_type=dt.UINT16,
            access='R/W',
            value_range='1 3600'
        )
        """
        The time interval (in seconds) at which a device will publish its events. Must be less than or equal to Maximum Update Time (parameter 75).
        """

        EVENT_MAXIMUM_UPDATE_TIME = PointTypeParameter(
            parameter_number=75,
            parameter_name='Event Maximum Update Time',
            parameter_desc='When the Burst Trigger Mode (parameter 69) is anything other than Continuous, this value specifies the longest (in seconds) a device is allowed to remain silent without bursting.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='1 3600'
        )
        """
        When the Burst Trigger Mode (parameter 69) is anything other than Continuous, this value specifies the longest (in seconds) a device is allowed to remain silent
        without bursting.
        """

        EVENT_DE_BOUNCE_INTERVAL = PointTypeParameter(
            parameter_number=76,
            parameter_name='Event De-bounce Interval',
            parameter_desc='The amount of time in seconds that an event must persist before the event notification is sent.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='1 3600'
        )
        """
        The amount of time in seconds that an event must persist before the event notification is sent.
        """

        UPDATE_PERIOD_MESSAGE_1 = PointTypeParameter(
            parameter_number=77,
            parameter_name='Update Period Message 1',
            parameter_desc='Same as parameter 73 for hybrid transmitters which may send multiple messages.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='1 3600'
        )
        """
        Same as parameter 73 for hybrid transmitters which may send multiple messages.
        """

        BURST_RATE_MAX_MESSAGE_1 = PointTypeParameter(
            parameter_number=78,
            parameter_name='Burst Rate Max Message 1',
            parameter_desc='Same as parameter 13 for hybrid transmitters which may send multiple messages. The device must burst at this frequency even if its configured trigger does not occur.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='1 3600'
        )
        """
        Same as parameter 13 for hybrid transmitters which may send multiple messages. The device must burst at this frequency even if its configured trigger does not
        occur.
        """

        BURST_TRIGGER_MODE_MESSAGE_1 = PointTypeParameter(
            parameter_number=79,
            parameter_name='Burst Trigger Mode Message 1',
            parameter_desc='Same as parameter 69 for hybrid transmitters which may send multiple messages.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-4'
        )
        """
        Same as parameter 69 for hybrid transmitters which may send multiple messages.
        """

        BURST_TRIGGER_LEVEL_MESSAGE_1 = PointTypeParameter(
            parameter_number=80,
            parameter_name='Burst Trigger Level Message 1',
            parameter_desc='Same as parameter 70 for hybrid transmitters which may send multiple messages.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Same as parameter 70 for hybrid transmitters which may send multiple messages.
        """

        DEVICE_VARIABLE_CLASSIFICATION_MESSAGE_1 = PointTypeParameter(
            parameter_number=81,
            parameter_name='Device Variable Classification Message 1',
            parameter_desc='Same as parameter 71 for hybrid transmitters which may send multiple messages.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Same as parameter 71 for hybrid transmitters which may send multiple messages.
        """

        UNIT_CODE_MESSAGE_1 = PointTypeParameter(
            parameter_number=82,
            parameter_name='Unit Code Message 1',
            parameter_desc='Same as parameter 72 for hybrid transmitters which may send multiple messages',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Same as parameter 72 for hybrid transmitters which may send multiple messages
        """

        EVENT_NOTIFICATION_TIME = PointTypeParameter(
            parameter_number=83,
            parameter_name='Event Notification Time',
            parameter_desc='Time of the current event. Number of 1/32 millisecond intervals that have passed since the start of the day.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 4294967295'
        )
        """
        Time of the current event. Number of 1/32 millisecond intervals that have passed since the start of the day.
        """

        EVENT_SUMMARY = PointTypeParameter(
            parameter_number=84,
            parameter_name='Event Summary',
            parameter_desc='Indicates the Event Notification Control Code as well as the status of any pending events Bit 0-3 - Event Notification Control Code 0 = Off 1 = Enable on Token-Passing Data Link Layer 2 = Enable on TDMA Data Link Layer 3 = Enable on both TDMA and Token DLLs Bit 4 - Configuration Changed Event Pending Bit 5 - Device Status Event Pending Bit 6 - More Status Available Event Pending Bit 7 - Reserved',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-120'
        )
        """
        Indicates the Event Notification Control Code as well as the status of any pending events Bit 0-3 - Event Notification Control Code 0 = Off 1 = Enable on
        Token-Passing Data Link Layer 2 = Enable on TDMA Data Link Layer 3 = Enable on both TDMA and Token DLLs Bit 4 - Configuration Changed Event Pending Bit 5 -
        Device Status Event Pending Bit 6 - More Status Available Event Pending Bit 7 - Reserved
        """

        RESET_EVENTS = PointTypeParameter(
            parameter_number=85,
            parameter_name='Reset Events',
            parameter_desc='Writing a 1 to this parameter causes the acknowledgement of all device events.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Writing a 1 to this parameter causes the acknowledgement of all device events.
        """

        CONFIG_CHANGE_COUNTER = PointTypeParameter(
            parameter_number=86,
            parameter_name='Config Change Counter',
            parameter_desc='The configuration change counter as read from the device.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        The configuration change counter as read from the device.
        """

        EXECUTION_COMMAND_STATUS = PointTypeParameter(
            parameter_number=87,
            parameter_name='Execution Command Status',
            parameter_desc='In the event a HART command issued from the module to a sensor is not successful, this bitwise parameter indicates which command failed.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        In the event a HART command issued from the module to a sensor is not successful, this bitwise parameter indicates which command failed.
        """

        FORMATTED_EVENT_NOTIFICATION_TIME = PointTypeParameter(
            parameter_number=88,
            parameter_name='Formatted Event Notification Time',
            parameter_desc='Parameter 83 converted to HH:MM:SS format',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Parameter 83 converted to HH:MM:SS format
        """





class VDI(PointType):
    """Virtual Discrete Outputs"""

    point_type_number: int = 82
    """Point Type ID"""

    point_type_desc: str = 'Virtual Discrete Outputs'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        OPERATOR_IDENTIFIER = PointTypeParameter(
            parameter_number=0,
            parameter_name='Operator Identifier',
            parameter_desc='A three-character ASCII operator identifier (such as LOI).',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte.'
        )
        """
        A three-character ASCII operator identifier (such as LOI).
        """

        UNUSED_1 = PointTypeParameter(
            parameter_number=1,
            parameter_name='Unused #1',
            parameter_desc='Unused #1',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0'
        )
        """
        Unused #1
        """

        UNUSED_2 = PointTypeParameter(
            parameter_number=2,
            parameter_name='Unused #2',
            parameter_desc='Unused #2',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0'
        )
        """
        Unused #2
        """

        UNUSED_3 = PointTypeParameter(
            parameter_number=3,
            parameter_name='Unused #3',
            parameter_desc='Unused #3',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0'
        )
        """
        Unused #3
        """

        PASSWORD = PointTypeParameter(
            parameter_number=4,
            parameter_name='Password',
            parameter_desc='A numerical value that is used as a password for the Operator Identifier (such as 1000). Modified in version 1.20 to Write- Only; reading the value now always returns 0. Note: The first point (logical 0) defaults to the familiar operator ID (LOI) and password (1000). The remaining 15 points default to operator ID and password of 0000.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0000 9999'
        )
        """
        A numerical value that is used as a password for the Operator Identifier (such as 1000). Modified in version 1.20 to Write- Only; reading the value now always
        returns 0. Note: The first point (logical 0) defaults to the familiar operator ID (LOI) and password (1000). The remaining 15 points default to operator ID and
        password of 0000.
        """

        ACCESS_LEVEL = PointTypeParameter(
            parameter_number=5,
            parameter_name='Access Level',
            parameter_desc='A value that is used to limit access to parameters when parameter (95, X, 44) is set to 2 (Security by User Access Level) where X = to the logical of the port that the request is being made on.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 255'
        )
        """
        A value that is used to limit access to parameters when parameter (95, X, 44) is set to 2 (Security by User Access Level) where X = to the logical of the port
        that the request is being made on.
        """

        GROUP_1 = PointTypeParameter(
            parameter_number=6,
            parameter_name='Group #1',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0 19.
        """

        GROUP_2 = PointTypeParameter(
            parameter_number=7,
            parameter_name='Group #2',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0 19.
        """

        GROUP_3 = PointTypeParameter(
            parameter_number=8,
            parameter_name='Group #3',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.
        """

        GROUP_4 = PointTypeParameter(
            parameter_number=9,
            parameter_name='Group #4',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.
        """

        GROUP_5 = PointTypeParameter(
            parameter_number=10,
            parameter_name='Group #5',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters -19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters -19.
        """

        GROUP_6 = PointTypeParameter(
            parameter_number=11,
            parameter_name='Group #6',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-19.
        """

        GROUP_7 = PointTypeParameter(
            parameter_number=12,
            parameter_name='Group #7',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters -19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters -19.
        """

        GROUP_8 = PointTypeParameter(
            parameter_number=13,
            parameter_name='Group #8',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-19.
        """

        GROUP_9 = PointTypeParameter(
            parameter_number=14,
            parameter_name='Group #9',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-19.
        """

        GROUP_10 = PointTypeParameter(
            parameter_number=15,
            parameter_name='Group #10',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters -19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters -19.
        """

        GROUP_11 = PointTypeParameter(
            parameter_number=16,
            parameter_name='Group #11',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.
        """

        GROUP_12 = PointTypeParameter(
            parameter_number=17,
            parameter_name='Group #12',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.
        """

        GROUP_13 = PointTypeParameter(
            parameter_number=18,
            parameter_name='Group #13',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 1919.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 1919.
        """

        GROUP_14 = PointTypeParameter(
            parameter_number=19,
            parameter_name='Group #14',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-19.
        """

        GROUP_15 = PointTypeParameter(
            parameter_number=20,
            parameter_name='Group #15',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.
        """

        GROUP_16 = PointTypeParameter(
            parameter_number=21,
            parameter_name='Group #16',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters >19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters >19.
        """

        GROUP_17 = PointTypeParameter(
            parameter_number=22,
            parameter_name='Group #17',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.
        """

        GROUP_18 = PointTypeParameter(
            parameter_number=23,
            parameter_name='Group #18',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-> 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0->19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-> 19.
        """

        GROUP_19 = PointTypeParameter(
            parameter_number=24,
            parameter_name='Group #19',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0->19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0 19.
        """

        GROUP_20 = PointTypeParameter(
            parameter_number=25,
            parameter_name='Group #20',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0->19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0 19.
        """

        LONG_USER_ID = PointTypeParameter(
            parameter_number=26,
            parameter_name='Long User ID',
            parameter_desc='A 30-character ASCII identifier for authenticating a User',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte.'
        )
        """
        A 30-character ASCII identifier for authenticating a User
        """

        LONG_PASSWORD = PointTypeParameter(
            parameter_number=27,
            parameter_name='Long Password',
            parameter_desc='A 32-character password associated with the user. Note: The default for logical zero is Password padded with ASCII spaces. This should be changed immediately upon longer login activation. Note: Reading this parameter will return a blank string. Passwords are effectively Write Only. Note: The password must be encrypted and cannot be written in clear text.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte.'
        )
        """
        A 32-character password associated with the user. Note: The default for logical zero is Password padded with ASCII spaces. This should be changed immediately
        upon longer login activation. Note: Reading this parameter will return a blank string. Passwords are effectively Write Only. Note: The password must be
        encrypted and cannot be written in clear text.
        """

        KEYPAD_PIN = PointTypeParameter(
            parameter_number=28,
            parameter_name='Keypad PIN',
            parameter_desc='An 8-digit integer identification number mapping to a user ID which a Keypad Display can use to login. A value of 0 indicates that this user has no PIN access. Note: Reading this parameter will return a 0 if a user has no PIN, or a 1 if they do. The actual PIN is not returned.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0-99,999,999'
        )
        """
        An 8-digit integer identification number mapping to a user ID which a Keypad Display can use to login. A value of 0 indicates that this user has no PIN access.
        Note: Reading this parameter will return a 0 if a user has no PIN, or a 1 if they do. The actual PIN is not returned.
        """





class HART_EXTENDED(PointType):
    """HART Extended Point Type"""

    point_type_number: int = 84
    """Point Type ID"""

    point_type_desc: str = 'HART Extended Point Type'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        CHANNEL_ALARMING = PointTypeParameter(
            parameter_number=0,
            parameter_name='Channel Alarming',
            parameter_desc='If enabled, generates channel alarms and sends them to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled). Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, generates channel alarms and sends them to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled). Note: This parameter is persistent.
        """

        CHANNEL_ALARM_CODE = PointTypeParameterBinary(
            parameter_number=1,
            parameter_name='Channel Alarm Code',
            parameter_desc='Alarm value for the HART channel. Note: This parameter is persistent.',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='AI Low Alarm',
                    bit_desc='If set, the HART Al EU value is less than or equal to the AI Low Alarm EU (parameter #2). If clear, the HART EU value is greater than the AI Low Alarm EU (parameter #2). Only applies when the channel is configured as an Al.'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='Al High Alarm',
                    bit_desc='If set, the HART Al EU value is greater than or equal to the Al High Alarm EU (parameter #3). If clear, the HART EU value is less than the Al High Alarm EU (parameter #3). Only applies when the channel is configured as an Al.'
                ),
                BitDescriptor(
                    bit_number=5,
                    bit_name='AO Readback Alarm',
                    bit_desc='If set, the HART module is not detecting a device on the output line. If clear, the analog output is functioning correctly. Only applies when the channel is configured as an AO.'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Point Fail Alarm',
                    bit_desc='If set, communicating with the HART module has failed. If clear, the HARTs hardware is operating properly.'
                ),
            ]
        )
        """
        Alarm value for the HART channel. Note: This parameter is persistent.
        """

        AI_LOW_ALARM_EU = PointTypeParameter(
            parameter_number=2,
            parameter_name='AI Low Alarm EU',
            parameter_desc='Alarm value for HART AI Low Alarm. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for HART AI Low Alarm. Note: This parameter is persistent.
        """

        AI_HIGH_ALARM_EU = PointTypeParameter(
            parameter_number=3,
            parameter_name='AI High Alarm EU',
            parameter_desc='Alarm value for HART AI High Alarm. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for HART AI High Alarm. Note: This parameter is persistent.
        """

        ALARM_DEADBAND = PointTypeParameter(
            parameter_number=4,
            parameter_name='Alarm Deadband',
            parameter_desc='Provides a range (+) that the HART AI EU Value may move between without causing another alarm. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Provides a range (+) that the HART AI EU Value may move between without causing another alarm. Note: This parameter is persistent.
        """

        DEVICE_1_ALARMING = PointTypeParameter(
            parameter_number=5,
            parameter_name='Device 1 Alarming',
            parameter_desc='If enabled, generates device alarms and sends them to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled). Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, generates device alarms and sends them to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled). Note: This parameter is persistent.
        """

        DEVICE_1_ALARM_CODE = PointTypeParameterBinary(
            parameter_number=6,
            parameter_name='Device 1 Alarm Code',
            parameter_desc='Alarm code for the device on the HART channel. Note: This parameter is persistent.',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Device 1 PV Low Alarm',
                    bit_desc='If set, the Device PV value is less than or equal to the Device PV Low Alarm Value. If clear, the Device PV value is greater than the Device PV Low Alarm Value.'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='Device 1 PV High Alarm',
                    bit_desc='If set, the Device PV value is greater than or equal to the Device PV High Alarm Value. If clear, the Device PV value is less than the Device PV High Alarm Value.'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Device 1 Point Fail Alarm',
                    bit_desc='If set, communicating with the HART Device has failed. If clear, the HART Device is operating correctly.'
                ),
            ]
        )
        """
        Alarm code for the device on the HART channel. Note: This parameter is persistent.
        """

        DEVICE_1_PV_LOW_ALARM_VALUE = PointTypeParameter(
            parameter_number=7,
            parameter_name='Device 1 PV Low Alarm Value',
            parameter_desc='Alarm value for Device PV Low Alarm. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Device PV Low Alarm. Note: This parameter is persistent.
        """

        DEVICE_1_PV_HIGH_ALARM_VALUE = PointTypeParameter(
            parameter_number=8,
            parameter_name='Device 1 PV High Alarm Value',
            parameter_desc='Alarm value for Device PV High Alarm. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Device PV High Alarm. Note: This parameter is persistent.
        """

        DEVICE_1_ALARM_DEADBAND = PointTypeParameter(
            parameter_number=9,
            parameter_name='Device 1 Alarm Deadband',
            parameter_desc='Provides a range (+) that the Device PV Value may move between without causing another alarm. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Provides a range (+) that the Device PV Value may move between without causing another alarm. Note: This parameter is persistent.
        """

        DEVICE_1_DOWNLOAD_PV = PointTypeParameter(
            parameter_number=10,
            parameter_name='Device 1 Download PV',
            parameter_desc='When the device Poll Mode is set to Download PV (4), the PV value of the device is set to the Device Download PV value. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        When the device Poll Mode is set to Download PV (4), the PV value of the device is set to the Device Download PV value. Note: This parameter is persistent.
        """

        DEVICE_1_LIVE_PV_VALUE = PointTypeParameter(
            parameter_number=11,
            parameter_name='Device 1 Live PV Value',
            parameter_desc='The current value of the PV returned from the card or last live value if scan mode is set to Skip this Device or Slot modes. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        The current value of the PV returned from the card or last live value if scan mode is set to Skip this Device or Slot modes. Note: This parameter is persistent.
        """

        DEVICE_1_IN_USE_MODE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Device 1 In Use Mode',
            parameter_desc='Determines what value is used to populate the PV parameter. Valid values are: 0 = live or last live 1 = failsafe value 2 = download value. Overrides failsafe mode except when in live mode. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W LOG',
            value_range='0-2'
        )
        """
        Determines what value is used to populate the PV parameter. Valid values are: 0 = live or last live 1 = failsafe value 2 = download value. Overrides failsafe
        mode except when in live mode. Note: This parameter is persistent.
        """

        DEVICE_1_IN_USE_STATUS = PointTypeParameter(
            parameter_number=13,
            parameter_name='Device 1 In Use Status',
            parameter_desc='Status of what value is being used to populate the PV. Valid values are: 0 = live or last live value without failure 1 = last live/scanning disabled 2 = failed to last live value 3 = failed to download value 4 = failed to failsafe value, 5 = set to download value, 6 = set to failsafe value Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-6'
        )
        """
        Status of what value is being used to populate the PV. Valid values are: 0 = live or last live value without failure 1 = last live/scanning disabled 2 = failed
        to last live value 3 = failed to download value 4 = failed to failsafe value, 5 = set to download value, 6 = set to failsafe value Note: This parameter is
        persistent.
        """

        DEVICE_2_ALARMING = PointTypeParameter(
            parameter_number=14,
            parameter_name='Device 2 Alarming',
            parameter_desc='If enabled, device alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled). Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, device alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled). Note: This parameter is persistent.
        """

        DEVICE_2_ALARM_CODE = PointTypeParameterBinary(
            parameter_number=15,
            parameter_name='Device 2 Alarm Code',
            parameter_desc='Alarm code for the device on the HART channel. Note: This parameter is persistent.',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Device 2 PV Low Alarm',
                    bit_desc='If set, the Device PV value is less than or equal to the Device PV Low Alarm Value. If clear, the Device PV value is greater than the Device PV Low Alarm Value.'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='Device 2 PV High Alarm',
                    bit_desc='If set, the Device PV value is greater than or equal to the Device PV High Alarm Value. If clear, the Device PV value is less than the Device PV High Alarm Value.'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Device 2 Point Fail Alarm',
                    bit_desc='If set, communicating with the HART Device has failed. If clear, the HART Device is operating correctly.'
                ),
            ]
        )
        """
        Alarm code for the device on the HART channel. Note: This parameter is persistent.
        """

        DEVICE_2_PV_LOW_ALARM_VALUE = PointTypeParameter(
            parameter_number=16,
            parameter_name='Device 2 PV Low Alarm Value',
            parameter_desc='Alarm value for Device PV Low Alarm. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Device PV Low Alarm. Note: This parameter is persistent.
        """

        DEVICE_2_PV_HIGH_ALARM_VALUE = PointTypeParameter(
            parameter_number=17,
            parameter_name='Device 2 PV High Alarm Value',
            parameter_desc='Alarm value for Device PV High Alarm. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Device PV High Alarm. Note: This parameter is persistent.
        """

        DEVICE_2_ALARM_DEADBAND = PointTypeParameter(
            parameter_number=18,
            parameter_name='Device 2 Alarm Deadband',
            parameter_desc='Provides a range (+) within which the Device PV Value may move between without causing another alarm. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Provides a range (+) within which the Device PV Value may move between without causing another alarm. Note: This parameter is persistent.
        """

        DEVICE_2_DOWNLOAD_PV = PointTypeParameter(
            parameter_number=19,
            parameter_name='Device 2 Download PV',
            parameter_desc='When the device Poll Mode is set to Download PV (4), the PV value of the device is set to the Device Download PV value. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        When the device Poll Mode is set to Download PV (4), the PV value of the device is set to the Device Download PV value. Note: This parameter is persistent.
        """

        DEVICE_2_LIVE_PV_VALUE = PointTypeParameter(
            parameter_number=20,
            parameter_name='Device 2 Live PV Value',
            parameter_desc='The current value of the PV returned from the card or last live value if scan mode is set to Skip this Device or Slot modes. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        The current value of the PV returned from the card or last live value if scan mode is set to Skip this Device or Slot modes. Note: This parameter is persistent.
        """

        DEVICE_2_IN_USE_MODE = PointTypeParameter(
            parameter_number=21,
            parameter_name='Device 2 In Use Mode',
            parameter_desc='Determines what value populates the PV parameter. Valid values are: 0 = live or last live 1 = failsafe value 2 = download value. Overrides failsafe mode except when in live mode. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        Determines what value populates the PV parameter. Valid values are: 0 = live or last live 1 = failsafe value 2 = download value. Overrides failsafe mode except
        when in live mode. Note: This parameter is persistent.
        """

        DEVICE_2_IN_USE_STATUS = PointTypeParameter(
            parameter_number=22,
            parameter_name='Device 2 In Use Status',
            parameter_desc='Status of what value is being used to populate the PV. Valid values are: 0 = live or last live value without failure 1 = last live/scanning disabled 2 = failed to last live value 3 = failed to download value, 4 = failed to failsafe value 5 = set to download value 6 = set to failsafe value Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-6'
        )
        """
        Status of what value is being used to populate the PV. Valid values are: 0 = live or last live value without failure 1 = last live/scanning disabled 2 = failed
        to last live value 3 = failed to download value, 4 = failed to failsafe value 5 = set to download value 6 = set to failsafe value Note: This parameter is
        persistent.
        """

        DEVICE_3_ALARMING = PointTypeParameter(
            parameter_number=23,
            parameter_name='Device 3 Alarming',
            parameter_desc='If enabled, device alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled). Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, device alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled). Note: This parameter is persistent.
        """

        DEVICE_3_ALARM_CODE = PointTypeParameterBinary(
            parameter_number=24,
            parameter_name='Device 3 Alarm Code',
            parameter_desc='Alarm code for the device on the HART channel. Note: This parameter is persistent.',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Device 3 PV Low Alarm',
                    bit_desc='If set, the Device PV value is less than or equal to the Device PV Low Alarm Value. If clear, the Device PV value is greater than the Device PV Low Alarm Value.'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='Device 3 PV High Alarm',
                    bit_desc='If set, the Device PV value is greater than or equal to the Device PV High Alarm Value. If clear, the Device PV value is less than the Device PV High Alarm Value.'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Device 3 Point Fail Alarm',
                    bit_desc='If set, communicating with the HART Device has failed. If clear, the HART Device is operating correctly.'
                ),
            ]
        )
        """
        Alarm code for the device on the HART channel. Note: This parameter is persistent.
        """

        DEVICE_3_PV_LOW_ALARM_VALUE = PointTypeParameter(
            parameter_number=25,
            parameter_name='Device 3 PV Low Alarm Value',
            parameter_desc='Alarm value for Device PV Low Alarm. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Device PV Low Alarm. Note: This parameter is persistent.
        """

        DEVICE_3_PV_HIGH_ALARM_VALUE = PointTypeParameter(
            parameter_number=26,
            parameter_name='Device 3 PV High Alarm Value',
            parameter_desc='Alarm value for Device PV High Alarm. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Device PV High Alarm. Note: This parameter is persistent.
        """

        DEVICE_3_ALARM_DEADBAND = PointTypeParameter(
            parameter_number=27,
            parameter_name='Device 3 Alarm Deadband',
            parameter_desc='Provides a range (+) that the Device PV Value may move between without causing another alarm. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Provides a range (+) that the Device PV Value may move between without causing another alarm. Note: This parameter is persistent.
        """

        DEVICE_3_DOWNLOAD_PV = PointTypeParameter(
            parameter_number=28,
            parameter_name='Device 3 Download PV',
            parameter_desc='When the device Poll mode is set to Download PV (4), the PV value of the device is set to the Device Download PV value. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        When the device Poll mode is set to Download PV (4), the PV value of the device is set to the Device Download PV value. Note: This parameter is persistent.
        """

        DEVICE_3_LIVE_PV_VALUE = PointTypeParameter(
            parameter_number=29,
            parameter_name='Device 3 Live PV Value',
            parameter_desc='The current value of the PV returned from the card or last live value if Scan mode is set to Skip this Device or Slot modes. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        The current value of the PV returned from the card or last live value if Scan mode is set to Skip this Device or Slot modes. Note: This parameter is persistent.
        """

        DEVICE_3_IN_USE_MODE = PointTypeParameter(
            parameter_number=30,
            parameter_name='Device 3 In Use Mode',
            parameter_desc='Determines what value populates the PV parameter. Valid values are: 0 = live or last live 1 = failsafe value 2 = download value. Overrides failsafe mode except when in live mode. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        Determines what value populates the PV parameter. Valid values are: 0 = live or last live 1 = failsafe value 2 = download value. Overrides failsafe mode except
        when in live mode. Note: This parameter is persistent.
        """

        DEVICE_3_IN_USE_STATUS = PointTypeParameter(
            parameter_number=31,
            parameter_name='Device 3 In Use Status',
            parameter_desc='Status of what value is being used to populate the PV. Valid values are: 0 = live or last live value without failure 1 = last live/scanning disabled 2 = failed to last live value 3 = failed to download value 4 = failed to failsafe value 5 = set to download value 6 = set to failsafe value. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-6'
        )
        """
        Status of what value is being used to populate the PV. Valid values are: 0 = live or last live value without failure 1 = last live/scanning disabled 2 = failed
        to last live value 3 = failed to download value 4 = failed to failsafe value 5 = set to download value 6 = set to failsafe value. Note: This parameter is
        persistent.
        """

        DEVICE_4_ALARMING = PointTypeParameter(
            parameter_number=32,
            parameter_name='Device 4 Alarming',
            parameter_desc='If enabled, device alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled). Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, device alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled). Note: This parameter is persistent.
        """

        DEVICE_4_ALARM_CODE = PointTypeParameterBinary(
            parameter_number=33,
            parameter_name='Device 4 Alarm Code',
            parameter_desc='Alarm code for the device on the HARTchannel. Note: This parameter is persistent.',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Device 4 PV Low Alarm',
                    bit_desc='If set, the Device PV value is less than or equal to the Device PV Low Alarm Value. If clear, the Device PV value is greater than the Device PV Low Alarm Value.'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='Device 4 PV High Alarm',
                    bit_desc='If set, the Device PV value is greater than or equal to the Device PV High Alarm Value. If clear, the Device PV value is less than the Device PV High Alarm Value.'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Device 4 Point Fail Alarm',
                    bit_desc='If set, communicating with the HART Device has failed. If clear, the HART Device is operating correctly.'
                ),
            ]
        )
        """
        Alarm code for the device on the HARTchannel. Note: This parameter is persistent.
        """

        DEVICE_4_PV_LOW_ALARM_VALUE = PointTypeParameter(
            parameter_number=34,
            parameter_name='Device 4 PV Low Alarm Value',
            parameter_desc='Alarm value for Device PV Low Alarm. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Device PV Low Alarm. Note: This parameter is persistent.
        """

        DEVICE_4_PV_HIGH_ALARM_VALUE = PointTypeParameter(
            parameter_number=35,
            parameter_name='Device 4 PV High Alarm Value',
            parameter_desc='Alarm value for Device PV High Alarm. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Device PV High Alarm. Note: This parameter is persistent.
        """

        DEVICE_4_ALARM_DEADBAND = PointTypeParameter(
            parameter_number=36,
            parameter_name='Device 4 Alarm Deadband',
            parameter_desc='Provides a range (+) that the Device PV Value may move between without causing another alarm. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Provides a range (+) that the Device PV Value may move between without causing another alarm. Note: This parameter is persistent.
        """

        DEVICE_4_DOWNLOAD_PV = PointTypeParameter(
            parameter_number=37,
            parameter_name='Device 4 Download PV',
            parameter_desc='When the device Poll Mode is set to Download PV (4), the PV value of the device is set to the Device Download PV value. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        When the device Poll Mode is set to Download PV (4), the PV value of the device is set to the Device Download PV value. Note: This parameter is persistent.
        """

        DEVICE_4_LIVE_PV_VALUE = PointTypeParameter(
            parameter_number=38,
            parameter_name='Device 4 Live PV Value',
            parameter_desc='The current value of the PV returned from the card or last live value if scan mode is set to Skip this Device or Slot modes. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        The current value of the PV returned from the card or last live value if scan mode is set to Skip this Device or Slot modes. Note: This parameter is persistent.
        """

        DEVICE_4_IN_USE_MODE = PointTypeParameter(
            parameter_number=39,
            parameter_name='Device 4 In Use Mode',
            parameter_desc='Determines what value populates the PV parameter. Valid values are: 0 = live or last live 1 = failsafe value 2 = download value. Overrides failsafe mode except when in live mode. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        Determines what value populates the PV parameter. Valid values are: 0 = live or last live 1 = failsafe value 2 = download value. Overrides failsafe mode except
        when in live mode. Note: This parameter is persistent.
        """

        DEVICE_4_IN_USE_STATUS = PointTypeParameter(
            parameter_number=40,
            parameter_name='Device 4 In Use Status',
            parameter_desc='Status of what value is being used to populate the PV. Valid values are: 0 = live or last live value without failure 1 = last live/scanning disabled 2 = failed to last live value 3 = failed to download value 4 = failed to failsafe value 5 = set to download value 6 = set to failsafe value Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-6'
        )
        """
        Status of what value is being used to populate the PV. Valid values are: 0 = live or last live value without failure 1 = last live/scanning disabled 2 = failed
        to last live value 3 = failed to download value 4 = failed to failsafe value 5 = set to download value 6 = set to failsafe value Note: This parameter is
        persistent.
        """

        DEVICE_5_ALARMING = PointTypeParameter(
            parameter_number=41,
            parameter_name='Device 5 Alarming',
            parameter_desc='If enabled, device alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled). Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If enabled, device alarms may be generated and sent to the Alarm Log. Valid values are 0 (Disabled) and 1 (Enabled). Note: This parameter is persistent.
        """

        DEVICE_5_ALARM_CODE = PointTypeParameterBinary(
            parameter_number=42,
            parameter_name='Device 5 Alarm Code',
            parameter_desc='Alarm code for the device on the HART channel. Note: This parameter is persistent.',
            data_type=dt.BIN,
            access='R/O',
            value_range='0x00-0xFF',
            bits=[
                BitDescriptor(
                    bit_number=0,
                    bit_name='Device 5 PV Low Alarm',
                    bit_desc='If set, the Device PV value is less than or equal to the Device PV Low Alarm Value. If clear, the Device PV value is greater than the Device PV Low Alarm Value.'
                ),
                BitDescriptor(
                    bit_number=2,
                    bit_name='Device 5 PV High Alarm',
                    bit_desc='If set, the Device PV value is greater than or equal to the Device PV High Alarm Value. If clear, the Device PV value is less than the Device PV High Alarm Value.'
                ),
                BitDescriptor(
                    bit_number=6,
                    bit_name='Device 5 Point Fail Alarm',
                    bit_desc='If set, communicating with the HART device has failed. If clear, the HART device is operating correctly.'
                ),
            ]
        )
        """
        Alarm code for the device on the HART channel. Note: This parameter is persistent.
        """

        DEVICE_5_PV_LOW_ALARM_VALUE = PointTypeParameter(
            parameter_number=43,
            parameter_name='Device 5 PV Low Alarm Value',
            parameter_desc='Alarm value for Device PV Low Alarm. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Device PV Low Alarm. Note: This parameter is persistent.
        """

        DEVICE_5_PV_HIGH_ALARM_VALUE = PointTypeParameter(
            parameter_number=44,
            parameter_name='Device 5 PV High Alarm Value',
            parameter_desc='Alarm value for Device PV High Alarm. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Alarm value for Device PV High Alarm. Note: This parameter is persistent.
        """

        DEVICE_5_ALARM_DEADBAND = PointTypeParameter(
            parameter_number=45,
            parameter_name='Device 5 Alarm Deadband',
            parameter_desc='Provides a range (+) in which the Device PV Value may move between without causing another alarm. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Provides a range (+) in which the Device PV Value may move between without causing another alarm. Note: This parameter is persistent.
        """

        DEVICE_5_DOWNLOAD_PV = PointTypeParameter(
            parameter_number=46,
            parameter_name='Device 5 Download PV',
            parameter_desc='When the device Poll Mode is set to Download PV (4), the PV value of the device is set to the Device Download PV value. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        When the device Poll Mode is set to Download PV (4), the PV value of the device is set to the Device Download PV value. Note: This parameter is persistent.
        """

        DEVICE_5_LIVE_PV_VALUE = PointTypeParameter(
            parameter_number=47,
            parameter_name='Device 5 Live PV Value',
            parameter_desc='The current value of the PV returned from the card or last live value if scan mode is set to Skip this Device or Slot modes. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        The current value of the PV returned from the card or last live value if scan mode is set to Skip this Device or Slot modes. Note: This parameter is persistent.
        """

        DEVICE_5_IN_USE_MODE = PointTypeParameter(
            parameter_number=48,
            parameter_name='Device 5 In Use Mode',
            parameter_desc='Determines what value is used to populate the PV parameter. Valid values are: 0 = live or last live 1 = failsafe value 2 = download value. Overrides failsafe mode except when in live mode. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        Determines what value is used to populate the PV parameter. Valid values are: 0 = live or last live 1 = failsafe value 2 = download value. Overrides failsafe
        mode except when in live mode. Note: This parameter is persistent.
        """

        DEVICE_5_IN_USE_STATUS = PointTypeParameter(
            parameter_number=49,
            parameter_name='Device 5 In Use Status',
            parameter_desc='Status of what value is being used to populate the PV. Valid values are: 0 = live or last live value without failure 1 = last live/scanning disabled 2 = failed to last live value 3 = failed to download value 4 = failed to failsafe value 5 = set to download value 6 = set to failsafe value Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-6'
        )
        """
        Status of what value is being used to populate the PV. Valid values are: 0 = live or last live value without failure 1 = last live/scanning disabled 2 = failed
        to last live value 3 = failed to download value 4 = failed to failsafe value 5 = set to download value 6 = set to failsafe value Note: This parameter is
        persistent.
        """

        UNITS_TAG = PointTypeParameter(
            parameter_number=50,
            parameter_name='Units Tag',
            parameter_desc='Describes the units the HART AI uses. Values must be primarily ASCII characters. Note: This parameter is persistent.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each ASCII character'
        )
        """
        Describes the units the HART AI uses. Values must be primarily ASCII characters. Note: This parameter is persistent.
        """





class HART(PointType):
    """HART Point Type"""

    point_type_number: int = 85
    """Point Type ID"""

    point_type_desc: str = 'HART Point Type'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        CHANNEL_VERSION = PointTypeParameter(
            parameter_number=0,
            parameter_name='Channel Version',
            parameter_desc='HART 1: Version number for the firmware in the channel.; HART 2: Version number for the firmware in the channel.',
            data_type=dt.AC,
            access='R/O',
            value_range='HART 1: 0x20 0x5F for each byte; HART 2: 0x20 0x5F for each byte'
        )
        """
        HART 1: Version number for the firmware in the channel.; HART 2: Version number for the firmware in the channel.
        """

        CHANNEL_I_O = PointTypeParameter(
            parameter_number=1,
            parameter_name='Channel I/O',
            parameter_desc='HART 1: Indicates if a channel is an analog input or output. Valid values are 0 (Input) and 1 (Output). Note: This parameter is persistent.; HART 2: Indicates if a channel is an analog input or output. Valid values are 0 (Input) and 1 (Output). Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='HART 1: 0 1; HART 2: 0 1'
        )
        """
        HART 1: Indicates if a channel is an analog input or output. Valid values are 0 (Input) and 1 (Output). Note: This parameter is persistent.; HART 2: Indicates
        if a channel is an analog input or output. Valid values are 0 (Input) and 1 (Output). Note: This parameter is persistent.
        """

        HART_COMMUNICATION_MODE = PointTypeParameter(
            parameter_number=2,
            parameter_name='HART Communication Mode',
            parameter_desc='HART 1: If disabled, all HART communication stops and no changes occur unless manually entered. Valid values are: 0 = Disabled 1 = Point to Point, 2 = Multidrop Note: This parameter is persistent.; HART 2: If disabled, all HART communication stops and no changes occur unless manually entered. Bits 0-6: 0 = Disabled 1 = Point to Point, 2 = Multidrop Bit 7: 0 = Primary Master 1 = Secondary Master Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='HART 1: 0-2; HART 2: Bits 0-6: 0 - 2 Bit7: 0 1'
        )
        """
        HART 1: If disabled, all HART communication stops and no changes occur unless manually entered. Valid values are: 0 = Disabled 1 = Point to Point, 2 = Multidrop
        Note: This parameter is persistent.; HART 2: If disabled, all HART communication stops and no changes occur unless manually entered. Bits 0-6: 0 = Disabled 1 =
        Point to Point, 2 = Multidrop Bit 7: 0 = Primary Master 1 = Secondary Master Note: This parameter is persistent.
        """

        NUMBER_OF_DEVICES_CONNECTED = PointTypeParameter(
            parameter_number=3,
            parameter_name='Number of Devices Connected',
            parameter_desc='Indicates the number of devices connected in multidrop mode. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1-5'
        )
        """
        Indicates the number of devices connected in multidrop mode. Note: This parameter is persistent.
        """

        HART_COM_STATUS = PointTypeParameter(
            parameter_number=4,
            parameter_name='HART COM Status',
            parameter_desc='HART 1: 0 = Not Scanning 1 = Scanning Normal 2 = Dual Master Detected 3 = Pass thru; HART 2: 0 = Not Scanning 1 = Scanning Normal 2 = Dual Master Detected 3 = Pass thru 4 = Device in Burst Mode Detected .',
            data_type=dt.UINT8,
            access='R/O',
            value_range='HART 1: 0-3; HART 2: 0-4'
        )
        """
        HART 1: 0 = Not Scanning 1 = Scanning Normal 2 = Dual Master Detected 3 = Pass thru; HART 2: 0 = Not Scanning 1 = Scanning Normal 2 = Dual Master Detected 3 =
        Pass thru 4 = Device in Burst Mode Detected .
        """

        ANALOG_MODE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Analog Mode',
            parameter_desc='Analog Input: 0 = Disabled 1 = Enabled 3 = Calibration - EU Value not longer updates and freezes at this value. 4 = Cancel Calibration (restore previous calibration) Analog Output: 0 = Disabled 1 = Enabled (Auto) 2 = Manua Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-4'
        )
        """
        Analog Input: 0 = Disabled 1 = Enabled 3 = Calibration - EU Value not longer updates and freezes at this value. 4 = Cancel Calibration (restore previous
        calibration) Analog Output: 0 = Disabled 1 = Enabled (Auto) 2 = Manua Note: This parameter is persistent.
        """

        ROC_PROTOCOL_PASS_THRU_ENABLE = PointTypeParameter(
            parameter_number=6,
            parameter_name='ROC Protocol Pass Thru Enable',
            parameter_desc='Enables ROC protocol pass thru communication. 0 = Disabled, 1 = Enabled 0 = Disable 1 = Strip all bytes, including preambles, before message 2 = Dont alter the message, return all bytes. This parameter is only R/W (to other than 0) if the license is available for this feature. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        Enables ROC protocol pass thru communication. 0 = Disabled, 1 = Enabled 0 = Disable 1 = Strip all bytes, including preambles, before message 2 = Dont alter the
        message, return all bytes. This parameter is only R/W (to other than 0) if the license is available for this feature. Note: This parameter is persistent.
        """

        ROC_PROTOCOL_PASS_THRU_TIMEOUT = PointTypeParameter(
            parameter_number=7,
            parameter_name='ROC Protocol Pass Thru Timeout',
            parameter_desc='HART 1: Timeout in milliseconds to resume polling of HART device after receiving ROC protocol pass thru communication. Note: This parameter is persistent.; HART 2: Enables or disables internal resistor. Bits 0-30 are unused. Valid values for Bit 31 are 0 (Enabled) and 1 (Disabled). Note: This parameter is persistent.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='HART 1: 0 4,294,967,295; HART 2: 0 4,294,967,295'
        )
        """
        HART 1: Timeout in milliseconds to resume polling of HART device after receiving ROC protocol pass thru communication. Note: This parameter is persistent.; HART
        2: Enables or disables internal resistor. Bits 0-30 are unused. Valid values for Bit 31 are 0 (Enabled) and 1 (Disabled). Note: This parameter is persistent.
        """

        EU_VALUE = PointTypeParameter(
            parameter_number=8,
            parameter_name='EU Value',
            parameter_desc='EU value of analog input or output. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        EU value of analog input or output. Note: This parameter is persistent.
        """

        FAILSAFE_ON_RESET = PointTypeParameter(
            parameter_number=9,
            parameter_name='Failsafe on Reset',
            parameter_desc='0 = Use last EU Value on reset 1 = Use Failsafe value on Reset If enabled (1), the raw D/A Output will be set to the Failsafe value on a restart of any kind. If disabled, the last EU Value or the last saved EU Value will be used to determine the Raw D/A Output after a restart. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        0 = Use last EU Value on reset 1 = Use Failsafe value on Reset If enabled (1), the raw D/A Output will be set to the Failsafe value on a restart of any kind. If
        disabled, the last EU Value or the last saved EU Value will be used to determine the Raw D/A Output after a restart. Note: This parameter is persistent.
        """

        FAILSAFE_VALUE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Failsafe Value',
            parameter_desc='The value outputted when the unit is started and the Failsafe on Reset Parameter is set to 1, Use Failsafe value on reset. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        The value outputted when the unit is started and the Failsafe on Reset Parameter is set to 1, Use Failsafe value on reset. Note: This parameter is persistent.
        """

        MANUAL_VALUE = PointTypeParameter(
            parameter_number=11,
            parameter_name='Manual Value',
            parameter_desc='Indicates the EU value used as an output when Scanning is in manual mode. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Indicates the EU value used as an output when Scanning is in manual mode. Note: This parameter is persistent.
        """

        AUTO_VALUE = PointTypeParameter(
            parameter_number=12,
            parameter_name='Auto Value',
            parameter_desc='Indicates the EU value used as an output when Scanning is in auto mode. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Indicates the EU value used as an output when Scanning is in auto mode. Note: This parameter is persistent.
        """

        PHYSICAL_VALUE = PointTypeParameter(
            parameter_number=13,
            parameter_name='Physical Value',
            parameter_desc='Indicates the current value of the output in Engineering Units. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Indicates the current value of the output in Engineering Units. Note: This parameter is persistent.
        """

        PHYSICAL_RAW_D_A_OUTPUT = PointTypeParameter(
            parameter_number=14,
            parameter_name='Physical Raw D/A Output',
            parameter_desc='Calculated Digital-to-Analog value based upon the EU value currently being outputted EU Value.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0-65,535'
        )
        """
        Calculated Digital-to-Analog value based upon the EU value currently being outputted EU Value.
        """

        CABRIBRATION_LIVE_VALUE = PointTypeParameter(
            parameter_number=15,
            parameter_name='Cabribration Live Value',
            parameter_desc='Live value when calibrating an AI. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Live value when calibrating an AI. Note: This parameter is persistent.
        """

        EU_CALIBRATION_VALUE_ZERO = PointTypeParameter(
            parameter_number=16,
            parameter_name='EU Calibration Value Zero',
            parameter_desc='Indicates the zero EU calibration value. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Indicates the zero EU calibration value. Note: This parameter is persistent.
        """

        EU_CALIBRATION_VALUE_SPAN = PointTypeParameter(
            parameter_number=17,
            parameter_name='EU Calibration Value Span',
            parameter_desc='Indicates the span EU calibration value. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Indicates the span EU calibration value. Note: This parameter is persistent.
        """

        EU_RAW_VALUE = PointTypeParameter(
            parameter_number=18,
            parameter_name='EU Raw Value',
            parameter_desc='Indicates the raw EU value of analog input or output. Note: This parameter is persistent.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Indicates the raw EU value of analog input or output. Note: This parameter is persistent.
        """

        EU_RAW_CALIBRATION_ZERO = PointTypeParameter(
            parameter_number=19,
            parameter_name='EU Raw Calibration Zero',
            parameter_desc='Indicates the zero raw EU calibration value. Note: This parameter is persistent.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Indicates the zero raw EU calibration value. Note: This parameter is persistent.
        """

        EU_RAW_CALIBRATION_SPAN = PointTypeParameter(
            parameter_number=20,
            parameter_name='EU Raw Calibration Span',
            parameter_desc='Indicates the span raw EU calibration value. Note: This parameter is persistent.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Indicates the span raw EU calibration value. Note: This parameter is persistent.
        """

        DEVICE_1_POLL_MODE = PointTypeParameter(
            parameter_number=21,
            parameter_name='Device 1 Poll Mode',
            parameter_desc='HART 1: Indicates the polling mode for device. Valid values are: 0 = Skip This Device 1 = Primary Variable Only 2 = All Dynamic Variables 3 = All Slot Variables 4 = Full Update Note: This parameter is persistent.; HART 2: Bit 7: Update State: 1=update, 0=no update Bits 0-6: 0 = Skip This Device 1 = Primary Variable Only 2 = All Dynamic Variables 3 = All Slot Variables Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='HART 1: 0-5; HART 2: Bit 7: 0 1 Bits 0-6: 0 -3'
        )
        """
        HART 1: Indicates the polling mode for device. Valid values are: 0 = Skip This Device 1 = Primary Variable Only 2 = All Dynamic Variables 3 = All Slot Variables
        4 = Full Update Note: This parameter is persistent.; HART 2: Bit 7: Update State: 1=update, 0=no update Bits 0-6: 0 = Skip This Device 1 = Primary Variable Only
        2 = All Dynamic Variables 3 = All Slot Variables Note: This parameter is persistent.
        """

        DEVICE_1_POLLING_ADDRESS = PointTypeParameter(
            parameter_number=22,
            parameter_name='Device 1 Polling Address',
            parameter_desc='Polling address for device 1.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-15'
        )
        """
        Polling address for device 1.
        """

        DEVICE_1_STATUS = PointTypeParameter(
            parameter_number=23,
            parameter_name='Device 1 Status',
            parameter_desc='0 = No Device Found 1 = Communicating 2 = Comm Error',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        0 = No Device Found 1 = Communicating 2 = Comm Error
        """

        DEVICE_1_ACTUAL_SCAN_PERIOD = PointTypeParameter(
            parameter_number=24,
            parameter_name='Device 1 Actual Scan Period',
            parameter_desc='Period at which device 1 is being updated.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Period at which device 1 is being updated.
        """

        DEVICE_1_TAG = PointTypeParameter(
            parameter_number=25,
            parameter_name='Device 1 Tag',
            parameter_desc='Tag that resides in device 1. Note: This parameter is persistent.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x5F for each byte'
        )
        """
        Tag that resides in device 1. Note: This parameter is persistent.
        """

        DEVICE_1_RESPONSE_CODE_STATUS = PointTypeParameter(
            parameter_number=26,
            parameter_name='Device 1 Response Code/Status',
            parameter_desc='Response code and status received from device 1.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Response code and status received from device 1.
        """

        DEVICE_1_ACTIVE_ALARMS = PointTypeParameter(
            parameter_number=27,
            parameter_name='Device 1 Active Alarms',
            parameter_desc='Active alarms reported by device 1.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Active alarms reported by device 1.
        """

        DEVICE_1_CURRENT_MA_ = PointTypeParameter(
            parameter_number=28,
            parameter_name='Device 1 Current (mA)',
            parameter_desc='Current in milliamps reported by device 1.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current in milliamps reported by device 1.
        """

        DEVICE_1_PERCENT_OF_RANGE = PointTypeParameter(
            parameter_number=29,
            parameter_name='Device 1 Percent of Range',
            parameter_desc='Percent of range reported by device 1.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Percent of range reported by device 1.
        """

        DEVICE_1_FAIL_SAFE_ENABLE = PointTypeParameter(
            parameter_number=30,
            parameter_name='Device 1 Fail Safe Enable',
            parameter_desc='HART 1: Enables the use of fail safe values for the dynamic variables when the unit resets for device 1: Note: This parameter is persistent.; HART 2: Enables the use of fail safe or download values for the dynamic variables when the unit detects an error for device 1. Valid values are: 0 = live or last live 1 = failsafe values 2 = download value for PV, failsafe values for other dynamic variables. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='HART 1: 0-1; HART 2: 0-1'
        )
        """
        HART 1: Enables the use of fail safe values for the dynamic variables when the unit resets for device 1: Note: This parameter is persistent.; HART 2: Enables
        the use of fail safe or download values for the dynamic variables when the unit detects an error for device 1. Valid values are: 0 = live or last live 1 =
        failsafe values 2 = download value for PV, failsafe values for other dynamic variables. Note: This parameter is persistent.
        """

        DEVICE_1_PV_UNITS = PointTypeParameter(
            parameter_number=31,
            parameter_name='Device 1 PV Units',
            parameter_desc='Units code for primary variable reported by device 1.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code for primary variable reported by device 1.
        """

        DEVICE_1_PV = PointTypeParameter(
            parameter_number=32,
            parameter_name='Device 1 PV',
            parameter_desc='Value of primary variable of device 1. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of primary variable of device 1. Note: This parameter is persistent.
        """

        DEVICE_1_PV_FAIL_SAFE_VALUE = PointTypeParameter(
            parameter_number=33,
            parameter_name='Device 1 PV Fail Safe Value',
            parameter_desc='Primary fail safe value for device 1. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Primary fail safe value for device 1. Note: This parameter is persistent.
        """

        DEVICE_1_SV_UNITS = PointTypeParameter(
            parameter_number=34,
            parameter_name='Device 1 SV Units',
            parameter_desc='Units code for secondary variable reported by device 1.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code for secondary variable reported by device 1.
        """

        DEVICE_1_SV = PointTypeParameter(
            parameter_number=35,
            parameter_name='Device 1 SV',
            parameter_desc='Value of secondary variable of device 1. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of secondary variable of device 1. Note: This parameter is persistent.
        """

        DEVICE_1_SV_FAIL_SAFE_VALUE = PointTypeParameter(
            parameter_number=36,
            parameter_name='Device 1 SV Fail Safe Value',
            parameter_desc='Secondary fail safe value for device 1. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Secondary fail safe value for device 1. Note: This parameter is persistent.
        """

        DEVICE_1_TV_UNITS = PointTypeParameter(
            parameter_number=37,
            parameter_name='Device 1 TV Units',
            parameter_desc='Units code for tertiary variable reported by device 1.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code for tertiary variable reported by device 1.
        """

        DEVICE_1_TV = PointTypeParameter(
            parameter_number=38,
            parameter_name='Device 1 TV',
            parameter_desc='Value of tertiary variable of device 1. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of tertiary variable of device 1. Note: This parameter is persistent.
        """

        DEVICE_1_TV_FAIL_SAFE_ON_RESET_VALUE = PointTypeParameter(
            parameter_number=39,
            parameter_name='Device 1 TV Fail Safe on Reset Value',
            parameter_desc='Tertiary fail safe value for device 1. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Tertiary fail safe value for device 1. Note: This parameter is persistent.
        """

        DEVICE_1_FV_UNITS = PointTypeParameter(
            parameter_number=40,
            parameter_name='Device 1 FV Units',
            parameter_desc='Units code for fourth variable reported by device 1.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code for fourth variable reported by device 1.
        """

        DEVICE_1_FV = PointTypeParameter(
            parameter_number=41,
            parameter_name='Device 1 FV',
            parameter_desc='Value of fourth variable of device 1. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of fourth variable of device 1. Note: This parameter is persistent.
        """

        DEVICE_1_FV_FAIL_SAFE_ON_RESET_VALUE = PointTypeParameter(
            parameter_number=42,
            parameter_name='Device 1 FV Fail Safe on Reset Value',
            parameter_desc='Fourth fail safe value of device 1. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Fourth fail safe value of device 1. Note: This parameter is persistent.
        """

        DEVICE_1_SLOT_0_ASSIGNMENT = PointTypeParameter(
            parameter_number=43,
            parameter_name='Device 1 Slot 0 Assignment',
            parameter_desc='Slot 0 variable to request from device 1. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 0 variable to request from device 1. Note: This parameter is persistent.
        """

        DEVICE_1_SLOT_0_UNITS = PointTypeParameter(
            parameter_number=44,
            parameter_name='Device 1 Slot 0 Units',
            parameter_desc='Units of slot 0 variable requested from device 1.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 0 variable requested from device 1.
        """

        DEVICE_1_SLOT_0_VARIABLE = PointTypeParameter(
            parameter_number=45,
            parameter_name='Device 1 Slot 0 Variable',
            parameter_desc='Value of slot 0 variable requested from device 1.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 0 variable requested from device 1.
        """

        DEVICE_1_SLOT_1_ASSIGNMENT = PointTypeParameter(
            parameter_number=46,
            parameter_name='Device 1 Slot 1 Assignment',
            parameter_desc='Slot 1 variable to request from device 1. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 1 variable to request from device 1. Note: This parameter is persistent.
        """

        DEVICE_1_SLOT_1_UNITS = PointTypeParameter(
            parameter_number=47,
            parameter_name='Device 1 Slot 1 Units',
            parameter_desc='Units of slot 1 variable requested from device 1.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 1 variable requested from device 1.
        """

        DEVICE_1_SLOT_1_VARIABLE = PointTypeParameter(
            parameter_number=48,
            parameter_name='Device 1 Slot 1 Variable',
            parameter_desc='Value of slot 1 variable requested from device 1.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 1 variable requested from device 1.
        """

        DEVICE_1_SLOT_2_ASSIGNMENT = PointTypeParameter(
            parameter_number=49,
            parameter_name='Device 1 Slot 2 Assignment',
            parameter_desc='Slot 2 variable to request from device 1. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 2 variable to request from device 1. Note: This parameter is persistent.
        """

        DEVICE_1_SLOT_2_UNITS = PointTypeParameter(
            parameter_number=50,
            parameter_name='Device 1 Slot 2 Units',
            parameter_desc='Units of slot 2 variable requested from device 1.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0 - 255'
        )
        """
        Units of slot 2 variable requested from device 1.
        """

        DEVICE_1_SLOT_2_VARIABLE = PointTypeParameter(
            parameter_number=51,
            parameter_name='Device 1 Slot 2 Variable',
            parameter_desc='Value of slot 2 variable requested from device 1.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 2 variable requested from device 1.
        """

        DEVICE_1_SLOT_3_ASSIGNMENT = PointTypeParameter(
            parameter_number=52,
            parameter_name='Device 1 Slot 3 Assignment',
            parameter_desc='Slot 3 variable to request from device 1. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='-255'
        )
        """
        Slot 3 variable to request from device 1. Note: This parameter is persistent.
        """

        DEVICE_1_SLOT_3_UNITS = PointTypeParameter(
            parameter_number=53,
            parameter_name='Device 1 Slot 3 Units',
            parameter_desc='Units of slot 3 variable requested from device 1.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='255'
        )
        """
        Units of slot 3 variable requested from device 1.
        """

        DEVICE_1_SLOT_3_VARIABLE = PointTypeParameter(
            parameter_number=54,
            parameter_name='Device 1 Slot 3 Variable',
            parameter_desc='Value of slot 3 variable requested from device 1.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 3 variable requested from device 1.
        """

        DEVICE_1_MESSAGE = PointTypeParameter(
            parameter_number=55,
            parameter_name='Device 1 Message',
            parameter_desc='Device 1 message.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 - 0x5F for each byte'
        )
        """
        Device 1 message.
        """

        DEVICE_1_DESCRIPTOR = PointTypeParameter(
            parameter_number=56,
            parameter_name='Device 1 Descriptor',
            parameter_desc='Device 1 descriptor.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x5F for each byte'
        )
        """
        Device 1 descriptor.
        """

        DEVICE_1_MANUFACTURES_ID_AND_DEVICE_ID = PointTypeParameter(
            parameter_number=57,
            parameter_name='Device 1 Manufactures ID and Device ID',
            parameter_desc='Device 1 manufactures ID and devices ID',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Device 1 manufactures ID and devices ID
        """

        DEVICE_1_SERIAL_NUMBER = PointTypeParameter(
            parameter_number=58,
            parameter_name='Device 1 Serial Number',
            parameter_desc='Device 1 serial number.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-4,294,967,295'
        )
        """
        Device 1 serial number.
        """

        DEVICE_1_ID_NUMBER = PointTypeParameter(
            parameter_number=59,
            parameter_name='Device 1 ID Number',
            parameter_desc='Device 1 ID number.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='4,294,967,295'
        )
        """
        Device 1 ID number.
        """

        DEVICE_1_SENSOR_UNITS = PointTypeParameter(
            parameter_number=60,
            parameter_name='Device 1 Sensor Units',
            parameter_desc='Device 1 sensor units.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Device 1 sensor units.
        """

        DEVICE_1_UPPER_SENSOR_LIMIT = PointTypeParameter(
            parameter_number=61,
            parameter_name='Device 1 Upper Sensor Limit',
            parameter_desc='Device 1 upper sensor limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 1 upper sensor limit.
        """

        DEVICE_1_LOWER_SENSOR_LIMIT = PointTypeParameter(
            parameter_number=62,
            parameter_name='Device 1 Lower Sensor Limit',
            parameter_desc='Device 1 lower sensor limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 1 lower sensor limit.
        """

        DEVICE_1_MINIMUM_SPAN = PointTypeParameter(
            parameter_number=63,
            parameter_name='Device 1 Minimum Span',
            parameter_desc='Device 1 minimum sensor span.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 1 minimum sensor span.
        """

        DEVICE_1_OUTPUT_UNITS = PointTypeParameter(
            parameter_number=64,
            parameter_name='Device 1 Output Units',
            parameter_desc='Device 1 Output Units',
            data_type=dt.UINT8,
            access='R/O',
            value_range='255'
        )
        """
        Device 1 Output Units
        """

        DEVICE_1_UPPER_OUTPUT_LIMIT = PointTypeParameter(
            parameter_number=65,
            parameter_name='Device 1 Upper Output Limit',
            parameter_desc='Device 1 upper output limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 1 upper output limit.
        """

        DEVICE_1_LOWER_OUTPUT_LIMIT = PointTypeParameter(
            parameter_number=66,
            parameter_name='Device 1 Lower Output Limit',
            parameter_desc='Device 1 lower output limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 1 lower output limit.
        """

        DEVICE_1_DAMPING_VALUE = PointTypeParameter(
            parameter_number=67,
            parameter_name='Device 1 Damping Value',
            parameter_desc='Device 1 damping value.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 1 damping value.
        """

        DEVICE_2_POLL_MODE = PointTypeParameter(
            parameter_number=68,
            parameter_name='Device 2 Poll Mode',
            parameter_desc='HART 1: Polling mode for device 2. Valid values are: 0 = Skip This Device 1 = Primary Variable Only 2 = All Dynamic Variables 3 = All Slot Variables 4 = Full Update Note: This parameter is persistent.; HART 2: Polling mode for device 2. Bit 7: Update State: 1=update, 0=no update Bits 0-6: 0 = Skip This Device 1 = Primary Variable Only 2 = All Dynamic Variables 3 = All Slot Variables Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='HART 1: 0-255; HART 2: Bit 7: 0 1 Bits 0-6: 0 -3'
        )
        """
        HART 1: Polling mode for device 2. Valid values are: 0 = Skip This Device 1 = Primary Variable Only 2 = All Dynamic Variables 3 = All Slot Variables 4 = Full
        Update Note: This parameter is persistent.; HART 2: Polling mode for device 2. Bit 7: Update State: 1=update, 0=no update Bits 0-6: 0 = Skip This Device 1 =
        Primary Variable Only 2 = All Dynamic Variables 3 = All Slot Variables Note: This parameter is persistent.
        """

        DEVICE_2_POLLING_ADDRESS = PointTypeParameter(
            parameter_number=69,
            parameter_name='Device 2 Polling Address',
            parameter_desc='Polling address for device 2.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-15'
        )
        """
        Polling address for device 2.
        """

        DEVICE_2_STATUS = PointTypeParameter(
            parameter_number=70,
            parameter_name='Device 2 Status',
            parameter_desc='0 = No Device Found 1 = Communicating 2 = Comm Error (HART 2)',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        0 = No Device Found 1 = Communicating 2 = Comm Error (HART 2)
        """

        DEVICE_2_ACTUAL_SCAN_PERIOD = PointTypeParameter(
            parameter_number=71,
            parameter_name='Device 2 Actual Scan Period',
            parameter_desc='Period at which device 2 is being updated.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Period at which device 2 is being updated.
        """

        DEVICE_2_TAG = PointTypeParameter(
            parameter_number=72,
            parameter_name='Device 2 Tag',
            parameter_desc='Tag that resides in device 2. Note: This parameter is persistent.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x5F for each byte'
        )
        """
        Tag that resides in device 2. Note: This parameter is persistent.
        """

        DEVICE_2_RESPONSE_CODE_STATUS = PointTypeParameter(
            parameter_number=73,
            parameter_name='Device 2 Response Code/Status',
            parameter_desc='Response code and status received from device 2.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Response code and status received from device 2.
        """

        DEVICE_2_ACTIVE_ALARMS = PointTypeParameter(
            parameter_number=74,
            parameter_name='Device 2 Active Alarms',
            parameter_desc='Active alarms reported by device 2.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Active alarms reported by device 2.
        """

        DEVICE_2_CURRENT_MA_ = PointTypeParameter(
            parameter_number=75,
            parameter_name='Device 2 Current (mA)',
            parameter_desc='Current in milliamps reported by device 2.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current in milliamps reported by device 2.
        """

        DEVICE_2_PERCENT_OF_RANGE = PointTypeParameter(
            parameter_number=76,
            parameter_name='Device 2 Percent of Range',
            parameter_desc='Percent of range reported by device 2.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Percent of range reported by device 2.
        """

        DEVICE_2_FAIL_SAFE_ON_RESET_ENABLE = PointTypeParameter(
            parameter_number=77,
            parameter_name='Device 2 Fail Safe on Reset Enable',
            parameter_desc='HART 1: Enables the use of fail values for the dynamic variables when the unit is reset for device 2: Note: This parameter is persistent.; HART 2: Enables the use of fail safe or download values for the dynamic variables when the unit detects an error for device 2. Valid values are: 0 = live or last live 1 = failsafe values 2 = download value for PV, failsafe values for other dynamic variables. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='HART 1: 0 1; HART 2: 0 - 1'
        )
        """
        HART 1: Enables the use of fail values for the dynamic variables when the unit is reset for device 2: Note: This parameter is persistent.; HART 2: Enables the
        use of fail safe or download values for the dynamic variables when the unit detects an error for device 2. Valid values are: 0 = live or last live 1 = failsafe
        values 2 = download value for PV, failsafe values for other dynamic variables. Note: This parameter is persistent.
        """

        DEVICE_2_PV_UNITS = PointTypeParameter(
            parameter_number=78,
            parameter_name='Device 2 PV Units',
            parameter_desc='Units code for primary variable reported by device 2.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='-255'
        )
        """
        Units code for primary variable reported by device 2.
        """

        DEVICE_2_PV = PointTypeParameter(
            parameter_number=79,
            parameter_name='Device 2 PV',
            parameter_desc='Value of primary variable of device 2. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of primary variable of device 2. Note: This parameter is persistent.
        """

        DEVICE_2_PV_FAIL_SAFE_ON_RESET_VALUE = PointTypeParameter(
            parameter_number=80,
            parameter_name='Device 2 PV Fail Safe on Reset Value',
            parameter_desc='Primary fail safe value for device 2. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Primary fail safe value for device 2. Note: This parameter is persistent.
        """

        DEVICE_2_SV_UNITS = PointTypeParameter(
            parameter_number=81,
            parameter_name='Device 2 SV Units',
            parameter_desc='Units code for secondary variable reported by device 2.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code for secondary variable reported by device 2.
        """

        DEVICE_2_SV = PointTypeParameter(
            parameter_number=82,
            parameter_name='Device 2 SV',
            parameter_desc='Value of secondary variable of device 2. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of secondary variable of device 2. Note: This parameter is persistent.
        """

        DEVICE_2_SV_FAIL_SAFE_VALUE = PointTypeParameter(
            parameter_number=83,
            parameter_name='Device 2 SV Fail Safe Value',
            parameter_desc='Secondary fail safe value for device 2. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Secondary fail safe value for device 2. Note: This parameter is persistent.
        """

        DEVICE_2_TV_UNITS = PointTypeParameter(
            parameter_number=84,
            parameter_name='Device 2 TV Units',
            parameter_desc='Units code for tertiary variable reported by device 2.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code for tertiary variable reported by device 2.
        """

        DEVICE_2_TV = PointTypeParameter(
            parameter_number=85,
            parameter_name='Device 2 TV',
            parameter_desc='Value of tertiary variable of device 2. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of tertiary variable of device 2. Note: This parameter is persistent.
        """

        DEVICE_2_TV_FAIL_SAFE_VALUE = PointTypeParameter(
            parameter_number=86,
            parameter_name='Device 2 TV Fail Safe Value',
            parameter_desc='Tertiary fail safe value for device 2. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Tertiary fail safe value for device 2. Note: This parameter is persistent.
        """

        DEVICE_2_FV_UNITS = PointTypeParameter(
            parameter_number=87,
            parameter_name='Device 2 FV Units',
            parameter_desc='Units code for fourth variable reported by device 2.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code for fourth variable reported by device 2.
        """

        DEVICE_2_FV = PointTypeParameter(
            parameter_number=88,
            parameter_name='Device 2 FV',
            parameter_desc='Value of fourth variable of device 2. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of fourth variable of device 2. Note: This parameter is persistent.
        """

        DEVICE_2_FV_FAIL_SAFE_VALUE = PointTypeParameter(
            parameter_number=89,
            parameter_name='Device 2 FV Fail Safe Value',
            parameter_desc='Fourth fail safe value of device 2. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Fourth fail safe value of device 2. Note: This parameter is persistent.
        """

        DEVICE_2_SLOT_0_ASSIGNMENT = PointTypeParameter(
            parameter_number=90,
            parameter_name='Device 2 Slot 0 Assignment',
            parameter_desc='Slot 0 variable to request from device 2. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 0 variable to request from device 2. Note: This parameter is persistent.
        """

        DEVICE_2_SLOT_0_UNITS = PointTypeParameter(
            parameter_number=91,
            parameter_name='Device 2 Slot 0 Units',
            parameter_desc='Units of slot 0 variable requested from device 2.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 0 variable requested from device 2.
        """

        DEVICE_2_SLOT_0_VARIABLE = PointTypeParameter(
            parameter_number=92,
            parameter_name='Device 2 Slot 0 Variable',
            parameter_desc='Value of slot 0 variable requested from device 2.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 0 variable requested from device 2.
        """

        DEVICE_2_SLOT_1_ASSIGNMENT = PointTypeParameter(
            parameter_number=93,
            parameter_name='Device 2 Slot 1 Assignment',
            parameter_desc='Slot 1 variable to request from device 2. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0--255'
        )
        """
        Slot 1 variable to request from device 2. Note: This parameter is persistent.
        """

        DEVICE_2_SLOT_1_UNITS = PointTypeParameter(
            parameter_number=94,
            parameter_name='Device 2 Slot 1 Units',
            parameter_desc='Units of slot 1 variable requested from device 2.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 1 variable requested from device 2.
        """

        DEVICE_2_SLOT_1_VARIABLE = PointTypeParameter(
            parameter_number=95,
            parameter_name='Device 2 Slot 1 Variable',
            parameter_desc='Value of slot 1 variable requested from device 2.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 1 variable requested from device 2.
        """

        DEVICE_2_SLOT_2_ASSIGNMENT = PointTypeParameter(
            parameter_number=96,
            parameter_name='Device 2 Slot 2 Assignment',
            parameter_desc='Slot 2 variable to request from device 2. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='255'
        )
        """
        Slot 2 variable to request from device 2. Note: This parameter is persistent.
        """

        DEVICE_2_SLOT_2_UNITS = PointTypeParameter(
            parameter_number=97,
            parameter_name='Device 2 Slot 2 Units',
            parameter_desc='Units of slot 2 variable requested from device 2.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 2 variable requested from device 2.
        """

        DEVICE_2_SLOT_2_VARIABLE = PointTypeParameter(
            parameter_number=98,
            parameter_name='Device 2 Slot 2 Variable',
            parameter_desc='Value of slot 2 variable requested from device 2.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 2 variable requested from device 2.
        """

        DEVICE_2_SLOT_3_ASSIGNMENT = PointTypeParameter(
            parameter_number=99,
            parameter_name='Device 2 Slot 3 Assignment',
            parameter_desc='Slot 3 variable to request from device 2. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 3 variable to request from device 2. Note: This parameter is persistent.
        """

        DEVICE_2_SLOT_3_UNITS = PointTypeParameter(
            parameter_number=100,
            parameter_name='Device 2 Slot 3 Units',
            parameter_desc='Units of slot 3 variable requested from device 2.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 3 variable requested from device 2.
        """

        DEVICE_2_SLOT_3_VARIABLE = PointTypeParameter(
            parameter_number=101,
            parameter_name='Device 2 Slot 3 Variable',
            parameter_desc='Value of slot 3 variable requested from device 2.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 3 variable requested from device 2.
        """

        DEVICE_2_MESSAGE = PointTypeParameter(
            parameter_number=102,
            parameter_name='Device 2 Message',
            parameter_desc='Device 2 message.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x5F for each byte'
        )
        """
        Device 2 message.
        """

        DEVICE_2_DESCRIPTOR = PointTypeParameter(
            parameter_number=103,
            parameter_name='Device 2 Descriptor',
            parameter_desc='Device 2 descriptor.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x5F for each byte'
        )
        """
        Device 2 descriptor.
        """

        DEVICE_2_MANUFACTURES_ID_AND_DEVICE_ID = PointTypeParameter(
            parameter_number=104,
            parameter_name='Device 2 Manufactures ID and Device ID',
            parameter_desc='Device 2 manufactures ID and devices ID',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Device 2 manufactures ID and devices ID
        """

        DEVICE_2_SERIAL_NUMBER = PointTypeParameter(
            parameter_number=105,
            parameter_name='Device 2 Serial Number',
            parameter_desc='Device 2 serial number.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-4,294,967,295'
        )
        """
        Device 2 serial number.
        """

        DEVICE_2_ID_NUMBER = PointTypeParameter(
            parameter_number=106,
            parameter_name='Device 2 ID Number',
            parameter_desc='Device 2 ID number.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-4,294,967,295'
        )
        """
        Device 2 ID number.
        """

        DEVICE_2_SENSOR_UNITS = PointTypeParameter(
            parameter_number=107,
            parameter_name='Device 2 Sensor Units',
            parameter_desc='Device 2 sensor units.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Device 2 sensor units.
        """

        DEVICE_2_UPPER_SENSOR_LIMIT = PointTypeParameter(
            parameter_number=108,
            parameter_name='Device 2 Upper Sensor Limit',
            parameter_desc='Device 2 upper sensor limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 2 upper sensor limit.
        """

        DEVICE_2_LOWER_SENSOR_LIMIT = PointTypeParameter(
            parameter_number=109,
            parameter_name='Device 2 Lower Sensor Limit',
            parameter_desc='Device 2 lower sensor limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 2 lower sensor limit.
        """

        DEVICE_2_MINIMUM_SPAN = PointTypeParameter(
            parameter_number=110,
            parameter_name='Device 2 Minimum Span',
            parameter_desc='Device 2 minimum sensor span.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 2 minimum sensor span.
        """

        DEVICE_2_OUTPUT_UNITS = PointTypeParameter(
            parameter_number=111,
            parameter_name='Device 2 Output Units',
            parameter_desc='Device 2 Output Units',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Device 2 Output Units
        """

        DEVICE_2_UPPER_OUTPUT_LIMIT = PointTypeParameter(
            parameter_number=112,
            parameter_name='Device 2 Upper Output Limit',
            parameter_desc='Device 2 upper output limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 2 upper output limit.
        """

        DEVICE_2_LOWER_OUTPUT_LIMIT = PointTypeParameter(
            parameter_number=113,
            parameter_name='Device 2 Lower Output Limit',
            parameter_desc='Device 2 lower output limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 2 lower output limit.
        """

        DEVICE_2_DAMPING_VALUE = PointTypeParameter(
            parameter_number=114,
            parameter_name='Device 2 Damping Value',
            parameter_desc='Device 2 damping value.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 2 damping value.
        """

        DEVICE_3_POLL_MODE = PointTypeParameter(
            parameter_number=115,
            parameter_name='Device 3 Poll Mode',
            parameter_desc='HART 1: Polling mode for device 3: Valid values are: 0 = Skip This Device 1 = Primary Variable Only 2 = All Dynamic Variables 3 = All Slot Variables 4 = Full Update; HART 2: Bit 7: Update State: 1=update, 0=no update Bits 0-6 0 = Skip This Device 1 = Primary Variable Only 2 = All Dynamic Variables 3 = All Slot Variables Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='HART 1: 0-255; HART 2: Bit 7: 0-1 Bits 0-6: 0-3'
        )
        """
        HART 1: Polling mode for device 3: Valid values are: 0 = Skip This Device 1 = Primary Variable Only 2 = All Dynamic Variables 3 = All Slot Variables 4 = Full
        Update; HART 2: Bit 7: Update State: 1=update, 0=no update Bits 0-6 0 = Skip This Device 1 = Primary Variable Only 2 = All Dynamic Variables 3 = All Slot
        Variables Note: This parameter is persistent.
        """

        DEVICE_3_POLLING_ADDRESS = PointTypeParameter(
            parameter_number=116,
            parameter_name='Device 3 Polling Address',
            parameter_desc='Polling address for device 3.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-15'
        )
        """
        Polling address for device 3.
        """

        DEVICE_3_STATUS = PointTypeParameter(
            parameter_number=117,
            parameter_name='Device 3 Status',
            parameter_desc='0: No Device Found 1: Communicating 2: Comm Error',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        0: No Device Found 1: Communicating 2: Comm Error
        """

        DEVICE_3_ACTUAL_SCAN_PERIOD = PointTypeParameter(
            parameter_number=118,
            parameter_name='Device 3 Actual Scan Period',
            parameter_desc='Period at which device 3 is being updated.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Period at which device 3 is being updated.
        """

        DEVICE_3_TAG = PointTypeParameter(
            parameter_number=119,
            parameter_name='Device 3 Tag',
            parameter_desc='Tag that resides in device 3. Note: This parameter is persistent.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x5F for each byte'
        )
        """
        Tag that resides in device 3. Note: This parameter is persistent.
        """

        DEVICE_3_RESPONSE_CODE_STATUS = PointTypeParameter(
            parameter_number=120,
            parameter_name='Device 3 Response Code/Status',
            parameter_desc='Response code and status received from device 3.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Response code and status received from device 3.
        """

        DEVICE_3_ACTIVE_ALARMS = PointTypeParameter(
            parameter_number=121,
            parameter_name='Device 3 Active Alarms',
            parameter_desc='Active alarms reported by device 3.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Active alarms reported by device 3.
        """

        DEVICE_3_CURRENT_MA_ = PointTypeParameter(
            parameter_number=122,
            parameter_name='Device 3 Current (mA)',
            parameter_desc='Current in milliamps reported by device 3.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current in milliamps reported by device 3.
        """

        DEVICE_3_PERCENT_OF_RANGE = PointTypeParameter(
            parameter_number=123,
            parameter_name='Device 3 Percent of Range',
            parameter_desc='Percent of range reported by device 3.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Percent of range reported by device 3.
        """

        DEVICE_3_FAIL_SAFE_ON_RESET_ENABLE = PointTypeParameter(
            parameter_number=124,
            parameter_name='Device 3 Fail Safe on Reset Enable',
            parameter_desc='HART 1: Enable the use of fail safe values for the dynamic variables when the unit is reset for device 3. Note: This parameter is persistent.; HART 2: Enable the use of fail safe or download values for the dynamic variables when the unit detects an error for device 3. Valid values are: 0 = live or last live 1 = failsafe values 2 = download value for PV, failsafe values for other dynamic variables. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='HART 1: 0 1; HART 2: 0 1'
        )
        """
        HART 1: Enable the use of fail safe values for the dynamic variables when the unit is reset for device 3. Note: This parameter is persistent.; HART 2: Enable
        the use of fail safe or download values for the dynamic variables when the unit detects an error for device 3. Valid values are: 0 = live or last live 1 =
        failsafe values 2 = download value for PV, failsafe values for other dynamic variables. Note: This parameter is persistent.
        """

        DEVICE_3_PV_UNITS = PointTypeParameter(
            parameter_number=125,
            parameter_name='Device 3 PV Units',
            parameter_desc='Units code for primary variable reported by device 3.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code for primary variable reported by device 3.
        """

        DEVICE_3_PV = PointTypeParameter(
            parameter_number=126,
            parameter_name='Device 3 PV',
            parameter_desc='Value of primary variable of device 3. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of primary variable of device 3. Note: This parameter is persistent.
        """

        DEVICE_3_PV_FAIL_SAFE_VALUE = PointTypeParameter(
            parameter_number=127,
            parameter_name='Device 3 PV Fail Safe Value',
            parameter_desc='Primary fail safe value for device 3. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Primary fail safe value for device 3. Note: This parameter is persistent.
        """

        DEVICE_3_SV_UNITS = PointTypeParameter(
            parameter_number=128,
            parameter_name='Device 3 SV Units',
            parameter_desc='Units code for secondary variable reported by device 3.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code for secondary variable reported by device 3.
        """

        DEVICE_3_SV = PointTypeParameter(
            parameter_number=129,
            parameter_name='Device 3 SV',
            parameter_desc='Value of secondary variable of device 3. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of secondary variable of device 3. Note: This parameter is persistent.
        """

        DEVICE_3_SV_FAIL_SAFE_VALUE = PointTypeParameter(
            parameter_number=130,
            parameter_name='Device 3 SV Fail Safe Value',
            parameter_desc='Secondary fail safe value for device 3. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Secondary fail safe value for device 3. Note: This parameter is persistent.
        """

        DEVICE_3_TV_UNITS = PointTypeParameter(
            parameter_number=131,
            parameter_name='Device 3 TV Units',
            parameter_desc='Units code for tertiary variable reported by device 3.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code for tertiary variable reported by device 3.
        """

        DEVICE_3_TV = PointTypeParameter(
            parameter_number=132,
            parameter_name='Device 3 TV',
            parameter_desc='Value of tertiary variable of device 3. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of tertiary variable of device 3. Note: This parameter is persistent.
        """

        DEVICE_3_TV_FAIL_SAFE_VALUE = PointTypeParameter(
            parameter_number=133,
            parameter_name='Device 3 TV Fail Safe Value',
            parameter_desc='Tertiary fail safe value for device 3. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Tertiary fail safe value for device 3. Note: This parameter is persistent.
        """

        DEVICE_3_FV_UNITS = PointTypeParameter(
            parameter_number=134,
            parameter_name='Device 3 FV Units',
            parameter_desc='Units code for fourth variable reported by device 3.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code for fourth variable reported by device 3.
        """

        DEVICE_3_FV = PointTypeParameter(
            parameter_number=135,
            parameter_name='Device 3 FV',
            parameter_desc='Value of fourth variable of device 3. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of fourth variable of device 3. Note: This parameter is persistent.
        """

        DEVICE_3_FV_FAIL_SAFE_VALUE = PointTypeParameter(
            parameter_number=136,
            parameter_name='Device 3 FV Fail Safe Value',
            parameter_desc='Fourth fail safe value of device 3. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Fourth fail safe value of device 3. Note: This parameter is persistent.
        """

        DEVICE_3_SLOT_0_ASSIGNMENT = PointTypeParameter(
            parameter_number=137,
            parameter_name='Device 3 Slot 0 Assignment',
            parameter_desc='Slot 0 variable to request from device 3. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 0 variable to request from device 3. Note: This parameter is persistent.
        """

        DEVICE_3_SLOT_0_UNITS = PointTypeParameter(
            parameter_number=138,
            parameter_name='Device 3 Slot 0 Units',
            parameter_desc='Units of slot 0 variable requested from device 3.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 0 variable requested from device 3.
        """

        DEVICE_3_SLOT_0_VARIABLE = PointTypeParameter(
            parameter_number=139,
            parameter_name='Device 3 Slot 0 Variable',
            parameter_desc='Value of slot 0 variable requested from device 3.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 0 variable requested from device 3.
        """

        DEVICE_3_SLOT_1_ASSIGNMENT = PointTypeParameter(
            parameter_number=140,
            parameter_name='Device 3 Slot 1 Assignment',
            parameter_desc='Slot 1 variable to request from device 3. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 1 variable to request from device 3. Note: This parameter is persistent.
        """

        DEVICE_3_SLOT_1_UNITS = PointTypeParameter(
            parameter_number=141,
            parameter_name='Device 3 Slot 1 Units',
            parameter_desc='Units of slot 1 variable requested from device 3.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 1 variable requested from device 3.
        """

        DEVICE_3_SLOT_1_VARIABLE = PointTypeParameter(
            parameter_number=142,
            parameter_name='Device 3 Slot 1 Variable',
            parameter_desc='Value of slot 1 variable requested from device 3.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 1 variable requested from device 3.
        """

        DEVICE_3_SLOT_2_ASSIGNMENT = PointTypeParameter(
            parameter_number=143,
            parameter_name='Device 3 Slot 2 Assignment',
            parameter_desc='Slot 2 variable to request from device 3. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 2 variable to request from device 3. Note: This parameter is persistent.
        """

        DEVICE_3_SLOT_2_UNITS = PointTypeParameter(
            parameter_number=144,
            parameter_name='Device 3 Slot 2 Units',
            parameter_desc='Units of slot 2 variable requested from device 3.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 2 variable requested from device 3.
        """

        DEVICE_3_SLOT_2_VARIABLE = PointTypeParameter(
            parameter_number=145,
            parameter_name='Device 3 Slot 2 Variable',
            parameter_desc='Value of slot 2 variable requested from device 3.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 2 variable requested from device 3.
        """

        DEVICE_3_SLOT_3_ASSIGNMENT = PointTypeParameter(
            parameter_number=146,
            parameter_name='Device 3 Slot 3 Assignment',
            parameter_desc='Slot 3 variable to request from device 3. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 3 variable to request from device 3. Note: This parameter is persistent.
        """

        DEVICE_3_SLOT_3_UNITS = PointTypeParameter(
            parameter_number=147,
            parameter_name='Device 3 Slot 3 Units',
            parameter_desc='Units of slot 3 variable requested from device 3.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 3 variable requested from device 3.
        """

        DEVICE_3_SLOT_3_VARIABLE = PointTypeParameter(
            parameter_number=148,
            parameter_name='Device 3 Slot 3 Variable',
            parameter_desc='Value of slot 3 variable requested from device 3.',
            data_type=dt.FL,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 3 variable requested from device 3.
        """

        DEVICE_3_MESSAGE = PointTypeParameter(
            parameter_number=149,
            parameter_name='Device 3 Message',
            parameter_desc='Device 3 message.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x5F for each byte'
        )
        """
        Device 3 message.
        """

        DEVICE_3_DESCRIPTOR = PointTypeParameter(
            parameter_number=150,
            parameter_name='Device 3 Descriptor',
            parameter_desc='Device 3 descriptor.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x5F for each byte'
        )
        """
        Device 3 descriptor.
        """

        DEVICE_3_MANUFACTURES_ID_AND_DEVICE_ID = PointTypeParameter(
            parameter_number=151,
            parameter_name='Device 3 Manufactures ID and Device ID',
            parameter_desc='Device 3 manufactures ID and devices ID',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Device 3 manufactures ID and devices ID
        """

        DEVICE_3_SERIAL_NUMBER = PointTypeParameter(
            parameter_number=152,
            parameter_name='Device 3 Serial Number',
            parameter_desc='Device 3 serial number.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-4,294,967,295'
        )
        """
        Device 3 serial number.
        """

        DEVICE_3_ID_NUMBER = PointTypeParameter(
            parameter_number=153,
            parameter_name='Device 3 ID Number',
            parameter_desc='Device 3 ID number.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-4,294,967,295'
        )
        """
        Device 3 ID number.
        """

        DEVICE_3_SENSOR_UNITS = PointTypeParameter(
            parameter_number=154,
            parameter_name='Device 3 Sensor Units',
            parameter_desc='Device 3 sensor units.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Device 3 sensor units.
        """

        DEVICE_3_UPPER_SENSOR_LIMIT = PointTypeParameter(
            parameter_number=155,
            parameter_name='Device 3 Upper Sensor Limit',
            parameter_desc='Device 3 upper sensor limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 3 upper sensor limit.
        """

        DEVICE_3_LOWER_SENSOR_LIMIT = PointTypeParameter(
            parameter_number=156,
            parameter_name='Device 3 Lower Sensor Limit',
            parameter_desc='Device 3 lower sensor limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 3 lower sensor limit.
        """

        DEVICE_3_MINIMUM_SPAN = PointTypeParameter(
            parameter_number=157,
            parameter_name='Device 3 Minimum Span',
            parameter_desc='Device 3 minimum sensor span.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 3 minimum sensor span.
        """

        DEVICE_3_OUTPUT_UNITS = PointTypeParameter(
            parameter_number=158,
            parameter_name='Device 3 Output Units',
            parameter_desc='Device 3 Output Units',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Device 3 Output Units
        """

        DEVICE_3_UPPER_OUTPUT_LIMIT = PointTypeParameter(
            parameter_number=159,
            parameter_name='Device 3 Upper Output Limit',
            parameter_desc='Device 3 upper output limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 3 upper output limit.
        """

        DEVICE_3_LOWER_OUTPUT_LIMIT = PointTypeParameter(
            parameter_number=160,
            parameter_name='Device 3 Lower Output Limit',
            parameter_desc='Device 3 lower output limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 3 lower output limit.
        """

        DEVICE_3_DAMPING_VALUE = PointTypeParameter(
            parameter_number=161,
            parameter_name='Device 3 Damping Value',
            parameter_desc='Device 3 damping value.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 3 damping value.
        """

        DEVICE_4_POLL_MODE = PointTypeParameter(
            parameter_number=162,
            parameter_name='Device 4 Poll Mode',
            parameter_desc='HART 1: Polling mode for device 4. Valid values are: 0 = Skip This Device 1 = Primary Variable Only 2 = All Dynamic Variables 3 = All Slot Variables 4 = Full Update Note: This parameter is persistent.; HART 2: Bit 7: Update State: 1=update, 0=no update Bits 0-6 0 = Skip This Device 1 = Primary Variable Only 2 = All Dynamic Variables 3 = All Slot Variables Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='HART 1: 0-255; HART 2: Bit 7: 0-1 Bits 0-6: 0-3'
        )
        """
        HART 1: Polling mode for device 4. Valid values are: 0 = Skip This Device 1 = Primary Variable Only 2 = All Dynamic Variables 3 = All Slot Variables 4 = Full
        Update Note: This parameter is persistent.; HART 2: Bit 7: Update State: 1=update, 0=no update Bits 0-6 0 = Skip This Device 1 = Primary Variable Only 2 = All
        Dynamic Variables 3 = All Slot Variables Note: This parameter is persistent.
        """

        DEVICE_4_POLLING_ADDRESS = PointTypeParameter(
            parameter_number=163,
            parameter_name='Device 4 Polling Address',
            parameter_desc='Polling address for device 4.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-15'
        )
        """
        Polling address for device 4.
        """

        DEVICE_4_STATUS = PointTypeParameter(
            parameter_number=164,
            parameter_name='Device 4 Status',
            parameter_desc='0: No Device Found 1: Communicating 2: Comm Error',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        0: No Device Found 1: Communicating 2: Comm Error
        """

        DEVICE_4_ACTUAL_SCAN_PERIOD = PointTypeParameter(
            parameter_number=165,
            parameter_name='Device 4 Actual Scan Period',
            parameter_desc='Period at which device 4 is being updated.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Period at which device 4 is being updated.
        """

        DEVICE_4_TAG = PointTypeParameter(
            parameter_number=166,
            parameter_name='Device 4 Tag',
            parameter_desc='Tag that resides in device 4. Note: This parameter is persistent.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x5F for each byte'
        )
        """
        Tag that resides in device 4. Note: This parameter is persistent.
        """

        DEVICE_4_RESPONSE_CODE_STATUS = PointTypeParameter(
            parameter_number=167,
            parameter_name='Device 4 Response Code/Status',
            parameter_desc='Response code and status received from device 4.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Response code and status received from device 4.
        """

        DEVICE_4_ACTIVE_ALARMS = PointTypeParameter(
            parameter_number=168,
            parameter_name='Device 4 Active Alarms',
            parameter_desc='Active alarms reported by device 4.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Active alarms reported by device 4.
        """

        DEVICE_4_CURRENT_MA_ = PointTypeParameter(
            parameter_number=169,
            parameter_name='Device 4 Current (mA)',
            parameter_desc='Current in milliamps reported by device 4.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current in milliamps reported by device 4.
        """

        DEVICE_4_PERCENT_OF_RANGE = PointTypeParameter(
            parameter_number=170,
            parameter_name='Device 4 Percent of Range',
            parameter_desc='Percent of range reported by device 4.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Percent of range reported by device 4.
        """

        DEVICE_4_FAIL_SAFE_ON_RESET_ENABLE = PointTypeParameter(
            parameter_number=171,
            parameter_name='Device 4 Fail Safe on Reset Enable',
            parameter_desc='HART 1: Enable the use of fail safe values for the dynamic variables when the unit is reset for device 4. Note: This parameter is persistent.; HART 2: Enable the use of fail safe or download values for the dynamic variables when the unit detects an error for device 4: Valid values are: 0 = live or last live 1 = failsafe values 2 = download value for PV, failsafe values for other dynamic variables. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='HART 1: 0 1; HART 2: 0-1'
        )
        """
        HART 1: Enable the use of fail safe values for the dynamic variables when the unit is reset for device 4. Note: This parameter is persistent.; HART 2: Enable
        the use of fail safe or download values for the dynamic variables when the unit detects an error for device 4: Valid values are: 0 = live or last live 1 =
        failsafe values 2 = download value for PV, failsafe values for other dynamic variables. Note: This parameter is persistent.
        """

        DEVICE_4_PV_UNITS = PointTypeParameter(
            parameter_number=172,
            parameter_name='Device 4 PV Units',
            parameter_desc='Units code for primary variable reported by device 4.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code for primary variable reported by device 4.
        """

        DEVICE_4_PV = PointTypeParameter(
            parameter_number=173,
            parameter_name='Device 4 PV',
            parameter_desc='Value of primary variable of device 4. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of primary variable of device 4. Note: This parameter is persistent.
        """

        DEVICE_4_PV_FAIL_SAFE_VALUE = PointTypeParameter(
            parameter_number=174,
            parameter_name='Device 4 PV Fail Safe Value',
            parameter_desc='Primary fail safe value for device 4. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Primary fail safe value for device 4. Note: This parameter is persistent.
        """

        DEVICE_4_SV_UNITS = PointTypeParameter(
            parameter_number=175,
            parameter_name='Device 4 SV Units',
            parameter_desc='Units code for secondary variable reported by device 4.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code for secondary variable reported by device 4.
        """

        DEVICE_4_SV = PointTypeParameter(
            parameter_number=176,
            parameter_name='Device 4 SV',
            parameter_desc='Value of secondary variable of device 4. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of secondary variable of device 4. Note: This parameter is persistent.
        """

        DEVICE_4_SV_FAIL_SAFE_VALUE = PointTypeParameter(
            parameter_number=177,
            parameter_name='Device 4 SV Fail Safe Value',
            parameter_desc='Secondary fail safe value for device 4. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Secondary fail safe value for device 4. Note: This parameter is persistent.
        """

        DEVICE_4_TV_UNITS = PointTypeParameter(
            parameter_number=178,
            parameter_name='Device 4 TV Units',
            parameter_desc='Units code for tertiary variable reported by device 4.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code for tertiary variable reported by device 4.
        """

        DEVICE_4_TV = PointTypeParameter(
            parameter_number=179,
            parameter_name='Device 4 TV',
            parameter_desc='Value of tertiary variable of device 4. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of tertiary variable of device 4. Note: This parameter is persistent.
        """

        DEVICE_4_TV_FAIL_SAFE_ON_RESET_VALUE = PointTypeParameter(
            parameter_number=180,
            parameter_name='Device 4 TV Fail Safe on Reset Value',
            parameter_desc='Tertiary fail safe value for device 4. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Tertiary fail safe value for device 4. Note: This parameter is persistent.
        """

        DEVICE_4_FV_UNITS = PointTypeParameter(
            parameter_number=181,
            parameter_name='Device 4 FV Units',
            parameter_desc='Units code for fourth variable reported by device 4.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code for fourth variable reported by device 4.
        """

        DEVICE_4_FV = PointTypeParameter(
            parameter_number=182,
            parameter_name='Device 4 FV',
            parameter_desc='Value of fourth variable of device 4. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of fourth variable of device 4. Note: This parameter is persistent.
        """

        DEVICE_4_FV_FAIL_SAFE_VALUE = PointTypeParameter(
            parameter_number=183,
            parameter_name='Device 4 FV Fail Safe Value',
            parameter_desc='Fourth fail safe value of device 4. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Fourth fail safe value of device 4. Note: This parameter is persistent.
        """

        DEVICE_4_SLOT_0_ASSIGNMENT = PointTypeParameter(
            parameter_number=184,
            parameter_name='Device 4 Slot 0 Assignment',
            parameter_desc='Slot 0 variable to request from device 4. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 0 variable to request from device 4. Note: This parameter is persistent.
        """

        DEVICE_4_SLOT_0_UNITS = PointTypeParameter(
            parameter_number=185,
            parameter_name='Device 4 Slot 0 Units',
            parameter_desc='Units of slot 0 variable requested from device 4.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 0 variable requested from device 4.
        """

        DEVICE_4_SLOT_0_VARIABLE = PointTypeParameter(
            parameter_number=186,
            parameter_name='Device 4 Slot 0 Variable',
            parameter_desc='Value of slot 0 variable requested from device 4.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 0 variable requested from device 4.
        """

        DEVICE_4_SLOT_1_ASSIGNMENT = PointTypeParameter(
            parameter_number=187,
            parameter_name='Device 4 Slot 1 Assignment',
            parameter_desc='Slot 1 variable to request from device 4. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 1 variable to request from device 4. Note: This parameter is persistent.
        """

        DEVICE_4_SLOT_1_UNITS = PointTypeParameter(
            parameter_number=188,
            parameter_name='Device 4 Slot 1 Units',
            parameter_desc='Units of slot 1 variable requested from device 4.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 1 variable requested from device 4.
        """

        DEVICE_4_SLOT_1_VARIABLE = PointTypeParameter(
            parameter_number=189,
            parameter_name='Device 4 Slot 1 Variable',
            parameter_desc='Value of slot 1 variable requested from device 4.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 1 variable requested from device 4.
        """

        DEVICE_4_SLOT_2_ASSIGNMENT = PointTypeParameter(
            parameter_number=190,
            parameter_name='Device 4 Slot 2 Assignment',
            parameter_desc='Slot 2 variable to request from device 4. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 2 variable to request from device 4. Note: This parameter is persistent.
        """

        DEVICE_4_SLOT_2_UNITS = PointTypeParameter(
            parameter_number=191,
            parameter_name='Device 4 Slot 2 Units',
            parameter_desc='Units of slot 2 variable requested from device 4.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 2 variable requested from device 4.
        """

        DEVICE_4_SLOT_2_VARIABLE = PointTypeParameter(
            parameter_number=192,
            parameter_name='Device 4 Slot 2 Variable',
            parameter_desc='Value of slot 2 variable requested from device 4.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 2 variable requested from device 4.
        """

        DEVICE_4_SLOT_3_ASSIGNMENT = PointTypeParameter(
            parameter_number=193,
            parameter_name='Device 4 Slot 3 Assignment',
            parameter_desc='Slot 3 variable to request from device 4. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 3 variable to request from device 4. Note: This parameter is persistent.
        """

        DEVICE_4_SLOT_3_UNITS = PointTypeParameter(
            parameter_number=194,
            parameter_name='Device 4 Slot 3 Units',
            parameter_desc='Units of slot 3 variable requested from device 4.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 3 variable requested from device 4.
        """

        DEVICE_4_SLOT_3_VARIABLE = PointTypeParameter(
            parameter_number=195,
            parameter_name='Device 4 Slot 3 Variable',
            parameter_desc='Value of slot 3 variable requested from device 4.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 3 variable requested from device 4.
        """

        DEVICE_4_MESSAGE = PointTypeParameter(
            parameter_number=196,
            parameter_name='Device 4 Message',
            parameter_desc='Device 4 message.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x5F for each byte'
        )
        """
        Device 4 message.
        """

        DEVICE_4_DESCRIPTOR = PointTypeParameter(
            parameter_number=197,
            parameter_name='Device 4 Descriptor',
            parameter_desc='Device 4 descriptor.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x5F for each byte'
        )
        """
        Device 4 descriptor.
        """

        DEVICE_4_MANUFACTURES_ID_AND_DEVICE_ID = PointTypeParameter(
            parameter_number=198,
            parameter_name='Device 4 Manufactures ID and Device ID',
            parameter_desc='Device 4 manufactures ID and devices ID',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Device 4 manufactures ID and devices ID
        """

        DEVICE_4_SERIAL_NUMBER = PointTypeParameter(
            parameter_number=199,
            parameter_name='Device 4 Serial Number',
            parameter_desc='Device 4 serial number.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-4,294,967,295'
        )
        """
        Device 4 serial number.
        """

        DEVICE_4_ID_NUMBER = PointTypeParameter(
            parameter_number=200,
            parameter_name='Device 4 ID Number',
            parameter_desc='Device 4 ID number.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-4,294,967,295'
        )
        """
        Device 4 ID number.
        """

        DEVICE_4_SENSOR_UNITS = PointTypeParameter(
            parameter_number=201,
            parameter_name='Device 4 Sensor Units',
            parameter_desc='Device 4 sensor units.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Device 4 sensor units.
        """

        DEVICE_4_UPPER_SENSOR_LIMIT = PointTypeParameter(
            parameter_number=202,
            parameter_name='Device 4 Upper Sensor Limit',
            parameter_desc='Device 4 upper sensor limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 4 upper sensor limit.
        """

        DEVICE_4_LOWER_SENSOR_LIMIT = PointTypeParameter(
            parameter_number=203,
            parameter_name='Device 4 Lower Sensor Limit',
            parameter_desc='Device 4 lower sensor limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 4 lower sensor limit.
        """

        DEVICE_4_MINIMUM_SPAN = PointTypeParameter(
            parameter_number=204,
            parameter_name='Device 4 Minimum Span',
            parameter_desc='Device 4 minimum sensor span.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 4 minimum sensor span.
        """

        DEVICE_4_OUTPUT_UNITS = PointTypeParameter(
            parameter_number=205,
            parameter_name='Device 4 Output Units',
            parameter_desc='Device 4 Output Units',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Device 4 Output Units
        """

        DEVICE_4_UPPER_OUTPUT_LIMIT = PointTypeParameter(
            parameter_number=206,
            parameter_name='Device 4 Upper Output Limit',
            parameter_desc='Device 4 upper output limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 4 upper output limit.
        """

        DEVICE_4_LOWER_OUTPUT_LIMIT = PointTypeParameter(
            parameter_number=207,
            parameter_name='Device 4 Lower Output Limit',
            parameter_desc='Device 4 lower output limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 4 lower output limit.
        """

        DEVICE_4_DAMPING_VALUE = PointTypeParameter(
            parameter_number=208,
            parameter_name='Device 4 Damping Value',
            parameter_desc='Device 4 damping value.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 4 damping value.
        """

        DEVICE_5_POLL_MODE = PointTypeParameter(
            parameter_number=209,
            parameter_name='Device 5 Poll Mode',
            parameter_desc='HART 1: Polling mode for device 5. Valid values are: 0 = Skip This Device 1 = Primary Variable Only 2 = All Dynamic Variables 3 = All Slot Variables 4 = Full Update Note: This parameter is persistent.; HART 2: Bit 7: Update State: 1=update, 0=no update Bits 0-6 0 = Skip This Device 1 = Primary Variable Only 2 = All Dynamic Variables 3 = All Slot Variables Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='HART 1: 0-255; HART 2: Bit 7: 0 1 Bits 0-6: 0-3'
        )
        """
        HART 1: Polling mode for device 5. Valid values are: 0 = Skip This Device 1 = Primary Variable Only 2 = All Dynamic Variables 3 = All Slot Variables 4 = Full
        Update Note: This parameter is persistent.; HART 2: Bit 7: Update State: 1=update, 0=no update Bits 0-6 0 = Skip This Device 1 = Primary Variable Only 2 = All
        Dynamic Variables 3 = All Slot Variables Note: This parameter is persistent.
        """

        DEVICE_5_POLLING_ADDRESS = PointTypeParameter(
            parameter_number=210,
            parameter_name='Device 5 Polling Address',
            parameter_desc='Polling address for device 5.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-15'
        )
        """
        Polling address for device 5.
        """

        DEVICE_5_STATUS = PointTypeParameter(
            parameter_number=211,
            parameter_name='Device 5 Status',
            parameter_desc='Valid values are: 0 = No Device Found 1 = Communicating 2 = Comm Error',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Valid values are: 0 = No Device Found 1 = Communicating 2 = Comm Error
        """

        DEVICE_5_ACTUAL_SCAN_PERIOD = PointTypeParameter(
            parameter_number=212,
            parameter_name='Device 5 Actual Scan Period',
            parameter_desc='Period at which device 5 is being updated.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Period at which device 5 is being updated.
        """

        DEVICE_5_TAG = PointTypeParameter(
            parameter_number=213,
            parameter_name='Device 5 Tag',
            parameter_desc='Tag that resides in device 5. Note: This parameter is persistent.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x5F for each byte'
        )
        """
        Tag that resides in device 5. Note: This parameter is persistent.
        """

        DEVICE_5_RESPONSE_CODE_STATUS = PointTypeParameter(
            parameter_number=214,
            parameter_name='Device 5 Response Code/Status',
            parameter_desc='Response code and status received from device 5.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Response code and status received from device 5.
        """

        DEVICE_5_ACTIVE_ALARMS = PointTypeParameter(
            parameter_number=215,
            parameter_name='Device 5 Active Alarms',
            parameter_desc='Active alarms reported by device 5.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Active alarms reported by device 5.
        """

        DEVICE_5_CURRENT_MA_ = PointTypeParameter(
            parameter_number=216,
            parameter_name='Device 5 Current (mA)',
            parameter_desc='Current in milliamps reported by device 5.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Current in milliamps reported by device 5.
        """

        DEVICE_5_PERCENT_OF_RANGE = PointTypeParameter(
            parameter_number=217,
            parameter_name='Device 5 Percent of Range',
            parameter_desc='Percent of range reported by device 5.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Percent of range reported by device 5.
        """

        DEVICE_5_FAIL_SAFE_ON_RESET_ENABLE = PointTypeParameter(
            parameter_number=218,
            parameter_name='Device 5 Fail Safe on Reset Enable',
            parameter_desc='HART 1: Enable the use of fail safe values for the dynamic variables when the unit is reset for device 5. Note: This parameter is persistent.; HART 2: Enable the use of fail safe or download values for the dynamic variables when the unit detects an error for device 5. Valid values are: 0 = live or last live 1 = failsafe values 2 = download value for PV, failsafe values for other dynamic variables. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='HART 1: 0-1; HART 2: 0-1'
        )
        """
        HART 1: Enable the use of fail safe values for the dynamic variables when the unit is reset for device 5. Note: This parameter is persistent.; HART 2: Enable
        the use of fail safe or download values for the dynamic variables when the unit detects an error for device 5. Valid values are: 0 = live or last live 1 =
        failsafe values 2 = download value for PV, failsafe values for other dynamic variables. Note: This parameter is persistent.
        """

        DEVICE_5_PV_UNITS = PointTypeParameter(
            parameter_number=219,
            parameter_name='Device 5 PV Units',
            parameter_desc='Units code for primary variable reported by device 5.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code for primary variable reported by device 5.
        """

        DEVICE_5_PV = PointTypeParameter(
            parameter_number=220,
            parameter_name='Device 5 PV',
            parameter_desc='Value of primary variable of device 5. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of primary variable of device 5. Note: This parameter is persistent.
        """

        DEVICE_5_PV_FAIL_SAFE_VALUE = PointTypeParameter(
            parameter_number=221,
            parameter_name='Device 5 PV Fail Safe Value',
            parameter_desc='Primary fail safe value for device 5. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Primary fail safe value for device 5. Note: This parameter is persistent.
        """

        DEVICE_5_SV_UNITS = PointTypeParameter(
            parameter_number=222,
            parameter_name='Device 5 SV Units',
            parameter_desc='Units code for secondary variable reported by device 5.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code for secondary variable reported by device 5.
        """

        DEVICE_5_SV = PointTypeParameter(
            parameter_number=223,
            parameter_name='Device 5 SV',
            parameter_desc='Value of secondary variable of device 5. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of secondary variable of device 5. Note: This parameter is persistent.
        """

        DEVICE_5_SV_FAIL_SAFE_VALUE = PointTypeParameter(
            parameter_number=224,
            parameter_name='Device 5 SV Fail Safe Value',
            parameter_desc='Secondary fail safe value for device 5. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Secondary fail safe value for device 5. Note: This parameter is persistent.
        """

        DEVICE_5_TV_UNITS = PointTypeParameter(
            parameter_number=225,
            parameter_name='Device 5 TV Units',
            parameter_desc='Units code for tertiary variable reported by device 5.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code for tertiary variable reported by device 5.
        """

        DEVICE_5_TV = PointTypeParameter(
            parameter_number=226,
            parameter_name='Device 5 TV',
            parameter_desc='Value of tertiary variable of device 5. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of tertiary variable of device 5. Note: This parameter is persistent.
        """

        DEVICE_5_TV_FAIL_SAFE_VALUE = PointTypeParameter(
            parameter_number=227,
            parameter_name='Device 5 TV Fail Safe Value',
            parameter_desc='Tertiary fail safe value for device 5. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Tertiary fail safe value for device 5. Note: This parameter is persistent.
        """

        DEVICE_5_FV_UNITS = PointTypeParameter(
            parameter_number=228,
            parameter_name='Device 5 FV Units',
            parameter_desc='Units code for fourth variable reported by device 5.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units code for fourth variable reported by device 5.
        """

        DEVICE_5_FV = PointTypeParameter(
            parameter_number=229,
            parameter_name='Device 5 FV',
            parameter_desc='Value of fourth variable of device 5. Note: This parameter is persistent.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of fourth variable of device 5. Note: This parameter is persistent.
        """

        DEVICE_5_FV_FAIL_SAFE_VALUE = PointTypeParameter(
            parameter_number=230,
            parameter_name='Device 5 FV Fail Safe Value',
            parameter_desc='Fourth fail safe value of device 5.',
            data_type=dt.FLOAT,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Fourth fail safe value of device 5.
        """

        DEVICE_5_SLOT_0_ASSIGNMENT = PointTypeParameter(
            parameter_number=231,
            parameter_name='Device 5 Slot 0 Assignment',
            parameter_desc='Slot 0 variable to request from device 5. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 0 variable to request from device 5. Note: This parameter is persistent.
        """

        DEVICE_5_SLOT_0_UNITS = PointTypeParameter(
            parameter_number=232,
            parameter_name='Device 5 Slot 0 Units',
            parameter_desc='Units of slot 0 variable requested from device 5.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 0 variable requested from device 5.
        """

        DEVICE_5_SLOT_0_VARIABLE = PointTypeParameter(
            parameter_number=233,
            parameter_name='Device 5 Slot 0 Variable',
            parameter_desc='Value of slot 0 variable requested from device 5.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 0 variable requested from device 5.
        """

        DEVICE_5_SLOT_1_ASSIGNMENT = PointTypeParameter(
            parameter_number=234,
            parameter_name='Device 5 Slot 1 Assignment',
            parameter_desc='Slot 1 variable to request from device 5. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 1 variable to request from device 5. Note: This parameter is persistent.
        """

        DEVICE_5_SLOT_1_UNITS = PointTypeParameter(
            parameter_number=235,
            parameter_name='Device 5 Slot 1 Units',
            parameter_desc='Units of slot 1 variable requested from device 5.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 1 variable requested from device 5.
        """

        DEVICE_5_SLOT_1_VARIABLE = PointTypeParameter(
            parameter_number=236,
            parameter_name='Device 5 Slot 1 Variable',
            parameter_desc='Value of slot 1 variable requested from device 5.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 1 variable requested from device 5.
        """

        DEVICE_5_SLOT_2_ASSIGNMENT = PointTypeParameter(
            parameter_number=237,
            parameter_name='Device 5 Slot 2 Assignment',
            parameter_desc='Slot 2 variable to request from device 5. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 2 variable to request from device 5. Note: This parameter is persistent.
        """

        DEVICE_5_SLOT_2_UNITS = PointTypeParameter(
            parameter_number=238,
            parameter_name='Device 5 Slot 2 Units',
            parameter_desc='Units of slot 2 variable requested from device 5.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 2 variable requested from device 5.
        """

        DEVICE_5_SLOT_2_VARIABLE = PointTypeParameter(
            parameter_number=239,
            parameter_name='Device 5 Slot 2 Variable',
            parameter_desc='Value of slot 2 variable requested from device 5.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 2 variable requested from device 5.
        """

        DEVICE_5_SLOT_3_ASSIGNMENT = PointTypeParameter(
            parameter_number=240,
            parameter_name='Device 5 Slot 3 Assignment',
            parameter_desc='Slot 3 variable to request from device 5. Note: This parameter is persistent.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Slot 3 variable to request from device 5. Note: This parameter is persistent.
        """

        DEVICE_5_SLOT_3_UNITS = PointTypeParameter(
            parameter_number=241,
            parameter_name='Device 5 Slot 3 Units',
            parameter_desc='Units of slot 3 variable requested from device 5.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Units of slot 3 variable requested from device 5.
        """

        DEVICE_5_SLOT_3_VARIABLE = PointTypeParameter(
            parameter_number=242,
            parameter_name='Device 5 Slot 3 Variable',
            parameter_desc='Value of slot 3 variable requested from device 5.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Value of slot 3 variable requested from device 5.
        """

        DEVICE_5_MESSAGE = PointTypeParameter(
            parameter_number=243,
            parameter_name='Device 5 Message',
            parameter_desc='Device 5 message.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x5F for each byte'
        )
        """
        Device 5 message.
        """

        DEVICE_5_DESCRIPTOR = PointTypeParameter(
            parameter_number=244,
            parameter_name='Device 5 Descriptor',
            parameter_desc='Device 5 descriptor.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x5F for each byte'
        )
        """
        Device 5 descriptor.
        """

        DEVICE_5_MANUFACTURES_ID_AND_DEVICE_ID = PointTypeParameter(
            parameter_number=245,
            parameter_name='Device 5 Manufactures ID and Device ID',
            parameter_desc='Device 5 manufactures ID and devices ID',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 65535'
        )
        """
        Device 5 manufactures ID and devices ID
        """

        DEVICE_5_SERIAL_NUMBER = PointTypeParameter(
            parameter_number=246,
            parameter_name='Device 5 Serial Number',
            parameter_desc='Device 5 serial number.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-4,294,967,295'
        )
        """
        Device 5 serial number.
        """

        DEVICE_5_ID_NUMBER = PointTypeParameter(
            parameter_number=247,
            parameter_name='Device 5 ID Number',
            parameter_desc='Device 5 ID number.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0-4,294,967,295'
        )
        """
        Device 5 ID number.
        """

        DEVICE_5_SENSOR_UNITS = PointTypeParameter(
            parameter_number=248,
            parameter_name='Device 5 Sensor Units',
            parameter_desc='Device 5 sensor units.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Device 5 sensor units.
        """

        DEVICE_5_UPPER_SENSOR_LIMIT = PointTypeParameter(
            parameter_number=249,
            parameter_name='Device 5 Upper Sensor Limit',
            parameter_desc='Device 5 upper sensor limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 5 upper sensor limit.
        """

        DEVICE_5_LOWER_SENSOR_LIMIT = PointTypeParameter(
            parameter_number=250,
            parameter_name='Device 5 Lower Sensor Limit',
            parameter_desc='Device 5 lower sensor limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 5 lower sensor limit.
        """

        DEVICE_5_MINIMUM_SPAN = PointTypeParameter(
            parameter_number=251,
            parameter_name='Device 5 Minimum Span',
            parameter_desc='Device 5 minimum sensor span.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 5 minimum sensor span.
        """

        DEVICE_5_OUTPUT_UNITS = PointTypeParameter(
            parameter_number=252,
            parameter_name='Device 5 Output Units',
            parameter_desc='Device 5 Output Units',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-255'
        )
        """
        Device 5 Output Units
        """

        DEVICE_5_UPPER_OUTPUT_LIMIT = PointTypeParameter(
            parameter_number=253,
            parameter_name='Device 5 Upper Output Limit',
            parameter_desc='Device 5 upper output limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 5 upper output limit.
        """

        DEVICE_5_LOWER_OUTPUT_LIMIT = PointTypeParameter(
            parameter_number=254,
            parameter_name='Device 5 Lower Output Limit',
            parameter_desc='Device 5 lower output limit.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 5 lower output limit.
        """

        DEVICE_5_DAMPING_VALUE = PointTypeParameter(
            parameter_number=255,
            parameter_name='Device 5 Damping Value',
            parameter_desc='Device 5 damping value.',
            data_type=dt.FLOAT,
            access='R/O',
            value_range='Any valid IEEE 754 float'
        )
        """
        Device 5 damping value.
        """





class SYSTEM_VARIABLES(PointType):
    """System Variables"""

    point_type_number: int = 91
    """Point Type ID"""

    point_type_desc: str = 'System Variables'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        ROC_ADDRESS = PointTypeParameter(
            parameter_number=0,
            parameter_name='ROC Address',
            parameter_desc='One-byte unit code of the station address. You can configure the unit code for a ROC address. Note: 0 is used for broadcast and should not be used by the ROC.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        One-byte unit code of the station address. You can configure the unit code for a ROC address. Note: 0 is used for broadcast and should not be used by the ROC.
        """

        ROC_GROUP = PointTypeParameter(
            parameter_number=1,
            parameter_name='ROC Group',
            parameter_desc='Group code of the station address.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Group code of the station address.
        """

        STATION_NAME = PointTypeParameter(
            parameter_number=2,
            parameter_name='Station Name',
            parameter_desc='A 20-character ASCII field for the station name.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20-0x7E for each byte'
        )
        """
        A 20-character ASCII field for the station name.
        """

        PART_NUMBER_AND_VERSION = PointTypeParameter(
            parameter_number=3,
            parameter_name='Part Number and Version',
            parameter_desc='The software part number and version number string.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        The software part number and version number string.
        """

        TIME_CREATED = PointTypeParameter(
            parameter_number=4,
            parameter_name='Time Created',
            parameter_desc='The time and date stamp the firmware was created.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        The time and date stamp the firmware was created.
        """

        MANUFACTURER_ID = PointTypeParameter(
            parameter_number=5,
            parameter_name='Manufacturer ID',
            parameter_desc='The manufacturing identification string.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        The manufacturing identification string.
        """

        PRODUCT_DESCRIPTION = PointTypeParameter(
            parameter_number=6,
            parameter_name='Product Description',
            parameter_desc='The manufacturing description of product.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        The manufacturing description of product.
        """

        MAXIMUM_EVENTS = PointTypeParameter(
            parameter_number=8,
            parameter_name='Maximum Events',
            parameter_desc='The maximum number of events that the Event Log may store.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='450'
        )
        """
        The maximum number of events that the Event Log may store.
        """

        MAXIMUM_ALARMS = PointTypeParameter(
            parameter_number=9,
            parameter_name='Maximum Alarms',
            parameter_desc='The maximum number of alarms that the Alarm Log may store.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='450'
        )
        """
        The maximum number of alarms that the Alarm Log may store.
        """

        MAXIMUM_PIDS = PointTypeParameter(
            parameter_number=10,
            parameter_name='Maximum PIDs',
            parameter_desc='The maximum number of PID loops that may run on the system',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-16'
        )
        """
        The maximum number of PID loops that may run on the system
        """

        MAXIMUM_METER_RUNS = PointTypeParameter(
            parameter_number=11,
            parameter_name='Maximum Meter Runs',
            parameter_desc='The maximum number of gas meter runs that may run on the system. Note: Maximum number depends on licensing.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='2-12'
        )
        """
        The maximum number of gas meter runs that may run on the system. Note: Maximum number depends on licensing.
        """

        MAXIMUM_FSTS = PointTypeParameter(
            parameter_number=12,
            parameter_name='Maximum FSTs',
            parameter_desc='The maximum number of FSTs that may run on the system',
            data_type=dt.UINT8,
            access='R/O',
            value_range='6'
        )
        """
        The maximum number of FSTs that may run on the system
        """

        EVENT_INDEX = PointTypeParameter(
            parameter_number=13,
            parameter_name='Event Index',
            parameter_desc='The current event index for the Event Log.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0-449'
        )
        """
        The current event index for the Event Log.
        """

        ALARM_INDEX = PointTypeParameter(
            parameter_number=14,
            parameter_name='Alarm Index',
            parameter_desc='The current alarm index in the Alarm Log.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0-449'
        )
        """
        The current alarm index in the Alarm Log.
        """

        ACTIVE_PIDS = PointTypeParameter(
            parameter_number=15,
            parameter_name='Active PIDs',
            parameter_desc='Number of active PIDs',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-16'
        )
        """
        Number of active PIDs
        """

        ACTIVE_STATIONS = PointTypeParameter(
            parameter_number=16,
            parameter_name='Active Stations',
            parameter_desc='Number of active stations',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0 Maximum # of Meter Runs'
        )
        """
        Number of active stations
        """

        ACTIVE_ORIFICE_METER_RUNS = PointTypeParameter(
            parameter_number=17,
            parameter_name='Active Orifice Meter Runs',
            parameter_desc='Number of active orifice meter runs',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-12'
        )
        """
        Number of active orifice meter runs
        """

        ACTIVE_TURBINE_METER_RUNS = PointTypeParameter(
            parameter_number=18,
            parameter_name='Active Turbine Meter Runs',
            parameter_desc='Number of active turbine meter runs',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-12'
        )
        """
        Number of active turbine meter runs
        """

        FST_CLEAR = PointTypeParameter(
            parameter_number=19,
            parameter_name='FST Clear',
            parameter_desc='Clears all FST code from Flash ROM. Valid values are 0 (Do nothing) and 1 (Clear FST code).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Clears all FST code from Flash ROM. Valid values are 0 (Do nothing) and 1 (Clear FST code).
        """

        CLEAR_CONFIGURATION_MEMORY = PointTypeParameter(
            parameter_number=20,
            parameter_name='Clear configuration memory',
            parameter_desc='Clears the internal configuration memory stored in flash ROM. Valid values are 0 (Do nothing) and 1 (Enable clearing of Configuration Memory).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Clears the internal configuration memory stored in flash ROM. Valid values are 0 (Do nothing) and 1 (Enable clearing of Configuration Memory).
        """

        WRITE_TO_CONFIGURATION_MEMORY = PointTypeParameter(
            parameter_number=21,
            parameter_name='Write to Configuration Memory',
            parameter_desc='Commands the ROC to store certain point types (indicated throughout this document) to flash configuration memory. Valid values are 0 (Do nothing) and 1 (Perform Write to Configuration Memory).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Commands the ROC to store certain point types (indicated throughout this document) to flash configuration memory. Valid values are 0 (Do nothing) and 1 (Perform
        Write to Configuration Memory).
        """

        CONFIGURATION_MEMORY_WRITE_COMPLETE = PointTypeParameter(
            parameter_number=22,
            parameter_name='Configuration Memory Write Complete',
            parameter_desc='Indicates if the system is in the process of writing the configuration to flash ROM. Valid values are 0 (Currently Performing the Write) and 1 (Completed the Write).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Indicates if the system is in the process of writing the configuration to flash ROM. Valid values are 0 (Currently Performing the Write) and 1 (Completed the
        Write).
        """

        MPU_LOADING = PointTypeParameter(
            parameter_number=23,
            parameter_name='MPU Loading',
            parameter_desc='The current percentage of time the CPU is being loaded, updated every 5 seconds.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0 100.0'
        )
        """
        The current percentage of time the CPU is being loaded, updated every 5 seconds.
        """

        I_O_SCANNING = PointTypeParameter(
            parameter_number=25,
            parameter_name='I/O Scanning',
            parameter_desc='Turns the LCD on or off. Valid values are 0 (Off, screens cleared, no menus) and 1 (On, screens on, menus visable.) Note: Turning off does not shut off power.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Turns the LCD on or off. Valid values are 0 (Off, screens cleared, no menus) and 1 (On, screens on, menus visable.) Note: Turning off does not shut off power.
        """

        WARM_START = PointTypeParameter(
            parameter_number=26,
            parameter_name='Warm Start',
            parameter_desc='Used to re-start the system. A warm start is a reboot of the system without performing all the power-on-self tests. Valid values are 0 (Do nothing) and 1 (Perform Warm Start).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Used to re-start the system. A warm start is a reboot of the system without performing all the power-on-self tests. Valid values are 0 (Do nothing) and 1
        (Perform Warm Start).
        """

        COLD_START = PointTypeParameter(
            parameter_number=27,
            parameter_name='Cold start',
            parameter_desc='Used to re-start the system. A cold start always includes starting from the boot sector and performing power-on-self tests, plus the following options. Valid values are: 0 = Do nothing 1 = Restore Configuration from Flash 2 = Clear Alarms 3 = Clear Events 4 = Clear FSTs 5 = Clear History Data 6 = Restore Configuration from Flash, Clear Alarms/Events/FSTs/History Data 7 = Restore Configuration from Defaults',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-7'
        )
        """
        Used to re-start the system. A cold start always includes starting from the boot sector and performing power-on-self tests, plus the following options. Valid
        values are: 0 = Do nothing 1 = Restore Configuration from Flash 2 = Clear Alarms 3 = Clear Events 4 = Clear FSTs 5 = Clear History Data 6 = Restore
        Configuration from Flash, Clear Alarms/Events/FSTs/History Data 7 = Restore Configuration from Defaults
        """

        BAUD_RATE_GENERATOR_0_RATE = PointTypeParameter(
            parameter_number=31,
            parameter_name='Baud Rate Generator #0 Rate',
            parameter_desc='The baud rate that baud rate generator #0 is to be set to.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='300, 600, 1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200'
        )
        """
        The baud rate that baud rate generator #0 is to be set to.
        """

        BAUD_RATE_GENERATOR_1_RATE = PointTypeParameter(
            parameter_number=32,
            parameter_name='Baud Rate Generator #1 Rate',
            parameter_desc='The baud rate that baud rate generator #1 is to be set to.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='300, 600, 1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200'
        )
        """
        The baud rate that baud rate generator #1 is to be set to.
        """

        BAUD_RATE_GENERATOR_2_RATE = PointTypeParameter(
            parameter_number=33,
            parameter_name='Baud Rate Generator #2 Rate',
            parameter_desc='The baud rate that baud rate generator #2 is to be set to.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='300, 600, 1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200'
        )
        """
        The baud rate that baud rate generator #2 is to be set to.
        """

        BAUD_RATE_GENERATOR_3_RATE = PointTypeParameter(
            parameter_number=34,
            parameter_name='Baud Rate Generator #3 Rate',
            parameter_desc='The baud rate that baud rate generator #3 is to be set to.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='300, 600, 1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200'
        )
        """
        The baud rate that baud rate generator #3 is to be set to.
        """

        CRC_CHECK = PointTypeParameter(
            parameter_number=35,
            parameter_name='CRC Check',
            parameter_desc='Provides the CRC check flag. If this flag is enabled, a CRC is appended to all messages and a CRC is expected on all received messages. Valid values are 0 (Disabled) and 1 (Enabled). Note: Ethernet communications ignore the CRC since TCP/IP protocol already does error checking. The CRC must still be sent over Ethernet communications.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Provides the CRC check flag. If this flag is enabled, a CRC is appended to all messages and a CRC is expected on all received messages. Valid values are 0
        (Disabled) and 1 (Enabled). Note: Ethernet communications ignore the CRC since TCP/IP protocol already does error checking. The CRC must still be sent over
        Ethernet communications.
        """

        LED_ENABLE = PointTypeParameter(
            parameter_number=36,
            parameter_name='LED Enable',
            parameter_desc='Indicates the number of minutes the LEDs are on before automatically turning themselves off. (The LED button activea the LEDs for the configured time). Valid values are 0 (LEDs always on) and 1 - 60 (Specifying the number of minutes LEDs are on).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-60'
        )
        """
        Indicates the number of minutes the LEDs are on before automatically turning themselves off. (The LED button activea the LEDs for the configured time). Valid
        values are 0 (LEDs always on) and 1 - 60 (Specifying the number of minutes LEDs are on).
        """

        BOOT_PART_NUMBER_AND_VERSION = PointTypeParameter(
            parameter_number=37,
            parameter_name='Boot Part Number and Version',
            parameter_desc='Contains the boot software part number and version number string.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Contains the boot software part number and version number string.
        """

        BOOT_FIRMWARE_TIME_CREATED = PointTypeParameter(
            parameter_number=38,
            parameter_name='Boot Firmware Time Created',
            parameter_desc='Contains the time and date stamp the foot firmware was created.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Contains the time and date stamp the foot firmware was created.
        """

        ACTIVE_ODORIZER_S_ = PointTypeParameter(
            parameter_number=39,
            parameter_name='Active Odorizer(s)',
            parameter_desc='Indicates the number of active odorizers. Note: Maximum number depends on licensing.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-12'
        )
        """
        Indicates the number of active odorizers. Note: Maximum number depends on licensing.
        """

        CLEAR_HISTORY = PointTypeParameter(
            parameter_number=40,
            parameter_name='Clear History',
            parameter_desc='Clears history database and resets configuration back to factory defaults without power cycling the ROC. Valid values are 0 (Dont clear) and 1 (Clear).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Clears history database and resets configuration back to factory defaults without power cycling the ROC. Valid values are 0 (Dont clear) and 1 (Clear).
        """

        FLASH_DISK_SPACE_USED = PointTypeParameter(
            parameter_number=41,
            parameter_name='Flash Disk Space Used',
            parameter_desc='The amount of disk space that has been consumed.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 0xFFFFFFFF'
        )
        """
        The amount of disk space that has been consumed.
        """

        FLASH_DISK_SPACE_FREE = PointTypeParameter(
            parameter_number=42,
            parameter_name='Flash Disk Space Free',
            parameter_desc='The amount of disk space that is available.',
            data_type=dt.UINT32,
            access='R/O',
            value_range='0 0xFFFFFFFF'
        )
        """
        The amount of disk space that is available.
        """

        NUMBER_OF_SYSTEM_INITIALIZATIONS = PointTypeParameter(
            parameter_number=43,
            parameter_name='Number of System Initializations',
            parameter_desc='The number of system initializations. Note: This parameter is not reset to defaults due to a cold start; however, it is reset on a firmware upgrade.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The number of system initializations. Note: This parameter is not reset to defaults due to a cold start; however, it is reset on a firmware upgrade.
        """

        NUMBER_OF_WARM_STARTS = PointTypeParameter(
            parameter_number=44,
            parameter_name='Number of Warm Starts',
            parameter_desc='The number of warm starts. Note: This parameter is not reset to defaults due to a cold start; however, it is reset on a firmware upgrade.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The number of warm starts. Note: This parameter is not reset to defaults due to a cold start; however, it is reset on a firmware upgrade.
        """

        NUMBER_OF_COLD_STARTS = PointTypeParameter(
            parameter_number=45,
            parameter_name='Number of Cold Starts',
            parameter_desc='The number of cold starts. Note: This parameter is not reset to defaults due to a cold start; however, it is reset on a firmware upgrade.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The number of cold starts. Note: This parameter is not reset to defaults due to a cold start; however, it is reset on a firmware upgrade.
        """

        NUMBER_OF_POWER_CYCLES = PointTypeParameter(
            parameter_number=46,
            parameter_name='Number of Power Cycles',
            parameter_desc='The number of power cycles. Note This parameter is not reset to defaults due to a cold start; however, it is reset on a firmware upgrade.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The number of power cycles. Note This parameter is not reset to defaults due to a cold start; however, it is reset on a firmware upgrade.
        """

        LAST_POWER_DOWN_TIME = PointTypeParameter(
            parameter_number=47,
            parameter_name='Last Power-Down Time',
            parameter_desc='Contains the last power-down time in the number of seconds elapsed since 12:00 a.m. Jan. 1, 1970.',
            data_type=dt.TIME,
            access='R/O',
            value_range='N/A'
        )
        """
        Contains the last power-down time in the number of seconds elapsed since 12:00 a.m. Jan. 1, 1970.
        """

        LAST_POWER_UP_TIME = PointTypeParameter(
            parameter_number=48,
            parameter_name='Last Power-Up Time',
            parameter_desc='Contains the last power-up time in the number of seconds elapsed since 12:00 a.m. Jan. 1, 1970.',
            data_type=dt.TIME,
            access='R/O',
            value_range='N/A'
        )
        """
        Contains the last power-up time in the number of seconds elapsed since 12:00 a.m. Jan. 1, 1970.
        """

        LOGICAL_COMPATIBILITY_MODE = PointTypeParameter(
            parameter_number=50,
            parameter_name='Logical Compatibility Mode',
            parameter_desc='Indicates the logical compatibility mode. Valid values are: 0 = 16 points per slot [Opcode 50 information and logical indexing for I/O is used in the same way as with version 1.XX of firmware]. 1 = 8 points per slot [Opcode 50 information and logical indexing for I/O is based on 8 points per module and allows for up to 27 modules to be accessed.] See Opcode 50 for more information.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Indicates the logical compatibility mode. Valid values are: 0 = 16 points per slot [Opcode 50 information and logical indexing for I/O is used in the same way
        as with version 1.XX of firmware]. 1 = 8 points per slot [Opcode 50 information and logical indexing for I/O is based on 8 points per module and allows for up
        to 27 modules to be accessed.] See Opcode 50 for more information.
        """

        ROC_SERIES = PointTypeParameter(
            parameter_number=51,
            parameter_name='ROC Series',
            parameter_desc='Indicates hardware revision.',
            data_type=dt.AC20,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Indicates hardware revision.
        """

        NUM_ACTIVE_VIRTUAL_DO = PointTypeParameter(
            parameter_number=52,
            parameter_name='Num Active Virtual DO',
            parameter_desc='Indicates the number of active virtual Discrete Outputs.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-24'
        )
        """
        Indicates the number of active virtual Discrete Outputs.
        """

        SYSTEM_ROLLOVER_FOR_DOUBLE_PRECISION_PARAMETERS = PointTypeParameter(
            parameter_number=53,
            parameter_name='System Rollover for Double Precision Parameters',
            parameter_desc='Indicates the value at which the double precision accumlators roll over.',
            data_type=dt.DBL,
            access='R/W',
            value_range='Any valid IEEE double precsion float 2,996 * 10306'
        )
        """
        Indicates the value at which the double precision accumlators roll over.
        """

        LOAD_DIAGNOSTIC_1_ENABLE = PointTypeParameter(
            parameter_number=65,
            parameter_name='Load Diagnostic 1 Enable',
            parameter_desc='Turns Load Diagnostic 1 on or off. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Turns Load Diagnostic 1 on or off. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        LOAD_DIAGNOSTIC_1_PERIOD = PointTypeParameter(
            parameter_number=66,
            parameter_name='Load Diagnostic 1 Period',
            parameter_desc='The period in seconds over which this load diagnostic samples and averages. Changing this value will reset the samples and averages.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='5-180'
        )
        """
        The period in seconds over which this load diagnostic samples and averages. Changing this value will reset the samples and averages.
        """

        LOAD_DIAGNOSTIC_1_CURRENT_AVERAGE = PointTypeParameter(
            parameter_number=67,
            parameter_name='Load Diagnostic 1 Current Average',
            parameter_desc='The average MPU load perecentage for samples taken over the last period.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0 100.0'
        )
        """
        The average MPU load perecentage for samples taken over the last period.
        """

        LOAD_DIAGNOSTIC_1_MAXIMUM_AVERAGE = PointTypeParameter(
            parameter_number=68,
            parameter_name='Load Diagnostic 1 Maximum Average',
            parameter_desc='The maximum value seen for parameter 67 since inception. Resettable via parameter 72.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0 100.0'
        )
        """
        The maximum value seen for parameter 67 since inception. Resettable via parameter 72.
        """

        LOAD_DIAGNOSTIC_1_THRESHOLD = PointTypeParameter(
            parameter_number=69,
            parameter_name='Load Diagnostic 1 Threshold',
            parameter_desc='A percentage of MPU load which can be used to identify the amount of time a ROC is above and below a certain load percentage.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        A percentage of MPU load which can be used to identify the amount of time a ROC is above and below a certain load percentage.
        """

        LOAD_DIAGNOSTIC_1_OVER_THRESHOLD_PERCENTAGE = PointTypeParameter(
            parameter_number=70,
            parameter_name='Load Diagnostic 1 Over Threshold Percentage',
            parameter_desc='The perecentage of time since inception the ROCs loading exceeded the value defined in parameter 69.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0 100.0'
        )
        """
        The perecentage of time since inception the ROCs loading exceeded the value defined in parameter 69.
        """

        LOAD_DIAGNOSTIC_1_ALARM_ENABLE = PointTypeParameter(
            parameter_number=71,
            parameter_name='Load Diagnostic 1 Alarm Enable',
            parameter_desc='Enables the ROC to write to the alarm log if the current loading average is above the Threshold defined in parameter 69. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Enables the ROC to write to the alarm log if the current loading average is above the Threshold defined in parameter 69. Valid values are 0 (Disabled) and 1
        (Enabled).
        """

        LOAD_DIAGNOSTIC_1_RESETS = PointTypeParameter(
            parameter_number=72,
            parameter_name='Load Diagnostic 1 Resets',
            parameter_desc='Resets certain values associated with this load diagnostic. 0 Idle 1 = Reset Averages (Parameters 67 and 68) 2 = Reset Over Threshold % (Parameter 70)',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        Resets certain values associated with this load diagnostic. 0 Idle 1 = Reset Averages (Parameters 67 and 68) 2 = Reset Over Threshold % (Parameter 70)
        """

        LOAD_DIAGNOSTIC_2_ENABLE = PointTypeParameter(
            parameter_number=73,
            parameter_name='Load Diagnostic 2 Enable',
            parameter_desc='Turns Load Diagnostic 2 on or off. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Turns Load Diagnostic 2 on or off. Valid values are 0 (Disabled) and 1 (Enabled).
        """

        LOAD_DIAGNOSTIC_2_PERIOD = PointTypeParameter(
            parameter_number=74,
            parameter_name='Load Diagnostic 2 Period',
            parameter_desc='The period in seconds over which this load diagnostic samples and averages. Changing this value will reset the samples and averages.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='5-180'
        )
        """
        The period in seconds over which this load diagnostic samples and averages. Changing this value will reset the samples and averages.
        """

        LOAD_DIAGNOSTIC_2_CURRENT_AVERAGE = PointTypeParameter(
            parameter_number=75,
            parameter_name='Load Diagnostic 2 Current Average',
            parameter_desc='The average MPU load perecentage for samples taken over the last period.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0 100.0'
        )
        """
        The average MPU load perecentage for samples taken over the last period.
        """

        LOAD_DIAGNOSTIC_2_MAXIMUM_AVERAGE = PointTypeParameter(
            parameter_number=76,
            parameter_name='Load Diagnostic 2 Maximum Average',
            parameter_desc='The maximum value seen for parameter 75 since inception. Resettable via parameter 80.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0 100.0'
        )
        """
        The maximum value seen for parameter 75 since inception. Resettable via parameter 80.
        """

        LOAD_DIAGNOSTIC_2_THRESHOLD = PointTypeParameter(
            parameter_number=77,
            parameter_name='Load Diagnostic 2 Threshold',
            parameter_desc='A percentage of MPU load which can be used to identify the amount of time a ROC is above and below a certain load percentage.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 100.0'
        )
        """
        A percentage of MPU load which can be used to identify the amount of time a ROC is above and below a certain load percentage.
        """

        LOAD_DIAGNOSTIC_2_OVER_THRESHOLD_PERCENTAGE = PointTypeParameter(
            parameter_number=78,
            parameter_name='Load Diagnostic 2 Over Threshold Percentage',
            parameter_desc='The perecentage of time since inception the ROCs loading exceeded the value defined in parameter 77.',
            data_type=dt.FL,
            access='R/O',
            value_range='0.0 100.0'
        )
        """
        The perecentage of time since inception the ROCs loading exceeded the value defined in parameter 77.
        """

        LOAD_DIAGNOSTIC_2_ALARM_ENABLE = PointTypeParameter(
            parameter_number=79,
            parameter_name='Load Diagnostic 2 Alarm Enable',
            parameter_desc='Enables the ROC to write to the alarm log if the current loading average is above the Threshold defined in parameter 77. Valid values are 0 (Disabled) and 1 (Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Enables the ROC to write to the alarm log if the current loading average is above the Threshold defined in parameter 77. Valid values are 0 (Disabled) and 1
        (Enabled).
        """

        LOAD_DIAGNOSTIC_2_RESETS = PointTypeParameter(
            parameter_number=80,
            parameter_name='Load Diagnostic 2 Resets',
            parameter_desc='Resets certain values associated with this load diagnostic. 0 = Idle 1 = Reset Averages (Parameters 75 and 76) 2 = Reset Over Threshold % (Parameter 78)',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        Resets certain values associated with this load diagnostic. 0 = Idle 1 = Reset Averages (Parameters 75 and 76) 2 = Reset Over Threshold % (Parameter 78)
        """

        ENHANCED_SECURITY_ENABLE = PointTypeParameter(
            parameter_number=81,
            parameter_name='Enhanced Security Enable',
            parameter_desc='Changes ROC Security, when enabled, to utilize longer User IDs and Passwords for credential authenitcation. Once enabled (1), this setting cannot be reverted.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Changes ROC Security, when enabled, to utilize longer User IDs and Passwords for credential authenitcation. Once enabled (1), this setting cannot be reverted.
        """





class LOGON_PARAMETERS(PointType):
    """Logon Parameters"""

    point_type_number: int = 92
    """Point Type ID"""

    point_type_desc: str = 'Logon Parameters'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        OPERATOR_IDENTIFIER = PointTypeParameter(
            parameter_number=0,
            parameter_name='Operator Identifier',
            parameter_desc='A three-character ASCII operator identifier (such as LOI).',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte.'
        )
        """
        A three-character ASCII operator identifier (such as LOI).
        """

        UNUSED_1 = PointTypeParameter(
            parameter_number=1,
            parameter_name='Unused #1',
            parameter_desc='Unused #1',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0'
        )
        """
        Unused #1
        """

        UNUSED_2 = PointTypeParameter(
            parameter_number=2,
            parameter_name='Unused #2',
            parameter_desc='Unused #2',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0'
        )
        """
        Unused #2
        """

        UNUSED_3 = PointTypeParameter(
            parameter_number=3,
            parameter_name='Unused #3',
            parameter_desc='Unused #3',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0'
        )
        """
        Unused #3
        """

        PASSWORD = PointTypeParameter(
            parameter_number=4,
            parameter_name='Password',
            parameter_desc='A numerical value that is used as a password for the Operator Identifier (such as 1000). Modified in version 1.20 to Write- Only; reading the value now always returns 0. Note: The first point (logical 0) defaults to the familiar operator ID (LOI) and password (1000). The remaining 15 points default to operator ID and password of 0000.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0000 9999'
        )
        """
        A numerical value that is used as a password for the Operator Identifier (such as 1000). Modified in version 1.20 to Write- Only; reading the value now always
        returns 0. Note: The first point (logical 0) defaults to the familiar operator ID (LOI) and password (1000). The remaining 15 points default to operator ID and
        password of 0000.
        """

        ACCESS_LEVEL = PointTypeParameter(
            parameter_number=5,
            parameter_name='Access Level',
            parameter_desc='A value that is used to limit access to parameters when parameter (95, X, 44) is set to 2 (Security by User Access Level) where X = to the logical of the port that the request is being made on.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 255'
        )
        """
        A value that is used to limit access to parameters when parameter (95, X, 44) is set to 2 (Security by User Access Level) where X = to the logical of the port
        that the request is being made on.
        """

        GROUP_1 = PointTypeParameter(
            parameter_number=6,
            parameter_name='Group #1',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0 19.
        """

        GROUP_2 = PointTypeParameter(
            parameter_number=7,
            parameter_name='Group #2',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0 19.
        """

        GROUP_3 = PointTypeParameter(
            parameter_number=8,
            parameter_name='Group #3',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.
        """

        GROUP_4 = PointTypeParameter(
            parameter_number=9,
            parameter_name='Group #4',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.
        """

        GROUP_5 = PointTypeParameter(
            parameter_number=10,
            parameter_name='Group #5',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters -19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters -19.
        """

        GROUP_6 = PointTypeParameter(
            parameter_number=11,
            parameter_name='Group #6',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-19.
        """

        GROUP_7 = PointTypeParameter(
            parameter_number=12,
            parameter_name='Group #7',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters -19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters -19.
        """

        GROUP_8 = PointTypeParameter(
            parameter_number=13,
            parameter_name='Group #8',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-19.
        """

        GROUP_9 = PointTypeParameter(
            parameter_number=14,
            parameter_name='Group #9',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-19.
        """

        GROUP_10 = PointTypeParameter(
            parameter_number=15,
            parameter_name='Group #10',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters -19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters -19.
        """

        GROUP_11 = PointTypeParameter(
            parameter_number=16,
            parameter_name='Group #11',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.
        """

        GROUP_12 = PointTypeParameter(
            parameter_number=17,
            parameter_name='Group #12',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.
        """

        GROUP_13 = PointTypeParameter(
            parameter_number=18,
            parameter_name='Group #13',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 1919.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 1919.
        """

        GROUP_14 = PointTypeParameter(
            parameter_number=19,
            parameter_name='Group #14',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-19.
        """

        GROUP_15 = PointTypeParameter(
            parameter_number=20,
            parameter_name='Group #15',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.
        """

        GROUP_16 = PointTypeParameter(
            parameter_number=21,
            parameter_name='Group #16',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters >19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-> 19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters >19.
        """

        GROUP_17 = PointTypeParameter(
            parameter_number=22,
            parameter_name='Group #17',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 19.
        """

        GROUP_18 = PointTypeParameter(
            parameter_number=23,
            parameter_name='Group #18',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-> 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0->19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0-> 19.
        """

        GROUP_19 = PointTypeParameter(
            parameter_number=24,
            parameter_name='Group #19',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0->19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0 19.
        """

        GROUP_20 = PointTypeParameter(
            parameter_number=25,
            parameter_name='Group #20',
            parameter_desc='States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0 19.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0->19,255'
        )
        """
        States the first group the user is a member. The Group is then mapped to PT123 Logical 1, Parameters 0 19.
        """

        LONG_USER_ID = PointTypeParameter(
            parameter_number=26,
            parameter_name='Long User ID',
            parameter_desc='A 30-character ASCII identifier for authenticating a User',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte.'
        )
        """
        A 30-character ASCII identifier for authenticating a User
        """

        LONG_PASSWORD = PointTypeParameter(
            parameter_number=27,
            parameter_name='Long Password',
            parameter_desc='A 32-character password associated with the user. Note: The default for logical zero is Password padded with ASCII spaces. This should be changed immediately upon longer login activation. Note: Reading this parameter will return a blank string. Passwords are effectively Write Only. Note: The password must be encrypted and cannot be written in clear text.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte.'
        )
        """
        A 32-character password associated with the user. Note: The default for logical zero is Password padded with ASCII spaces. This should be changed immediately
        upon longer login activation. Note: Reading this parameter will return a blank string. Passwords are effectively Write Only. Note: The password must be
        encrypted and cannot be written in clear text.
        """

        KEYPAD_PIN = PointTypeParameter(
            parameter_number=28,
            parameter_name='Keypad PIN',
            parameter_desc='An 8-digit integer identification number mapping to a user ID which a Keypad Display can use to login. A value of 0 indicates that this user has no PIN access. Note: Reading this parameter will return a 0 if a user has no PIN, or a 1 if they do. The actual PIN is not returned.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0-99,999,999'
        )
        """
        An 8-digit integer identification number mapping to a user ID which a Keypad Display can use to login. A value of 0 indicates that this user has no PIN access.
        Note: Reading this parameter will return a 0 if a user has no PIN, or a 1 if they do. The actual PIN is not returned.
        """





class COMMUNICATION_PORTS(PointType):
    """Communication Ports"""

    point_type_number: int = 95
    """Point Type ID"""

    point_type_desc: str = 'Communication Ports'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        TAG_IDENTIFICATION = PointTypeParameter(
            parameter_number=0,
            parameter_name='Tag Identification',
            parameter_desc='The customizable name for this communications port.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        The customizable name for this communications port.
        """

        BAUD_RATE_GENERATOR_USED = PointTypeParameter(
            parameter_number=1,
            parameter_name='Baud Rate Generator Used',
            parameter_desc='The baud rate generator used by this com port. Each port may use a different generator, however, only 4 generators exist. See Point Type 91, System Variables, Parameters 31- 34.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0-> 3'
        )
        """
        The baud rate generator used by this com port. Each port may use a different generator, however, only 4 generators exist. See Point Type 91, System Variables,
        Parameters 31- 34.
        """

        STOP_BITS = PointTypeParameter(
            parameter_number=2,
            parameter_name='Stop Bits',
            parameter_desc='The number of stop bits in a character.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='1,2'
        )
        """
        The number of stop bits in a character.
        """

        DATA_BITS = PointTypeParameter(
            parameter_number=3,
            parameter_name='Data Bits',
            parameter_desc='The number of data bits in a character.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='7,8'
        )
        """
        The number of data bits in a character.
        """

        PARITY = PointTypeParameter(
            parameter_number=4,
            parameter_name='Parity',
            parameter_desc='For parity error checking, the host adds a 1 or 0 bit to the character to make it even or odd. The receiver then decodes this. An error occurs if the sum of the bits is not correct. Valid values are: 0 None 1 Odd 2 Even',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        For parity error checking, the host adds a 1 or 0 bit to the character to make it even or odd. The receiver then decodes this. An error occurs if the sum of the
        bits is not correct. Valid values are: 0 None 1 Odd 2 Even
        """

        COMM_TYPE = PointTypeParameter(
            parameter_number=5,
            parameter_name='Comm Type',
            parameter_desc='Indicates the communication module installed. The system updates this parameter wheneer a module is installed or removed. Valid values are : 0 = No Comm Module Installed 9 = MVS 10 = RS-232 11 = RS-485 12 = Modem 13 = HART 15 = Ethernet (Versions prior to 2.00) 19 = Ethernet (Versions 2.00 and later)',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0, 9 13, 15'
        )
        """
        Indicates the communication module installed. The system updates this parameter wheneer a module is installed or removed. Valid values are : 0 = No Comm Module
        Installed 9 = MVS 10 = RS-232 11 = RS-485 12 = Modem 13 = HART 15 = Ethernet (Versions prior to 2.00) 19 = Ethernet (Versions 2.00 and later)
        """

        STORE_AND_FORWARD_PORT = PointTypeParameter(
            parameter_number=6,
            parameter_name='Store and forward port',
            parameter_desc='If this is enabled, all store and forward messages are sent out this port. If it is disabled, none are sent. Valid values are 0 (Do not store and forward for this port) and 1 (Store and forward for this port).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If this is enabled, all store and forward messages are sent out this port. If it is disabled, none are sent. Valid values are 0 (Do not store and forward for
        this port) and 1 (Store and forward for this port).
        """

        KEY_ON_DELAY = PointTypeParameter(
            parameter_number=7,
            parameter_name='Key On Delay',
            parameter_desc='The period to wait after turning the RTS signal on before a message can be sent. This value is in seconds.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0-> Any positive valid IEEE 754 float'
        )
        """
        The period to wait after turning the RTS signal on before a message can be sent. This value is in seconds.
        """

        KEY_OFF_DELAY = PointTypeParameter(
            parameter_number=8,
            parameter_name='Key Off Delay',
            parameter_desc='The period, in seconds, to delay turning the RTS signal off after a message has been sent.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0-> Any positive valid IEEE 754 float'
        )
        """
        The period, in seconds, to delay turning the RTS signal off after a message has been sent.
        """

        MODEM_STATUS = PointTypeParameter(
            parameter_number=9,
            parameter_name='Modem Status',
            parameter_desc='This is the numeric response from the modem. A non-Hayes compatible modem does not provide this information. 0 OK.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-> 255'
        )
        """
        This is the numeric response from the modem. A non-Hayes compatible modem does not provide this information. 0 OK.
        """

        MODEM_TYPE = PointTypeParameter(
            parameter_number=10,
            parameter_name='Modem Type',
            parameter_desc='Indicates the type of modem. The ROC detects and can changesthe internal modem. Valid values are: 0 = None 1 External 2 = Internal Note: The user cannot write 2.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0--2'
        )
        """
        Indicates the type of modem. The ROC detects and can changesthe internal modem. Valid values are: 0 = None 1 External 2 = Internal Note: The user cannot write
        2.
        """

        CONNECT_TIME = PointTypeParameter(
            parameter_number=11,
            parameter_name='Connect Time',
            parameter_desc='The amount of time in seconds the ROC800- Series waits after initiating a call to receive a connect message before terminating a call. Enter 0 to disable.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0 Max positive IEEE 754 float'
        )
        """
        The amount of time in seconds the ROC800- Series waits after initiating a call to receive a connect message before terminating a call. Enter 0 to disable.
        """

        CONFIGURATION_COMMAND = PointTypeParameter(
            parameter_number=12,
            parameter_name='Configuration Command',
            parameter_desc='The commands needed to initialize a modem.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        The commands needed to initialize a modem.
        """

        CONNECT_COMMAND = PointTypeParameter(
            parameter_number=13,
            parameter_name='Connect Command',
            parameter_desc='The Hayes compatible modem command needed to dial out for SRBX communications.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        The Hayes compatible modem command needed to dial out for SRBX communications.
        """

        DISCONNECT_TIME = PointTypeParameter(
            parameter_number=14,
            parameter_name='Disconnect Time',
            parameter_desc='Time in seconds that the ROC800-Series waits before disconnecting if there is no activity. Enter 0 to disable.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0-> Any positive valid IEEE 754 float'
        )
        """
        Time in seconds that the ROC800-Series waits before disconnecting if there is no activity. Enter 0 to disable.
        """

        INACTIVITY_TIME = PointTypeParameter(
            parameter_number=15,
            parameter_name='Inactivity Time',
            parameter_desc='Time in seconds that the ROC800-Series waits, without receiving a signal, before it resets the modem. The inactivity timer looks at the valid receive counter to determine if the signal has been received. Enter 0 to disable.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0-> Any positive valid IEEE 754 float'
        )
        """
        Time in seconds that the ROC800-Series waits, without receiving a signal, before it resets the modem. The inactivity timer looks at the valid receive counter to
        determine if the signal has been received. Enter 0 to disable.
        """

        MODEM_DISCONNECT_COMMAND = PointTypeParameter(
            parameter_number=16,
            parameter_name='Modem disconnect command',
            parameter_desc='The user can use a different disconnect string for a modem.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        The user can use a different disconnect string for a modem.
        """

        SRBX_STATUS = PointTypeParameter(
            parameter_number=17,
            parameter_name='SRBX Status',
            parameter_desc='Valid values are 0 (SRBX is currently inactive) and 1 (SRBX is currently active for this port).',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0-1'
        )
        """
        Valid values are 0 (SRBX is currently inactive) and 1 (SRBX is currently active for this port).
        """

        ENABLE_SRBX = PointTypeParameter(
            parameter_number=18,
            parameter_name='Enable SRBX',
            parameter_desc='If this is enabled all SRBX messages will be sent out this port. If is disabled, none will be sent. Valid values are 0 (Disable SRBX for this port) and 1 (Enable SRBX for this port).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        If this is enabled all SRBX messages will be sent out this port. If is disabled, none will be sent. Valid values are 0 (Disable SRBX for this port) and 1
        (Enable SRBX for this port).
        """

        SRBX_ALARM_INDEX = PointTypeParameter(
            parameter_number=19,
            parameter_name='SRBX Alarm Index',
            parameter_desc='The index into the alarm table that corresponds to the alarm that caused an SRBX.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 [PT 91, parameter 10]'
        )
        """
        The index into the alarm table that corresponds to the alarm that caused an SRBX.
        """

        SRBX_TIME_BASE_1 = PointTypeParameter(
            parameter_number=20,
            parameter_name='SRBX Time Base #1',
            parameter_desc='Time in seconds that the ROC800-Series uses as the first SRBX delay.',
            data_type=dt.FL,
            access='R/W',
            value_range='0,0-> Any positive valid IEEE 754 float'
        )
        """
        Time in seconds that the ROC800-Series uses as the first SRBX delay.
        """

        SRBX_ATTEMPTS_1 = PointTypeParameter(
            parameter_number=21,
            parameter_name='SRBX Attempts #1',
            parameter_desc='The number of attempts for the first SRBX to use. Valid values are 0 (Disable) and 255 (Continuous).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        The number of attempts for the first SRBX to use. Valid values are 0 (Disable) and 255 (Continuous).
        """

        SRBX_TIME_BASE_2 = PointTypeParameter(
            parameter_number=22,
            parameter_name='SRBX Time Base #2',
            parameter_desc='Time in seconds that the ROC800-Series uses as the second SRBX delay.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0-> Any positive valid IEEE 754 float'
        )
        """
        Time in seconds that the ROC800-Series uses as the second SRBX delay.
        """

        SRBX_ATTEMPTS_2 = PointTypeParameter(
            parameter_number=23,
            parameter_name='SRBX Attempts #2',
            parameter_desc='The number of attempts for the second SRBX to use. Valid values are 0 (Disable) and 255 (Continuous).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        The number of attempts for the second SRBX to use. Valid values are 0 (Disable) and 255 (Continuous).
        """

        SRBX_TIME_BASE_3 = PointTypeParameter(
            parameter_number=24,
            parameter_name='SRBX Time Base #3',
            parameter_desc='Time in seconds that the ROC800-Series uses as the third SRBX delay.',
            data_type=dt.FL,
            access='R/W',
            value_range='0.0-> Any positive valid IEEE 754 float'
        )
        """
        Time in seconds that the ROC800-Series uses as the third SRBX delay.
        """

        SRBX_ATTEMPTS_3 = PointTypeParameter(
            parameter_number=25,
            parameter_name='SRBX Attempts #3',
            parameter_desc='The number of attempts for the third SRBX to use. Valid values are 0 (Disable) and 255 (Continuous).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        The number of attempts for the third SRBX to use. Valid values are 0 (Disable) and 255 (Continuous).
        """

        SRBX_HOST_ADDRESS = PointTypeParameter(
            parameter_number=26,
            parameter_name='SRBX Host Address',
            parameter_desc='Used to identify the SRBX host - Address portion.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Used to identify the SRBX host - Address portion.
        """

        SRBX_HOST_GROUP = PointTypeParameter(
            parameter_number=27,
            parameter_name='SRBX Host Group',
            parameter_desc='Used to identify the SRBX host - Group portion.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Used to identify the SRBX host - Group portion.
        """

        STORE__FORWARD_ADDRESS_1 = PointTypeParameter(
            parameter_number=28,
            parameter_name='Store & Forward Address #1',
            parameter_desc='Address of the first destination for the store and forward path. SRBX must be enabled for this to function.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Address of the first destination for the store and forward path. SRBX must be enabled for this to function.
        """

        STORE__FORWARD_GROUP_1 = PointTypeParameter(
            parameter_number=29,
            parameter_name='Store & Forward Group #1',
            parameter_desc='Group number of the first destination for the store and forward path. SRBX must be enabled for this to function.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Group number of the first destination for the store and forward path. SRBX must be enabled for this to function.
        """

        STORE__FORWARD_ADDRESS_2 = PointTypeParameter(
            parameter_number=30,
            parameter_name='Store & Forward Address #2',
            parameter_desc='Address of the second destination for the store and forward path. SRBX must be enabled for this to function.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Address of the second destination for the store and forward path. SRBX must be enabled for this to function.
        """

        STORE__FORWARD_GROUP_2 = PointTypeParameter(
            parameter_number=31,
            parameter_name='Store & Forward Group #2',
            parameter_desc='Group number of the second destination for the store and forward path. SRBX must be enabled for this to function.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Group number of the second destination for the store and forward path. SRBX must be enabled for this to function.
        """

        STORE__FORWARD_ADDRESS_3 = PointTypeParameter(
            parameter_number=32,
            parameter_name='Store & Forward Address #3',
            parameter_desc='Address of the third destination for the store and forward path. SRBX must be enabled for this to function.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Address of the third destination for the store and forward path. SRBX must be enabled for this to function.
        """

        STORE__FORWARD_GROUP_3 = PointTypeParameter(
            parameter_number=33,
            parameter_name='Store & Forward Group #3',
            parameter_desc='Group number of the third destination for store and forward. SRBX must be enabled for this to function.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Group number of the third destination for store and forward. SRBX must be enabled for this to function.
        """

        ROC_PLUS_PROTOCOL_VALID_RECEIVE_COUNTER = PointTypeParameter(
            parameter_number=36,
            parameter_name='ROC Plus Protocol Valid Receive Counter',
            parameter_desc='The number of valid ROC Plus Protocol messages the ROC received for this port. It can be cleared by the user.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The number of valid ROC Plus Protocol messages the ROC received for this port. It can be cleared by the user.
        """

        ROC_PLUS_PROTOCOL_SUCCESSFUL_MESSAGE_TIME = PointTypeParameter(
            parameter_number=37,
            parameter_name='ROC Plus Protocol successful message time',
            parameter_desc='The time of the last successful Opcode received by the ROC800-Series. Indicated by the number of seconds since midnight Jan 1, 1970.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0x0 0xFFFFFFFF'
        )
        """
        The time of the last successful Opcode received by the ROC800-Series. Indicated by the number of seconds since midnight Jan 1, 1970.
        """

        MODBUS_VALID_RECEIVE_COUNTER = PointTypeParameter(
            parameter_number=38,
            parameter_name='Modbus Valid Receive Counter',
            parameter_desc='The number of valid Modbus messages received the ROC received for this port. It can be cleared by the user.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The number of valid Modbus messages received the ROC received for this port. It can be cleared by the user.
        """

        MODBUS_SUCCESSFUL_MESSAGE_TIME = PointTypeParameter(
            parameter_number=39,
            parameter_name='Modbus successful message time',
            parameter_desc='The time of the last successful function code received by the ROC800-Series. Indicated by the number of seconds since midnight Jan 1, 1970.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0x0 0xFFFFFFFF'
        )
        """
        The time of the last successful function code received by the ROC800-Series. Indicated by the number of seconds since midnight Jan 1, 1970.
        """

        NUMBER_OF_INVALID_MESSAGE_BYTES = PointTypeParameter(
            parameter_number=40,
            parameter_name='Number of invalid message bytes',
            parameter_desc='The number of invalid ROC Plus Protocol or Modbus bytes received. This parameter always returns 0 for logical 1.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        The number of invalid ROC Plus Protocol or Modbus bytes received. This parameter always returns 0 for logical 1.
        """

        INVALID_MESSAGE_BYTE_TIME = PointTypeParameter(
            parameter_number=41,
            parameter_name='Invalid message byte time',
            parameter_desc='The time of the last unsuccessful message byte was received by the ROC800-Series. Indicated by the number of seconds since midnight Jan 1, 1970. This parameter always returns 0 for logical 1.',
            data_type=dt.TIME,
            access='R/O',
            value_range='0x0- 0xFFFFFFFF'
        )
        """
        The time of the last unsuccessful message byte was received by the ROC800-Series. Indicated by the number of seconds since midnight Jan 1, 1970. This parameter
        always returns 0 for logical 1.
        """

        TRANSMIT_COUNTER = PointTypeParameter(
            parameter_number=42,
            parameter_name='Transmit counter',
            parameter_desc='Number of messages sent.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Number of messages sent.
        """

        PORT_OWNER = PointTypeParameter(
            parameter_number=43,
            parameter_name='Port owner',
            parameter_desc='The program that currently owns the port. Messages are routed directly to the owner, bypassing the ROC Plus Protocol. You cannot change the owner if an MVS module is installed on the port. Valid values are: 0 = ROC Plus Protocol / Modbus Slave 1 = Modbus Master (Comm 2 - 5) 2 = DS800 (Not Valid for Comm 1 on ROC809E) 3 LCD 4 = I/O Module (Read Only) 5 = User C++ Program 1 6 = User C++ Program 2 7 = User C++ Program 3 8 = User C++ Program 4 9 = User C++ Program 5 10 = User C++ Program 6 11 = User C++ Program 7 12 = User C++ Program 8 50 = ROC Plus Protocol Only 51 = Modbus Slave Only 52 = LCD/Roc Plus Protocol 255 = DMMI (RAS use only)',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        The program that currently owns the port. Messages are routed directly to the owner, bypassing the ROC Plus Protocol. You cannot change the owner if an MVS
        module is installed on the port. Valid values are: 0 = ROC Plus Protocol / Modbus Slave 1 = Modbus Master (Comm 2 - 5) 2 = DS800 (Not Valid for Comm 1 on
        ROC809E) 3 LCD 4 = I/O Module (Read Only) 5 = User C++ Program 1 6 = User C++ Program 2 7 = User C++ Program 3 8 = User C++ Program 4 9 = User C++ Program 5 10
        = User C++ Program 6 11 = User C++ Program 7 12 = User C++ Program 8 50 = ROC Plus Protocol Only 51 = Modbus Slave Only 52 = LCD/Roc Plus Protocol 255 = DMMI
        (RAS use only)
        """

        ROC_PLUS_PROTOCOL_SECURITY_STATUS = PointTypeParameter(
            parameter_number=44,
            parameter_name='ROC Plus Protocol Security Status',
            parameter_desc='Enables security for the communications port. Valid values are : 0 = Disabled 1 = Security by User ID 2 = Security by User Access Leve',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-2'
        )
        """
        Enables security for the communications port. Valid values are : 0 = Disabled 1 = Security by User ID 2 = Security by User Access Leve
        """

        RTS_TEST = PointTypeParameter(
            parameter_number=45,
            parameter_name='RTS Test',
            parameter_desc='Tests communications. The RTS line will be toggle on for the number of seconds specified and then be off for the number of seconds specified (above 0).',
            data_type=dt.UINT8,
            access='R/OR/W',
            value_range='0 > 255'
        )
        """
        Tests communications. The RTS line will be toggle on for the number of seconds specified and then be off for the number of seconds specified (above 0).
        """

        RESPONSE_DELAY = PointTypeParameter(
            parameter_number=46,
            parameter_name='Response Delay',
            parameter_desc='Sets the response delay time (in milliseconds) for individual ports.',
            data_type=dt.UINT32,
            access='R/OR/W',
            value_range='0 0xFFFFFFFF'
        )
        """
        Sets the response delay time (in milliseconds) for individual ports.
        """

        SECURITY_INACTIVITY_TIMEOUT = PointTypeParameter(
            parameter_number=47,
            parameter_name='Security Inactivity Timeout',
            parameter_desc='Indicates the number of seconds before the user is logged out because of inactivity.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='60 86400'
        )
        """
        Indicates the number of seconds before the user is logged out because of inactivity.
        """





class FST_PARAMETERS(PointType):
    """FST Parameters"""

    point_type_number: int = 96
    """Point Type ID"""

    point_type_desc: str = 'FST Parameters'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        POINT_TAG_ID = PointTypeParameter(
            parameter_number=0,
            parameter_name='Point Tag ID',
            parameter_desc='This field contains a string to describe the FST. X in default name is a number that correlates to the FST logical number.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        This field contains a string to describe the FST. X in default name is a number that correlates to the FST logical number.
        """

        RESULT_REGISTER_RR_ = PointTypeParameter(
            parameter_number=1,
            parameter_name='Result Register (RR)',
            parameter_desc='Register used to store result of last FST operation.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Register used to store result of last FST operation.
        """

        REGISTER_1_R1_ = PointTypeParameter(
            parameter_number=2,
            parameter_name='Register 1 (R1)',
            parameter_desc='Register used as an input to an FST or as a location to store FST data.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Register used as an input to an FST or as a location to store FST data.
        """

        REGISTER_2_R2_ = PointTypeParameter(
            parameter_number=3,
            parameter_name='Register 2 (R2)',
            parameter_desc='Register used as an input to an FST or as a location to store FST data.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Register used as an input to an FST or as a location to store FST data.
        """

        REGISTER_3_R3_ = PointTypeParameter(
            parameter_number=4,
            parameter_name='Register 3 (R3)',
            parameter_desc='Register used as an input to an FST or as a location to store FST data.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Register used as an input to an FST or as a location to store FST data.
        """

        REGISTER_4_R4_ = PointTypeParameter(
            parameter_number=5,
            parameter_name='Register 4 (R4)',
            parameter_desc='Register used as an input to an FST or as a location to store FST data.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Register used as an input to an FST or as a location to store FST data.
        """

        REGISTER_5_R5_ = PointTypeParameter(
            parameter_number=6,
            parameter_name='Register 5 (R5)',
            parameter_desc='Register used as an input to an FST or as a location to store FST data.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Register used as an input to an FST or as a location to store FST data.
        """

        REGISTER_6_R6_ = PointTypeParameter(
            parameter_number=7,
            parameter_name='Register 6 (R6)',
            parameter_desc='Register used as an input to an FST or as a location to store FST data.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Register used as an input to an FST or as a location to store FST data.
        """

        REGISTER_7_R7_ = PointTypeParameter(
            parameter_number=8,
            parameter_name='Register 7 (R7)',
            parameter_desc='Register used as an input to an FST or as a location to store FST data.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Register used as an input to an FST or as a location to store FST data.
        """

        REGISTER_8_R8_ = PointTypeParameter(
            parameter_number=9,
            parameter_name='Register 8 (R8)',
            parameter_desc='Register used as an input to an FST or as a location to store FST data.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Register used as an input to an FST or as a location to store FST data.
        """

        REGISTER_9_R9_ = PointTypeParameter(
            parameter_number=10,
            parameter_name='Register 9 (R9)',
            parameter_desc='Register used as an input to an FST or as a location to store FST data.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Register used as an input to an FST or as a location to store FST data.
        """

        REGISTER_10_R10_ = PointTypeParameter(
            parameter_number=11,
            parameter_name='Register 10 (R10)',
            parameter_desc='Register used as an input to an FST or as a location to store FST data.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Register used as an input to an FST or as a location to store FST data.
        """

        TIMER_1 = PointTypeParameter(
            parameter_number=12,
            parameter_name='Timer #1',
            parameter_desc='Time left for count down timer. Timer resolution is 100ms.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4294967295'
        )
        """
        Time left for count down timer. Timer resolution is 100ms.
        """

        TIMER_2 = PointTypeParameter(
            parameter_number=13,
            parameter_name='Timer #2',
            parameter_desc='Time left for count down timer. Timer resolution is 100ms.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4294967295'
        )
        """
        Time left for count down timer. Timer resolution is 100ms.
        """

        TIMER_3 = PointTypeParameter(
            parameter_number=14,
            parameter_name='Timer #3',
            parameter_desc='Time left for count down timer. Timer resolution is 100ms.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4294967295'
        )
        """
        Time left for count down timer. Timer resolution is 100ms.
        """

        TIMER_4 = PointTypeParameter(
            parameter_number=15,
            parameter_name='Timer #4',
            parameter_desc='Time left for count down timer. Timer resolution is 100ms.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4294967295'
        )
        """
        Time left for count down timer. Timer resolution is 100ms.
        """

        MESSAGE_1 = PointTypeParameter(
            parameter_number=16,
            parameter_name='Message #1',
            parameter_desc='This parameter is updated with the first argument of the MSG FST command when the command executes.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        This parameter is updated with the first argument of the MSG FST command when the command executes.
        """

        MESSAGE_2 = PointTypeParameter(
            parameter_number=17,
            parameter_name='Message #2',
            parameter_desc='This parameter is updated with the first argument of the MS2 FST command when the command executes.',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        This parameter is updated with the first argument of the MS2 FST command when the command executes.
        """

        MESSAGE_DATA_1 = PointTypeParameter(
            parameter_number=18,
            parameter_name='Message Data #1',
            parameter_desc='This parameter is updated with the second argument of the MSG FST command when the command executes.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x2D, 0x2E, 0x30 0x39 for each byte'
        )
        """
        This parameter is updated with the second argument of the MSG FST command when the command executes.
        """

        MISCELLANEOUS_1 = PointTypeParameter(
            parameter_number=19,
            parameter_name='Miscellaneous 1',
            parameter_desc='Single byte register that may be used by an FST.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Single byte register that may be used by an FST.
        """

        MISCELLANEOUS_2 = PointTypeParameter(
            parameter_number=20,
            parameter_name='Miscellaneous 2',
            parameter_desc='Single byte register that may be used by an FST.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Single byte register that may be used by an FST.
        """

        MISCELLANEOUS_3 = PointTypeParameter(
            parameter_number=21,
            parameter_name='Miscellaneous 3',
            parameter_desc='Single byte register that may be used by an FST.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Single byte register that may be used by an FST.
        """

        MISCELLANEOUS_4 = PointTypeParameter(
            parameter_number=22,
            parameter_name='Miscellaneous 4',
            parameter_desc='Single byte register that may be used by an FST.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Single byte register that may be used by an FST.
        """

        COMPARE_FLAG_SVD_ = PointTypeParameter(
            parameter_number=23,
            parameter_name='Compare Flag (SVD)',
            parameter_desc='Stores the result of a Boolean expression. Valid values are 0 (FALSE) and 1 (TRUE).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Stores the result of a Boolean expression. Valid values are 0 (FALSE) and 1 (TRUE).
        """

        RUN_STATUS = PointTypeParameter(
            parameter_number=24,
            parameter_name='Run Status',
            parameter_desc='This parameter stores the run state of the FST. Valid values are: 0 = FST is not running. 1 = FST is running. 5 = Indicates FST has shut down due to an invalid point reference. 8 = FST Editor initiates the Trace mode. 9 = Indicates that the FST in ROC800 is processing.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0, 1, 5, 8, 9'
        )
        """
        This parameter stores the run state of the FST. Valid values are: 0 = FST is not running. 1 = FST is running. 5 = Indicates FST has shut down due to an invalid
        point reference. 8 = FST Editor initiates the Trace mode. 9 = Indicates that the FST in ROC800 is processing.
        """

        CODE_SIZE = PointTypeParameter(
            parameter_number=25,
            parameter_name='Code Size',
            parameter_desc='Size, in bytes, of the FST code. This size does not include storage needed for register names, description, or version.',
            data_type=dt.UINT16,
            access='R/O',
            value_range='0 3000'
        )
        """
        Size, in bytes, of the FST code. This size does not include storage needed for register names, description, or version.
        """

        INSTRUCTION_POINTER = PointTypeParameter(
            parameter_number=26,
            parameter_name='Instruction Pointer',
            parameter_desc='Contains the location of the FST function to be executed next. If an error occurs, the Instruction Pointer will be set to the location of the parameter that caused the error. This parameter may also be called a program counter.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 3000'
        )
        """
        Contains the location of the FST function to be executed next. If an error occurs, the Instruction Pointer will be set to the location of the parameter that
        caused the error. This parameter may also be called a program counter.
        """

        EXECUTION_DELAY = PointTypeParameter(
            parameter_number=27,
            parameter_name='Execution Delay',
            parameter_desc='Execution delay between FST instructions. Resolution is tenths of a second.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Execution delay between FST instructions. Resolution is tenths of a second.
        """

        FST_VERSION = PointTypeParameter(
            parameter_number=28,
            parameter_name='FST Version',
            parameter_desc='Stores information about the version of the FST code. The user sets this before the FST is uploaded to the ROC800.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Stores information about the version of the FST code. The user sets this before the FST is uploaded to the ROC800.
        """

        FST_DESCRIPTION = PointTypeParameter(
            parameter_number=29,
            parameter_name='FST Description',
            parameter_desc='Contains a short description about the FST that is running. The user sets this before the FST is uploaded to the ROC800.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x20 0x7E for each byte'
        )
        """
        Contains a short description about the FST that is running. The user sets this before the FST is uploaded to the ROC800.
        """

        MESSAGE_DATA_2 = PointTypeParameter(
            parameter_number=30,
            parameter_name='Message Data #2',
            parameter_desc='This parameter is updated with the second argument of the MS2 FST command when the command executes.',
            data_type=dt.AC,
            access='R/O',
            value_range='0x2D, 0x2E, 0x30 0x39 for each byte'
        )
        """
        This parameter is updated with the second argument of the MS2 FST command when the command executes.
        """

        STEPS__TASK_CYCLE = PointTypeParameter(
            parameter_number=31,
            parameter_name='Steps / Task Cycle',
            parameter_desc='The requested number of steps to be executed each cycle of the FST task for this FST. The FST task nominally runs every 100 ms.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-250'
        )
        """
        The requested number of steps to be executed each cycle of the FST task for this FST. The FST task nominally runs every 100 ms.
        """

        ACTUAL_STEPS__TASK_CYCLE = PointTypeParameter(
            parameter_number=32,
            parameter_name='Actual Steps / Task Cycle',
            parameter_desc='The actual number of FST steps that the ROC800 executed for this FST during the most recent cycle of the FST task.',
            data_type=dt.UINT8,
            access='R/O',
            value_range='0 > 250'
        )
        """
        The actual number of FST steps that the ROC800 executed for this FST during the most recent cycle of the FST task.
        """

        FST_CYCLE_TIME = PointTypeParameter(
            parameter_number=33,
            parameter_name='FST Cycle Time',
            parameter_desc='The amount of time in seconds from the beginning of the last execution of the FST (step 1) to the beginning of the current execution (step 1).',
            data_type=dt.FL,
            access='R/O',
            value_range='0 Any valid positive IEEE 754 float'
        )
        """
        The amount of time in seconds from the beginning of the last execution of the FST (step 1) to the beginning of the current execution (step 1).
        """





class FST_REGISTER_TAGS(PointType):
    """FST Register Tags"""

    point_type_number: int = 97
    """Point Type ID"""

    point_type_desc: str = 'FST Register Tags'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        REGISTER_TAG_1 = PointTypeParameter(
            parameter_number=0,
            parameter_name='Register Tag 1',
            parameter_desc='Text string used as a label for Register 1 (R1).',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Text string used as a label for Register 1 (R1).
        """

        REGISTER_TAG_2 = PointTypeParameter(
            parameter_number=1,
            parameter_name='Register Tag 2',
            parameter_desc='Text string used as a label for Register 2 (R2).',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Text string used as a label for Register 2 (R2).
        """

        REGISTER_TAG_3 = PointTypeParameter(
            parameter_number=2,
            parameter_name='Register Tag 3',
            parameter_desc='Text string used as a label for Register 3 (R3).',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Text string used as a label for Register 3 (R3).
        """

        REGISTER_TAG_4 = PointTypeParameter(
            parameter_number=3,
            parameter_name='Register Tag 4',
            parameter_desc='Text string used as a label for Register 4 (R4).',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Text string used as a label for Register 4 (R4).
        """

        REGISTER_TAG_5 = PointTypeParameter(
            parameter_number=4,
            parameter_name='Register Tag 5',
            parameter_desc='Text string used as a label for Register 5 (R5).',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Text string used as a label for Register 5 (R5).
        """

        REGISTER_TAG_6 = PointTypeParameter(
            parameter_number=5,
            parameter_name='Register Tag 6',
            parameter_desc='Text string used as a label for Register 6 (R6).',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Text string used as a label for Register 6 (R6).
        """

        REGISTER_TAG_7 = PointTypeParameter(
            parameter_number=6,
            parameter_name='Register Tag 7',
            parameter_desc='Text string used as a label for Register 7 (R7).',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Text string used as a label for Register 7 (R7).
        """

        REGISTER_TAG_8 = PointTypeParameter(
            parameter_number=7,
            parameter_name='Register Tag 8',
            parameter_desc='Text string used as a label for Register 8 (R8).',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Text string used as a label for Register 8 (R8).
        """

        REGISTER_TAG_9 = PointTypeParameter(
            parameter_number=8,
            parameter_name='Register Tag 9',
            parameter_desc='Text string used as a label for Register 9 (R9).',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Text string used as a label for Register 9 (R9).
        """

        REGISTER_TAG_10 = PointTypeParameter(
            parameter_number=9,
            parameter_name='Register Tag 10',
            parameter_desc='Text string used as a label for Register 10 (R10).',
            data_type=dt.AC,
            access='R/W',
            value_range='0x20 0x7E for each byte'
        )
        """
        Text string used as a label for Register 10 (R10).
        """





class SOFT_POINT_PARAMETERS(PointType):
    """Soft Point Parameters"""

    point_type_number: int = 98
    """Point Type ID"""

    point_type_desc: str = 'Soft Point Parameters'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        ASCII_TEXT_1 = PointTypeParameter(
            parameter_number=0,
            parameter_name='ASCII Text 1',
            parameter_desc='Text string used to label instance of soft point. The x in default is the number of the soft point.',
            data_type=dt.AC,
            access='R/W',
            value_range='Any printable ASCII text.'
        )
        """
        Text string used to label instance of soft point. The x in default is the number of the soft point.
        """

        FLOAT_1 = PointTypeParameter(
            parameter_number=1,
            parameter_name='Float 1',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        FLOAT_2 = PointTypeParameter(
            parameter_number=2,
            parameter_name='Float 2',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        FLOAT_3 = PointTypeParameter(
            parameter_number=3,
            parameter_name='Float 3',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        FLOAT_4 = PointTypeParameter(
            parameter_number=4,
            parameter_name='Float 4',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        FLOAT_5 = PointTypeParameter(
            parameter_number=5,
            parameter_name='Float 5',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        FLOAT_6 = PointTypeParameter(
            parameter_number=6,
            parameter_name='Float 6',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        FLOAT_7 = PointTypeParameter(
            parameter_number=7,
            parameter_name='Float 7',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        FLOAT_8 = PointTypeParameter(
            parameter_number=8,
            parameter_name='Float 8',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        FLOAT_9 = PointTypeParameter(
            parameter_number=9,
            parameter_name='Float 9',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        FLOAT_10 = PointTypeParameter(
            parameter_number=10,
            parameter_name='Float 10',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        FLOAT_11 = PointTypeParameter(
            parameter_number=11,
            parameter_name='Float 11',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        FLOAT_12 = PointTypeParameter(
            parameter_number=12,
            parameter_name='Float 12',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        FLOAT_13 = PointTypeParameter(
            parameter_number=13,
            parameter_name='Float 13',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        FLOAT_14 = PointTypeParameter(
            parameter_number=14,
            parameter_name='Float 14',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        FLOAT_15 = PointTypeParameter(
            parameter_number=15,
            parameter_name='Float 15',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        FLOAT_16 = PointTypeParameter(
            parameter_number=16,
            parameter_name='Float 16',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        FLOAT_17 = PointTypeParameter(
            parameter_number=17,
            parameter_name='Float 17',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        FLOAT_18 = PointTypeParameter(
            parameter_number=18,
            parameter_name='Float 18',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        FLOAT_19 = PointTypeParameter(
            parameter_number=19,
            parameter_name='Float 19',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        FLOAT_20 = PointTypeParameter(
            parameter_number=20,
            parameter_name='Float 20',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Miscellaneous storage.
        """

        LONG_1 = PointTypeParameter(
            parameter_number=21,
            parameter_name='Long 1',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4294967295'
        )
        """
        Miscellaneous storage.
        """

        LONG_2 = PointTypeParameter(
            parameter_number=22,
            parameter_name='Long 2',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4294967295'
        )
        """
        Miscellaneous storage.
        """

        SHORT_1 = PointTypeParameter(
            parameter_number=23,
            parameter_name='Short 1',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Miscellaneous storage.
        """

        SHORT_2 = PointTypeParameter(
            parameter_number=24,
            parameter_name='Short 2',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Miscellaneous storage.
        """

        SHORT_3 = PointTypeParameter(
            parameter_number=25,
            parameter_name='Short 3',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        Miscellaneous storage.
        """

        SHORT_4 = PointTypeParameter(
            parameter_number=26,
            parameter_name='Short 4',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Miscellaneous storage.
        """

        SHORT_5 = PointTypeParameter(
            parameter_number=27,
            parameter_name='Short 5',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Miscellaneous storage.
        """

        SHORT_6 = PointTypeParameter(
            parameter_number=28,
            parameter_name='Short 6',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        Miscellaneous storage.
        """

        SHORT_7 = PointTypeParameter(
            parameter_number=29,
            parameter_name='Short 7',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        Miscellaneous storage.
        """

        SHORT_8 = PointTypeParameter(
            parameter_number=30,
            parameter_name='Short 8',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Miscellaneous storage.
        """

        SHORT_9 = PointTypeParameter(
            parameter_number=31,
            parameter_name='Short 9',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 > 65535'
        )
        """
        Miscellaneous storage.
        """

        SHORT_10 = PointTypeParameter(
            parameter_number=32,
            parameter_name='Short 10',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT16,
            access='R/W',
            value_range='0 65535'
        )
        """
        Miscellaneous storage.
        """

        BYTE_1 = PointTypeParameter(
            parameter_number=33,
            parameter_name='Byte 1',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Miscellaneous storage.
        """

        BYTE_2 = PointTypeParameter(
            parameter_number=34,
            parameter_name='Byte 2',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Miscellaneous storage.
        """

        BYTE_3 = PointTypeParameter(
            parameter_number=35,
            parameter_name='Byte 3',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Miscellaneous storage.
        """

        BYTE_4 = PointTypeParameter(
            parameter_number=36,
            parameter_name='Byte 4',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Miscellaneous storage.
        """

        BYTE_5 = PointTypeParameter(
            parameter_number=37,
            parameter_name='Byte 5',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Miscellaneous storage.
        """

        BYTE_6 = PointTypeParameter(
            parameter_number=38,
            parameter_name='Byte 6',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Miscellaneous storage.
        """

        BYTE_7 = PointTypeParameter(
            parameter_number=39,
            parameter_name='Byte 7',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Miscellaneous storage.
        """

        BYTE_8 = PointTypeParameter(
            parameter_number=40,
            parameter_name='Byte 8',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Miscellaneous storage.
        """

        BYTE_9 = PointTypeParameter(
            parameter_number=41,
            parameter_name='Byte 9',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Miscellaneous storage.
        """

        BYTE_10 = PointTypeParameter(
            parameter_number=42,
            parameter_name='Byte 10',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-255'
        )
        """
        Miscellaneous storage.
        """

        DOUBLE_1 = PointTypeParameter(
            parameter_number=43,
            parameter_name='Double 1',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.DBL,
            access='R/W',
            value_range='Valid IEEE double precision floating point'
        )
        """
        Miscellaneous storage.
        """

        DOUBLE_2 = PointTypeParameter(
            parameter_number=44,
            parameter_name='Double 2',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.DBL,
            access='R/W',
            value_range='Valid IEEE double precision floating point'
        )
        """
        Miscellaneous storage.
        """

        DOUBLE_3 = PointTypeParameter(
            parameter_number=45,
            parameter_name='Double 3',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.DBL,
            access='R/W',
            value_range='Valid IEEE double precision floating point'
        )
        """
        Miscellaneous storage.
        """

        DOUBLE_4 = PointTypeParameter(
            parameter_number=46,
            parameter_name='Double 4',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.DBL,
            access='R/W',
            value_range='Valid IEEE double precision floating point'
        )
        """
        Miscellaneous storage.
        """

        DOUBLE_5 = PointTypeParameter(
            parameter_number=47,
            parameter_name='Double 5',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.DBL,
            access='R/W',
            value_range='Valid IEEE double precision floating point'
        )
        """
        Miscellaneous storage.
        """

        DOUBLE_6 = PointTypeParameter(
            parameter_number=48,
            parameter_name='Double 6',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.DBL,
            access='R/W',
            value_range='Valid IEEE double precision floating point'
        )
        """
        Miscellaneous storage.
        """

        DOUBLE_7 = PointTypeParameter(
            parameter_number=49,
            parameter_name='Double 7',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.DBL,
            access='R/W',
            value_range='Valid IEEE double precision floating point'
        )
        """
        Miscellaneous storage.
        """

        DOUBLE_8 = PointTypeParameter(
            parameter_number=50,
            parameter_name='Double 8',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.DBL,
            access='R/W',
            value_range='Valid IEEE double precision floating point'
        )
        """
        Miscellaneous storage.
        """

        DOUBLE_9 = PointTypeParameter(
            parameter_number=51,
            parameter_name='Double 9',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.DBL,
            access='R/W',
            value_range='Valid IEEE double precision floating point'
        )
        """
        Miscellaneous storage.
        """

        DOUBLE_10 = PointTypeParameter(
            parameter_number=52,
            parameter_name='Double 10',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.DBL,
            access='R/W',
            value_range='Valid IEEE double precision floating point'
        )
        """
        Miscellaneous storage.
        """

        LONG_3 = PointTypeParameter(
            parameter_number=53,
            parameter_name='Long 3',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4294967295'
        )
        """
        Miscellaneous storage.
        """

        LONG_4 = PointTypeParameter(
            parameter_number=54,
            parameter_name='Long 4',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 > 4294967295'
        )
        """
        Miscellaneous storage.
        """

        LONG_5 = PointTypeParameter(
            parameter_number=55,
            parameter_name='Long 5',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 > 4294967295'
        )
        """
        Miscellaneous storage.
        """

        LONG_6 = PointTypeParameter(
            parameter_number=56,
            parameter_name='Long 6',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 > 4294967295'
        )
        """
        Miscellaneous storage.
        """

        LONG_7 = PointTypeParameter(
            parameter_number=57,
            parameter_name='Long 7',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 > 4294967295'
        )
        """
        Miscellaneous storage.
        """

        LONG_8 = PointTypeParameter(
            parameter_number=58,
            parameter_name='Long 8',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4294967295'
        )
        """
        Miscellaneous storage.
        """

        LONG_9 = PointTypeParameter(
            parameter_number=59,
            parameter_name='Long 9',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 > 4294967295'
        )
        """
        Miscellaneous storage.
        """

        LONG_10 = PointTypeParameter(
            parameter_number=60,
            parameter_name='Long 10',
            parameter_desc='Miscellaneous storage.',
            data_type=dt.UINT32,
            access='R/W',
            value_range='0 4294967295'
        )
        """
        Miscellaneous storage.
        """

        LOGGING_ENABLE = PointTypeParameter(
            parameter_number=61,
            parameter_name='Logging Enable',
            parameter_desc='Enabled/disables logging of events for changes to the soft point parameters on this logical. Valid values are 0 (Logging Disabled) and 1 (Logging Enabled).',
            data_type=dt.UINT8,
            access='R/W',
            value_range='0-1'
        )
        """
        Enabled/disables logging of events for changes to the soft point parameters on this logical. Valid values are 0 (Logging Disabled) and 1 (Logging Enabled).
        """





class CONFIGURABLE_OPCODE_TABLE(PointType):
    """Configurable Opcode Table"""

    point_type_number: int = 99
    """Point Type ID"""

    point_type_desc: str = 'Configurable Opcode Table'
    """Point Type Description"""

    class Parameters:
        class PointTypeParameter(Parameter):
            pass

        class PointTypeParameterBinary(ParameterBinary):
            pass


        SEQUENCE_REVISION_ = PointTypeParameter(
            parameter_number=0,
            parameter_name='Sequence/Revision #',
            parameter_desc='Identifies the revision number for this table.',
            data_type=dt.FL,
            access='R/W',
            value_range='Any valid IEEE 754 float'
        )
        """
        Identifies the revision number for this table.
        """

        DATA_1 = PointTypeParameter(
            parameter_number=1,
            parameter_name='Data 1',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_2 = PointTypeParameter(
            parameter_number=2,
            parameter_name='Data 2',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_3 = PointTypeParameter(
            parameter_number=3,
            parameter_name='Data 3',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_4 = PointTypeParameter(
            parameter_number=4,
            parameter_name='Data 4',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_5 = PointTypeParameter(
            parameter_number=5,
            parameter_name='Data 5',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_6 = PointTypeParameter(
            parameter_number=6,
            parameter_name='Data 6',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_7 = PointTypeParameter(
            parameter_number=7,
            parameter_name='Data 7',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_8 = PointTypeParameter(
            parameter_number=8,
            parameter_name='Data 8',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_9 = PointTypeParameter(
            parameter_number=9,
            parameter_name='Data 9',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_10 = PointTypeParameter(
            parameter_number=10,
            parameter_name='Data 10',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_11 = PointTypeParameter(
            parameter_number=11,
            parameter_name='Data 11',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_12 = PointTypeParameter(
            parameter_number=12,
            parameter_name='Data 12',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_13 = PointTypeParameter(
            parameter_number=13,
            parameter_name='Data 13',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_14 = PointTypeParameter(
            parameter_number=14,
            parameter_name='Data 14',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_15 = PointTypeParameter(
            parameter_number=15,
            parameter_name='Data 15',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_16 = PointTypeParameter(
            parameter_number=16,
            parameter_name='Data 16',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_17 = PointTypeParameter(
            parameter_number=17,
            parameter_name='Data 17',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_18 = PointTypeParameter(
            parameter_number=18,
            parameter_name='Data 18',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_19 = PointTypeParameter(
            parameter_number=19,
            parameter_name='Data 19',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_20 = PointTypeParameter(
            parameter_number=20,
            parameter_name='Data 20',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_21 = PointTypeParameter(
            parameter_number=21,
            parameter_name='Data 21',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_22 = PointTypeParameter(
            parameter_number=22,
            parameter_name='Data 22',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_23 = PointTypeParameter(
            parameter_number=23,
            parameter_name='Data 23',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_24 = PointTypeParameter(
            parameter_number=24,
            parameter_name='Data 24',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_25 = PointTypeParameter(
            parameter_number=25,
            parameter_name='Data 25',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_26 = PointTypeParameter(
            parameter_number=26,
            parameter_name='Data 26',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_27 = PointTypeParameter(
            parameter_number=27,
            parameter_name='Data 27',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_28 = PointTypeParameter(
            parameter_number=28,
            parameter_name='Data 28',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_29 = PointTypeParameter(
            parameter_number=29,
            parameter_name='Data 29',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_30 = PointTypeParameter(
            parameter_number=30,
            parameter_name='Data 30',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_31 = PointTypeParameter(
            parameter_number=31,
            parameter_name='Data 31',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_32 = PointTypeParameter(
            parameter_number=32,
            parameter_name='Data 32',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_33 = PointTypeParameter(
            parameter_number=33,
            parameter_name='Data 33',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_34 = PointTypeParameter(
            parameter_number=34,
            parameter_name='Data 34',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_35 = PointTypeParameter(
            parameter_number=35,
            parameter_name='Data 35',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_36 = PointTypeParameter(
            parameter_number=36,
            parameter_name='Data 36',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_37 = PointTypeParameter(
            parameter_number=37,
            parameter_name='Data 37',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_38 = PointTypeParameter(
            parameter_number=38,
            parameter_name='Data 38',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_39 = PointTypeParameter(
            parameter_number=39,
            parameter_name='Data 39',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_40 = PointTypeParameter(
            parameter_number=40,
            parameter_name='Data 40',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_41 = PointTypeParameter(
            parameter_number=41,
            parameter_name='Data 41',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_42 = PointTypeParameter(
            parameter_number=42,
            parameter_name='Data 42',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_43 = PointTypeParameter(
            parameter_number=43,
            parameter_name='Data 43',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """

        DATA_44 = PointTypeParameter(
            parameter_number=44,
            parameter_name='Data 44',
            parameter_desc='User configurable',
            data_type=dt.TLP,
            access='R/W',
            value_range='Any valid TLP'
        )
        """
        User configurable
        """