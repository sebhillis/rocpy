from typing import List, Type, Optional
from .point_type import PointType
from .roc_plus_point_types import *

class PointTypeNotFoundError(KeyError):
    pass

class PointTypes:
    """
    Container class for Point Type & Parameter access.
    """


    """ROC Plus Point Types"""
    VDI = VDI
    HART_EXTENDED = HART_EXTENDED
    HART = HART
    SYSTEM_VARIABLES = SYSTEM_VARIABLES
    LOGON_PARAMETERS = LOGON_PARAMETERS
    COMMUNICATION_PORTS = COMMUNICATION_PORTS
    FST_PARAMETERS = FST_PARAMETERS
    FST_REGISTER_TAGS = FST_REGISTER_TAGS
    SOFT_POINT_PARAMETERS = SOFT_POINT_PARAMETERS
    CONFIGURABLE_OPCODE_TABLE = CONFIGURABLE_OPCODE_TABLE
    POWER_CONTROL_PARAMETERS = POWER_CONTROL_PARAMETERS
    DISCRETE_INPUTS = DISCRETE_INPUTS
    DISCRETE_OUTPUTS = DISCRETE_OUTPUTS
    ANALOG_INPUTS = ANALOG_INPUTS
    ANALOG_OUTPUTS = ANALOG_OUTPUTS
    PULSE_INPUTS = PULSE_INPUTS
    RTD = RTD
    THERMOCOUPLE = THERMOCOUPLE
    MVS = MVS
    SYSTEM_AI = SYSTEM_AI
    PID = PID
    SAMPLER_ODORIZER_PARAMETERS = SAMPLER_ODORIZER_PARAMETERS
    STATION_PARAMETERS = STATION_PARAMETERS
    ORIFICE_METER_RUN_CONFIG = ORIFICE_METER_RUN_CONFIG
    ORIFICE_METER_RUN_VALUES = ORIFICE_METER_RUN_VALUES
    TURBINE_METER_RUN_CONFIG = TURBINE_METER_RUN_CONFIG
    TURBINE_METER_RUN_VALUES = TURBINE_METER_RUN_VALUES
    MODBUS_CONFIG_PARAMETERS = MODBUS_CONFIG_PARAMETERS
    MODBUS_REGISTER_TO_TLP_MAPPING = MODBUS_REGISTER_TO_TLP_MAPPING
    MODBUS_EVENT_ALARM_HISTORY_TABLE = MODBUS_EVENT_ALARM_HISTORY_TABLE
    MODBUS_MASTER_MODEM_CONFIG = MODBUS_MASTER_MODEM_CONFIG
    MODBUS_MASTER_TABLE = MODBUS_MASTER_TABLE
    DS800_CONFIGURATION = DS800_CONFIGURATION
    SECURITY_GROUP_CONFIGURATION = SECURITY_GROUP_CONFIGURATION
    HISTORY_SEGMENT_CONFIGURATION = HISTORY_SEGMENT_CONFIGURATION
    HISTORY_SEGMENT_0_POINT_CONFIGURATION = HISTORY_SEGMENT_0_POINT_CONFIGURATION
    HISTORY_SEGMENT_1_POINT_CONFIGURATION = HISTORY_SEGMENT_1_POINT_CONFIGURATION
    HISTORY_SEGMENT_2_POINT_CONFIGURATION = HISTORY_SEGMENT_2_POINT_CONFIGURATION
    HISTORY_SEGMENT_3_POINT_CONFIGURATION = HISTORY_SEGMENT_3_POINT_CONFIGURATION
    HISTORY_SEGMENT_4_POINT_CONFIGURATION = HISTORY_SEGMENT_4_POINT_CONFIGURATION
    HISTORY_SEGMENT_5_POINT_CONFIGURATION = HISTORY_SEGMENT_5_POINT_CONFIGURATION
    HISTORY_SEGMENT_6_POINT_CONFIGURATION = HISTORY_SEGMENT_6_POINT_CONFIGURATION
    HISTORY_SEGMENT_7_POINT_CONFIGURATION = HISTORY_SEGMENT_7_POINT_CONFIGURATION
    HISTORY_SEGMENT_8_POINT_CONFIGURATION = HISTORY_SEGMENT_8_POINT_CONFIGURATION
    HISTORY_SEGMENT_9_POINT_CONFIGURATION = HISTORY_SEGMENT_9_POINT_CONFIGURATION
    HISTORY_SEGMENT_10_POINT_CONFIGURATION = HISTORY_SEGMENT_10_POINT_CONFIGURATION
    ROC_CLOCK = ROC_CLOCK
    INTERNET_CONFIG_PARAMETERS = INTERNET_CONFIG_PARAMETERS
    USER_C_HOST_PARAMETERS = USER_C_HOST_PARAMETERS
    SMART_IO_MODULE_INFO = SMART_IO_MODULE_INFO
    ALTERNATING_CURRENT_IO = ALTERNATING_CURRENT_IO
    ADVANCE_PULSE_MODULE = ADVANCE_PULSE_MODULE
    HISTORY_SEGMENT_11_POINT_CONFIGURATION = HISTORY_SEGMENT_11_POINT_CONFIGURATION
    HISTORY_SEGMENT_12_POINT_CONFIGURATION = HISTORY_SEGMENT_12_POINT_CONFIGURATION
    TRANSACTIONAL_HISTORY_CONFIG = TRANSACTIONAL_HISTORY_CONFIG
    TRANSACTIONAL_HISTORY_POINT_CONFIG = TRANSACTIONAL_HISTORY_POINT_CONFIG
    RTU_NETWORK_DICOVERY_LIST = RTU_NETWORK_DICOVERY_LIST
    NETWORK_COMMISSIONED_LIST = NETWORK_COMMISSIONED_LIST
    NETWORK_EXPORT_DATA = NETWORK_EXPORT_DATA
    NETWORK_IMPORT_DATA = NETWORK_IMPORT_DATA
    IEC62591_LIVE_LIST = IEC62591_LIVE_LIST
    IEC62591_COMMISSIONED_LIST = IEC62591_COMMISSIONED_LIST

    @classmethod
    def get_all_point_types(cls) -> List[Type[PointType]]:
        point_types: List[Type[PointType]] = []
        for k, v in cls.__dict__.items():
            if isinstance(v, type):
                if issubclass(v, PointType):
                    point_types.append(v)
        return point_types

    @classmethod
    def get_point_type_by_number(cls, point_type: int) -> Type[PointType]:
        point_type_cls: Optional[Type[PointType]] = None
        for k, v in cls.__dict__.items():
            if isinstance(v, type):
                if issubclass(v, PointType):
                    if v.point_type_number == point_type:
                        point_type_cls = v
        if point_type_cls is None:
            raise PointTypeNotFoundError(f'No point type found for point type number {point_type}.')
        else:
            return point_type_cls

    @classmethod
    def get_point_type_by_name(cls, point_type_name: str) -> Type[PointType]:
        point_type_cls: Optional[Type[PointType]] = None
        for k, v in cls.__dict__.items():
            if isinstance(v, type):
                if issubclass(v, PointType):
                    if v.__name__ == point_type_name:
                        point_type_cls = v
        if point_type_cls is None:
            raise KeyError(f'No point type found for name {point_type_name}.')
        else:
            return point_type_cls